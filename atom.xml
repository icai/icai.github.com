<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[泛前端开发]]></title>
  <link href="http://blog.w3cub.com/atom.xml" rel="self"/>
  <link href="http://blog.w3cub.com/"/>
  <updated>2015-08-04T23:59:22+08:00</updated>
  <id>http://blog.w3cub.com/</id>
  <author>
    <name><![CDATA[Terry Cai]]></name>
    <email><![CDATA[gidcai@gmail.com]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[模糊匹配查询正则表达式探究]]></title>
    <link href="http://blog.w3cub.com/blog/2015/07/15/fuzzy-scoring-regex-mayhem-zh/"/>
    <updated>2015-07-15T22:09:43+08:00</updated>
    <id>http://blog.w3cub.com/blog/2015/07/15/fuzzy-scoring-regex-mayhem-zh</id>
    <content type="html"><![CDATA[<p>Autocompletion is never an entirely solved problem. Can anyone really say what on earth a user typing &ldquo;uni&rdquo; into a country input field actually intends to select? It could match any of these:</p>

<p>自动完成一直都是一个没完没了的问题。谁能准确地说出当一个地球人在一个国家输入框输入“uni”打算选什么？可能会出现以下情况：</p>

<ul>
<li>Tanzania, [<strong>U</strong>][<strong>n</strong>][<strong>i</strong>]ted Republic of</li>
<li>[<strong>U</strong>][<strong>n</strong>][<strong>i</strong>]ted Arab Emirates</li>
<li>[<strong>U</strong>][<strong>n</strong>][<strong>i</strong>]ted Kingdom</li>
<li>[<strong>U</strong>][<strong>n</strong>][<strong>i</strong>]ted States</li>
<li>T[<strong>u</strong>][<strong>n</strong>][<strong>i</strong>]sia</li>
</ul>


<p>Of course, it’s probably not the last one, but that right there is a human intuition that we often forget to instil into these UI interactions.</p>

<p>当然，这可能不是最后一个，但人类的直觉通常会忘记灌输这些UI交互。</p>

<!-- more -->


<p>We can divine what the user <em>probably</em> intends most of the time but it&rsquo;ll always be a game of heuristics. Most solutions shy away from this game, opting instead to match the query letter-for-letter in each potential value, and this is usually sufficient, but without any other logic not only will “la” match “Latvia” but also “Angola”. And usually “Ltvia” will match nothing whatsoever, even though it’s seemingly obvious what the user is trying to type.</p>

<p>我们可以推断用户在这上面花费的时间，显然这是一个启发式游戏。大多数解决方案都是尝试匹配字母之间可能潜在的值，通常已经足够了，“la” 没有任何逻辑，会匹配 “Latvia” 也会匹配 “Angola”。但绝不会匹配 “Ltvia”，尽管“Ltvia”看似是用户想要的输入类型。</p>

<p>If you try implementing a fuzzy matcher to solve this, the first revelation is that you can&rsquo;t just boolean-match the query against the data like so many solutions do. You need to score each potential match. Hopefully, in the case of country selection, you end up with a sensible subset of countries that match the query to some reasonable degree. This scoring is necessary so that you know what you&rsquo;re putting at the top of the list. When typing &ldquo;U&rdquo;, the user expects Ukraine or Uzbekistan sooner than Mauritius or Sudan, for example.</p>

<p>假如你想用模糊匹配去解决这个问题。首先，你不能像往常那样用boolean匹配去请求查询数据。你需要计算每个存在匹配的分数。 在选择国家情况下，你最终需要请求匹配查询一些合符逻辑的合理的国家子集。那么这分数是非常有必要的，以便我们可以把它们排到列表的顶部。</p>

<p>（译注, boolean匹配 <a href="https://github.com/bevacqua/fuzzysearch">https://github.com/bevacqua/fuzzysearch</a>）</p>

<p>Oddly, if you looked at the most common autocompletion widget out there (jQuery UI), it <a href="http://jsfiddle.net/2c11xknm/embedded/result,js,html">doesn&rsquo;t appear</a> to follow this intuition.</p>

<p>奇怪的是，假如见过最常用的jQuery UI 自动完成（autocompletion）插件，他并没有解决这个问题。</p>

<p>Even the most <a href="http://baymard.com/labs/country-selector">graceful</a> solutions tend to avoid the muddiness of dealing with mistakes like “untied states” or “leichtenstein”. Sure, the likeliness of a person having to type the name of a country they aren’t intimately familiar with is probably quite low, but people still make mistakes.</p>

<p>即使是最优雅的解决方案，都趋向于忽视模糊处理错误，像“untied states” （united states） 和 “leichtenstein” （liechtenstein ）。当然， 就像一个人输入一个国家的名字，他们不熟悉这个国家可能性是非常很低。但人们仍然会犯错误。</p>

<p>I&rsquo;ve been intrigued by this topic for quite a while and it&rsquo;s why I originally made <a href="https://github.com/padolsey/relevancy.js">relevancy.js</a>. It solves the problem quite well, I think, and it does so in a pretty transparent way, with scores applied for various qualities such as the index of the query within the target string (&ldquo;king&rdquo; scores higher than &ldquo;dom&rdquo; in &ldquo;kingdom&rdquo;, for example), but it&rsquo;s still a quite a lot of code for such a tiny part of an overall user experience.</p>

<p>我一直被这个话题吸引了很长时间，也是我写 <a href="https://github.com/padolsey/relevancy.js">relevancy.js</a> 的原因。它可以很好地处理类似问题，我想，他的原理是非常显而易见的，就是通过分数去区分不同品质（把分数应用于品质）例如，目标字符串查询的索引(正如在查询“kingdom” &ldquo;的时候，king"的分数比 "dom"高)。但这还是需要相当多的代码去实现这小部分，相对于这样一个整体用户体验的而言。</p>

<p>I have once again been playing with this problem (thanks to a certain <a href="https://twitter.com/codepo8/status/572863924887945216">tweet</a>) and have so wanted to come up with something stupefyingly graceful.</p>

<p>我又再一次遇上了这个问题（谢谢 <a href="https://twitter.com/codepo8/status/572863924887945216">tweet</a> 的肯定），我想可以写的更加优雅。</p>

<p>It all starts with a scratch in back of your mind — the one that tells you that your time has come. The <a href="http://xkcd.com/208/">world requires you</a> to use regular expressions.</p>

<p>一切从头开始在你的脑海里，这告诉你的时间到了。<a href="http://xkcd.com/208/">world requires you</a> （世界需要你） 用正则表达式。</p>

<p><strong>Warning:</strong> I don’t sincerely recommend doing any of this. It’s just a bit of fun. It’s probably an inefficient, unreliable, obscure and ultimately foolish endeavour!</p>

<p>Warning： 别分心，不然效率极低的，bebebe～～～</p>

<h2>Let’s begin!</h2>

<h2>我们入正题：</h2>

<p>A static France might look like this:</p>

<p>静态字符串France 正则：</p>

<pre><code>/^France$/
</code></pre>

<p>A more lenient France might be less sensitive to its case:</p>

<p>不区分大小写：</p>

<pre><code>/^france$/i
</code></pre>

<p>We could then allow the characters to be optional too:</p>

<p>我们也可以允许字符是可选的</p>

<pre><code>/^f?r?a?n?c?e?$/i
</code></pre>

<p>This would match “f” and “franc” and “FaE”, etc.</p>

<p>这会匹配 “f”， “franc” 和 “FaE”等等。</p>

<p>But… users make even more grievous mistakes sometimes, and our regular expression should be able to handle those. So let’s add a single character of leniency between each legitimate character, and at the beginning and end of the string:</p>

<p>但…… 用户有时犯更严重的错误，我们的正常表达应该能够处理这些错误。因此，让我们在每一个合理的字母之间加上一个宽容的字符在每个字符的前后。</p>

<pre><code>/^.?f?.?r?.?a?.?n?.?c?.?e?.?$/i
</code></pre>

<p>But then this would allow contiguous mistakes like “fafafafa”. We only want to allow a <em>single</em> incorrect mistake after each successfully entered character. For this we can use groups to force each character to be matched and a lazy quantifier on the mistake character to ensure that legitimate characters get to successfully match.</p>

<p>但当这允许连续错误像“fafafafa”，我们只允许一个单一的错误在每个正确输入字符之后。为此我们可以使用分组强制每个字符匹配和懒惰匹配的错误的字符串，确保合法字符可以成功匹配。</p>

<p>So:</p>

<pre><code>/f.?otherStuff/
</code></pre>

<p>Becomes:</p>

<pre><code>/(?:f.??)?otherStuff/
</code></pre>

<p>In English: Try to match <code>f</code> followed by <code>otherStuff</code>. If impossible then try to match any character after <code>f</code> but before <code>otherStuff</code>. (This is why lazy quantifiers (e.g. <code>??</code>) are so useful!)</p>

<p>就是说，尝试匹配跟在otherStuff之前的f。如果不可能的话，尝试匹配任何在“f” 之后，在“otherStuff” 之前的字符。</p>

<p>The entire regex would become:</p>

<p>完整的正则表达式会变成：</p>

<pre><code>/^(?:.(?=f))?(?:f.??)?(?:r.??)?(?:a.??)?(?:n.??)?(?:c.??)?(?:e.??)?$/i
</code></pre>

<p>We should probably capture each individual match (<code>f</code> should be <code>(f)</code>) so that we can analyze the result and score it appropriately.</p>

<p>我们可能需要捕获每个单独的匹配(<code>f</code> 应该是<code>(f)</code>) ，以便我们可以分析结果并适当地评分。</p>

<pre><code>var r = /^(?:(f).??)?(?:(r).??)?(?:(a).??)?(?:(n).??)?(?:(c).??)?(?:(e).??)?$/i

'f$R-aN_cEx'.match(r);
// =&gt; ["f$R-aN_cEx", "f", "R", "a", "N", "c", "E"]
</code></pre>

<p>The regular expression, broken down:</p>

<p>正则表达式解释：</p>

<pre><code>/
  ^       # Start of string

  (?:     # Non-captured group（非捕获）
    (f)   # Match and capture 'f' （匹配并捕获"f"）
    .??   # Followed lazily by any character （懒惰匹配跟随字符）
  )?      # Entire group is optional （组可选）

  (?:     # Non-captured group
    (r)   # Match and capture 'f'
    .??   # Followed lazily by any character
  )?      # Entire group is optional

  ...     # Etc.

  $       # End of string
/i
</code></pre>

<p><em>A quick note</em>: <em>lazy</em> or <em>lazily</em> in the context of regular expressions simply means that that thing will be intentionally excluded from the first match attempt and will only be used if the subsequent regular expression is unsuccessful without it.</p>

<p>小便签：正则表达式中懒惰匹配是指……</p>

<p>One caveat with the above regex is that it doesn’t allow a mistake to be at the beginning of the string. We could fix this with a lookahead to the effect of “allow a mistake here as long as its followed by a non-mistake” but since “non-mistake” could effectively be any character in the legitimate string it’s easier to just make allowances for that initial mistake in each group. Additionally, we probably want to capture every single mistake, in addition to legitimate characters. Here’s our next iteration:</p>

<p>一个需要注意的是，上面的正则表达式，它不允许在字符串的开头有错误。我们可以修复这个前瞻错误通过 “允许犯错误，只要它跟在一个非错误后面”， 但由于 “非错误” 可以有效地在合法字符串中的任何字符，使得它更容易在每个组中出现所允许的初始错误。此外，除了合法的字符，我们还可能要捕捉每一个错误。下面是我们的实现：</p>

<pre><code>/
  ^         # Start of string

  (?:       # Non-captured group

    (^.)?   # Captured optional mistake at the beginning of the string
            # ===============================================

    (f)     # Match and capture 'f'
    (.??)   # Followed lazily by any character (captured)
  )?        # Entire group is optional

  ...     # Etc.

  $       # End of string
/i
</code></pre>

<p>The check <code>(^.)?</code> has to be specified in each group, to account for mistakes that don’t involve “f”, like “krance” or “ttance”, etc.</p>

<p>检查<code>(^.)?</code>必须每组都指定, 以便考虑错误不涉及到 “f”, 就像 “krance” 和 “ttance”, 等等。</p>

<p>Since we’re aiming to genericize this entire mess, we should create a generator that assembles the regular expression given any piece of text:</p>

<p>我们的目标是是要去处理这一类问题，所以我们需要构建一个完整的生成器去组装将给定的文本集合的正则表达式。</p>

<pre><code>function makeFuzzyRegex(string) {

  if (!string) { return /^$/; }

  // Escape any potential special characters:
  var cleansed = string.replace(/\W/g, '\\$&amp;');

  return RegExp(
    '^' +
      cleansed.replace(
        // Find every escaped and non-escaped char:
        /(\\?.)/g,
        // Replace with fuzzy character matcher:
        '(?:(^.)?($1)(.??))?'
      ) +
    '$',
    'i'
  );
}

makeFuzzyRegex('omg');
// =&gt; /^(?:(^.)?(o)(.??))?(?:(^.)?(m)(.??))?(?:(^.)?(g)(.??))?$/i
</code></pre>

<p>This regex matched against ‘_o-m*g!’ produces:</p>

<pre><code>[
  // Full match:
  "_o-m*g!",

  // Captures:
  "_",           // Mistake
  "o",           // Legit
  "-",           // Mistake

  undefined,     // Void mistake
  "m",           // Legit
  "*",           // Mistake

  undefined,     // Void mistake
  "g",           // Legit
  "!"            // Mistake
]
</code></pre>

<p>The captures are in groups of three, with every second capture being the legitimate character (case-insensitive), and with every first and third potentially being mistakes.</p>

<p>捕获是在三组，每组捕获都是合法性（不区分大小写），并与每组第一和第三个字符都可能潜在错误。</p>

<p>We can then loop through these captures and apply weights as we see fit.</p>

<p>我们可以循环这些捕捉和应用权重作为我们合适的分数。</p>

<pre><code>var fullMatch = makeFuzzyRegex('omg').exec('_o-m*g!');
var captures = fullMatch.slice(1); // Get captures specifically
var score = 0;

for (var i = 0, l = captures.length; i &lt; l; i += 3) {
  if (captures[i]) score -= 1;
  if (captures[i+1]) score += 10;
  if (captures[i+2]) score -= 1;
}

score; // =&gt; 26
</code></pre>

<p>That scoring is quite arbitrary, but we’ve at least prescribed our wish to score successes more than we punish mistakes (10 vs 1).</p>

<p>这计算是十分随意的，但是我们至少指定我们的愿望比我们惩罚的错误更成功(10 vs 1)。</p>

<p>We can start to play with the heuristics of this if we wrap it all up:</p>

<p>我们把它封装起来，让Ta溜溜：</p>

<pre><code>function createFuzzyScorer(text) {

  var matcher = makeFuzzyRegex(text);

  return function(query) {
    var match = matcher.exec(query);

    if (!match) return 0;

    var captures = match.slice(1);
    var score = 0;

    for (var i = 0, l = captures.length; i &lt; l; i += 3) {
      if (captures[i]) score -= 1;
      if (captures[i+1]) score += 10;
      if (captures[i+2]) score -= 1;
    }

    return score;
  };

  function makeFuzzyRegex(string) {

    if (!string) { return /^$/; }

    // Escape any potential special characters:
    var cleansed = string.replace(/\W/g, '\\$&amp;');

    return RegExp(
      '^' +
        cleansed.replace(
          // Find every escaped and non-escaped char:
          /(\\?.)/g,
          // Replace with fuzzy character matcher:
          '(?:(^.)?($1)(.??))?'
        ) +
      '$',
      'i'
    );
  }
}
</code></pre>

<p>Our first attempt isn’t too bad:</p>

<p>我们的第一次尝试并不太坏：</p>

<pre><code>var score = createFuzzyScorer('omg');

score('omg');     // =&gt; 30
score('xOmg');    // =&gt; 29
score('.o.m.g.'); // =&gt; 26
score('om');      // =&gt; 20
score('og');      // =&gt; 20
score('o');       // =&gt; 10
score('nope');    // =&gt; 0
</code></pre>

<p>These seem like sensible enough scores, generally, but we’re more interested in autocompletion, and so there’s an obvious predictive element there. If a user types ‘o’ then that should probably score higher than ‘g’ if we’re testing against ‘omg’, but with the above mechanism they both receive a standard 10:</p>

<p>这似乎是可感知的足够的分数，一般，但我们在自动完成更感兴趣，所以有一个明显的预测元素的存在。当我们我们测试‘omg’时，如果用户键入"o"那应该得分高于"g"，但上述方法都接受标准的10：</p>

<pre><code>var score = createFuzzyScorer('omg');

score('o'); // =&gt; 10
score('g'); // =&gt; 10
</code></pre>

<p>We can fix this by applying a higher weight to matches that appear earlier in the string:</p>

<p>我们可以用更高的权重来解决字符串中较早出现的匹配问题：</p>

<pre><code>// The scoring loop:
for (var i = 0, l = captures.length; i &lt; l; i += 3) {
  if (captures[i]) score -= 0.1;
  if (captures[i+1]) score += (l - i) / l; // the magic
  if (captures[i+2]) score -= 0.1;
}
</code></pre>

<p>Now the score given for any singular legitimate match will decrease as the index (<code>i</code>) increases. Here are the results:</p>

<p>现在任何奇异的合法的匹配的得分将会递减随着指数（i）增加。这里是结果：</p>

<pre><code>var score = createFuzzyScorer('omg');

score('omg');     // =&gt; 1.99
score('xOmg');    // =&gt; 1.90
score('om');      // =&gt; 1.66
score('.o.m.g.'); // =&gt; 1.59
score('og');      // =&gt; 1.33
score('o');       // =&gt; 1.00
score('nope');    // =&gt; 0.00
</code></pre>

<p>This is getting closer to our intuition. The next step would be to try to create a real autocompletion widget. I’ve done it so I know that we’ll want to make one more change. The problem with our scoring right now is that it’ll award legitimate characters relative to the length of the string. But when comparing scores across multiple subject strings, this approach seems broken.</p>

<p>这是越来越接近我们的直觉。下一步将努力创造一个真正的自动完成功能部件。我已经这样做了，所以我知道，我们将要做一个改变。现在我们分值的问题是，奖励合法的字符相对于字符串的长度。但是，当比较多个同类字符串的分数时，这种方法似乎被打破。</p>

<pre><code>createFuzzyScorer('RuneScript')('Ru'); // 1.9
createFuzzyScorer('Ruby')('Ru');       // 1.7
</code></pre>

<p>These should both score equally, as “Ru” is just as likely to become “Ruby” as it is to become “RuneScript”. To achieve this we should only take into account the index, and make the weight of any scoring decision inversely proportional to that index, in this case via an exponential taper (<code>pow(index, -2)</code>).</p>

<p>显然，分数应该相等，因为 “Ru” 推演成 “Ruby” 和 “RuneScript” 是一样. 为了实现这一点，我们应该考虑到该指数，并使任何得分决定的权重与指数成反比，在这种情况下，通过指数锥度 (<code>pow(index, -2)</code>)</p>

<pre><code>// The scoring loop:
for (var i = 0, l = captures.length; i &lt; l; i += 3) {
  var relevancyOfCharacter = Math.pow(i + 1, -2);
  if (captures[i]) score -= relevancyOfCharacter * 0.1;
  if (captures[i+1]) score += relevancyOfCharacter * 1;
  if (captures[i+2]) score -= relevancyOfCharacter * 0.1;
}
</code></pre>

<p><em>(Final version of <code>createFuzzyScorer</code> available <a href="https://gist.github.com/padolsey/a27a32d5859a71403b10">as a gist</a>.)</em></p>

<p><strong><a href="http://jsbin.com/wanetemare/1/edit?js,output">See this demo using programming languages as the dataset</a></strong>. Try intentionally misspelling something (jawascript), or missing out characters (jaascit), or just going a little crazy (jahskt). It works beautifully.</p>

<p><strong><a href="http://jsbin.com/wanetemare/1/edit?js,output">在数据集用编程语言实现查看demo</a></strong>. 尝试拼写错误（jawascript），或者丢失字母（jaascit）或者输入一些类似的（jahskt）， 它依然工作得很漂亮。</p>

<p>To achieve speedy sorting, a fuzzy scorer is created for every single value before the user types anything:</p>

<p>为了实现快速排序， 每一个单一的值的模糊分数应该在用户输入之前被创建：</p>

<pre><code>var data = PROGRAMMING_LANGUAGES.map(function(lang, i) {
  return {
    actualValue: lang,
    score: createFuzzyScorer(lang),
    i: i,
    toString: function() { return lang; }
  };
});
</code></pre>

<p>This means we can iterate through <code>data</code> on every relevant input event, and call the <code>score()</code>method with the current query. We can then bundle this into a <em>filter->sort->slice</em> flow to get our list of sensible suggestions:</p>

<p>这意味着我们可以遍历每个相关的输入事件的 data ，调用 score() 方法来实现当前查询。我们可以把这变成一个 <em>filter->sort->slice</em> 得出我们列出的有判断力的建议：</p>

<pre><code>var sorted = data.filter(function(item) {

  // Get rid of any very unlikely matches (and cache the score!)
  return (item._cachedScore = item.score(query)) &gt;= .5;

}).sort(function(a, b) {

  var as = a._cachedScore;
  var bs = b._cachedScore;

  // Sort by score, and if score is equal, then by original index:
  // (We would typically return 0 in that case but some engines don't stable-sort)
  return as &gt; bs ? -1 : as == bs &amp;&amp; a.i &lt; b.i ? -1 : 1;

}).slice(0, 10); // We only need the top 10...
</code></pre>

<p>And.. we’re done. It’s never really finished though: you’ll find endless tweaks that can be made to the scorer to make it more believably resemble human-like intuition.</p>

<p>我们做到了，虽然它从来没有真正完成，你会发现很多的调整，使得分数更加人工智能。</p>

<p>For those wanting to test the resulting country autocompletion interaction: <strong><a href="http://jsbin.com/lejucikiha/1/edit?js,output">See the demo</a></strong>.</p>

<p>对于那些想要测试国家自动完成返回值交互的，<strong><a href="http://jsbin.com/lejucikiha/1/edit?js,output">See the demo</a></strong>.</p>

<p>I guess, despite my initial warning, I wouldn’t actually mind using this in production, as long as there were a decent number of unit tests. I’d probably also assemble the regular expressions on the server and serve them up as literals. It’s also worth mentioning that almost everything in this post has been exploring the fuzzy-matching of very short strings in small datasets. Even in the case of the country demo, to get more applicable results, I broke up long names into the component parts and then scored against each. E.g.</p>

<p>我想，尽管我最初的忠告，我不介意使用这个在生产，只要做一些数量的单位测试。我可能也组装正则表达式在服务器并为提供服务。值得一提的是，几乎所有的这篇文章都在探索小数据集上的模糊匹配。即使在国家输入案例的演示，以获得更适用的结果，我折断了长的名字，组成部分，然后对每一个得分。例如</p>

<pre><code>// E.g. Macedonia, the Former Yugoslav Republic of:
var scorers = [
  "Macedonia, the Former Yugoslav Republic of",
  "Macedonia",
  "the",
  "former",
  "yugoslav",
  "republic",
  "of"
].map(createFuzzyScorer);
// Etc.
</code></pre>

<p>And this would be terribly inefficient on a larger scale, so with any dataset longer than a list of countries you’re probably best to explore <a href="http://en.wikipedia.org/wiki/Trie">Trie</a>-based approaches to autocompletion.</p>

<p>And with that, I’ll shut-up and wish you merry regex’ing!</p>

<p>然而这在大规模扫描下是非常低效的，所以任何数据集比的国家名单长的，你可能最好的探究 <a href="http://en.wikipedia.org/wiki/Trie">Trie</a>-based 方法 来处理自动完成。然后，我会闭嘴， wish you merry regex’ing!</p>

<p>译者注：</p>

<p>文中及其评论提到的资源：</p>

<p><a href="https://github.com/padolsey/relevancy.js">https://github.com/padolsey/relevancy.js</a></p>

<p><a href="https://github.com/bevacqua/fuzzysearch">https://github.com/bevacqua/fuzzysearch</a></p>

<p><a href="https://github.com/gf3/Levenshtein">https://github.com/gf3/Levenshtein</a></p>

<p>作者github：<a href="https://github.com/padolsey">https://github.com/padolsey</a></p>

<p>译者：主要用到正则懒惰匹配去实现<code>真值</code>线性回归。you are truly, how much truly you are!</p>

<p>就是通过匹配度分数进行排序，而不是单单的boolean 值指定，再a-z 排序输出，</p>

<blockquote><p>比例投票法：【A，B】候选人，每人有100%的投票额度。%A + %B + %X = 1。X 代表 你放弃的额度。 你的投票额度代表你对候选人信任度。这样的投票更具民主性。例如：我投A 70%，B 0% 那么X 就是30%。懂么，我发明的。[挖鼻屎] <a href="http://weibo.com/1356859197/BqrPv2rRL?type=comment">链接</a></p></blockquote>

<p>100%选你 就是<a href="https://github.com/bevacqua/fuzzysearch">https://github.com/bevacqua/fuzzysearch</a>所用的方法，你只能在true or false 之间选择，而padolsey所用的方法字样更加人工智能，但是在大规模数据下是非常低效的。另外在作者的博客评论中也提到的 <a href="https://github.com/gf3/Levenshtein">https://github.com/gf3/Levenshtein</a>， 可以自行wiki一下。</p>

<hr />

<p>最后如有漏译，错译，欢迎指正。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rvm help]]></title>
    <link href="http://blog.w3cub.com/blog/2015/06/28/rvm-help/"/>
    <updated>2015-06-28T13:12:54+08:00</updated>
    <id>http://blog.w3cub.com/blog/2015/06/28/rvm-help</id>
    <content type="html"><![CDATA[<p>常用命令（Action）：</p>

<pre><code>list        :: show currently installed rubies, interactive output.
install     :: install one or many ruby versions
use         :: setup current shell to use a specific ruby version
</code></pre>

<!-- more -->


<p>详细帮助文档（rvm -h）：</p>

<pre><code>= rvm

* https://rvm.io/
* https://github.com/wayneeseguin/rvm/

== DESCRIPTION:

RVM is the Ruby enVironment Manager (rvm).

It manages Ruby application environments and enables switching between them.

== Installation

  curl -L https://get.rvm.io | bash -s stable --autolibs=enabled [--ruby] [--rails] [--trace]

stable     :: Install stable RVM, good for servers.
--ruby     :: Additionally install latest ruby version (MRI).
--rails    :: Install gem rails into default gemset (also installs ruby=).
--trace    :: Print trace of the installation, gist output when you have problems.
--autolibs :: Enable or disable autolibs see: https://rvm.io/rvm/autolibs

More details here: https://rvm.io/rvm/install/

== Usage

  rvm [Flags] [Options] Action [Implementation[,Implementation[,...]]

== Flags

--default         :: with 'rvm use X', sets the default ruby for new shells to X.
--debug           :: Toggle debug mode on for very verbose output.
--disable-binary  :: Install from source instead of using binaries
--trace           :: Toggle trace mode on to see EVERYTHING rvm is doing.
--force           :: Force install, removes old install &amp; source before install.
--summary         :: Used with rubydo to print out a summary of the commands run.
--latest          :: with gemset --dump skips version strings for latest gem.
--gems            :: with uninstall/remove removes gems with the interpreter.
--docs            :: with install, attempt to generate ri after installation.
--reconfigure     :: Force ./configure on install even if Makefile already exists.
--skip-gemsets    :: with install, skip the installation of default gemsets.
--quiet-curl      :: Makes curl silent when fetching data

== Options

-v|--version     :: Emit rvm version loaded for current shell
-l|--level       :: patch level to use with rvm use / install
   --bin         :: path for binaries to be placed (~/.rvm/bin/)
-S               :: Specify a script file to attempt to load and run (rubydo)
-e               :: Execute code from the command line.
--gems           :: Used to set the 'gems_flag', use with 'remove' to remove
                    gems
--archive        :: Used to set the 'archive_flag', use with 'remove' to remove
                    archive
--patch          :: With MRI Rubies you may specify one or more full paths to
                    patches

                    for multiple, specify comma separated:

                      --patch /.../.../a.patch[%prefix],/.../.../.../b.patch

                    'prefix' is an optional argument, which will be bypassed
                    to the '-p' argument of the 'patch' command. It is separated
                    from patch file name with '%' symbol.
-C|--configure   :: custom configure options. If you need to pass several
                    configure options then append them comma separated:

                      -C --...,--...,--...

--nice           :: process niceness (for slow computers, default 0)
--ree-options    :: Options passed directly to ree's './installer' on the
                    command line.
--with-rubies    :: Specifies a string for rvm to attempt to expand for set
                    operations.

== Action

(Note: for most actions, 'rvm help action-name' may provide more information.)

*usage*     :: show this usage information
version     :: show the rvm version installed in rvm_path
use         :: setup current shell to use a specific ruby version
reload      :: reload rvm source itself (useful after changing rvm source)
implode     :: (seppuku) removes the rvm installation completely.

               This means everything in $rvm_path (~/.rvm || /usr/local/rvm).

               This does not touch your profiles. However, this means that you
               must manually clean up your profiles and remove the lines which
               source RVM.
get         :: {head,stable} upgrades rvm to latest head or stable version.

               Check 'rvm help get' for more details.

               (If you experience bugs try this first with head version, then
               ask for help in #rvm on irc.freenode.net and hang around)
reset       :: remove current and stored default &amp; system settings.

               (If you experience odd behavior try this second)
info        :: show the *current* environment information for current ruby
current     :: print the *current* ruby version and the name of any gemset
               being used.
debug       :: show info plus additional information for common issues

install     :: install one or many ruby versions

               See also: https://rvm.io/rubies/installing/
uninstall   :: uninstall one or many ruby versions, leaves their sources
remove      :: uninstall one or many ruby versions and remove their sources
reinstall   :: reinstall ruby and runs gem pristine on all gems,
               make sure to read output, use 'all' for all rubies.

migrate     :: Lets you migrate all gemsets from one ruby to another.
upgrade     :: Lets you upgrade from one version of a ruby to another, including
               migrating your gemsets semi-automatically.

wrapper     :: generates a set of wrapper executables for a given ruby with the
               specified ruby and gemset combination. Used under the hood for
               passenger support and the like.

cleanup     :: Lets you remove stale source folders / archives and other
               miscellaneous data associated with rvm.
repair      :: Lets you repair parts of your environment e.g. wrappers, env
               files and and similar files (e.g. general maintenance).
fix-permissions :: Repairs broken permissions (e.g. by sudo or chef)
osx-ssl-certs :: Helps update certificates for OpenSSL installed by rvm on OSX.
snapshot    :: Lets you backup / restore an rvm installation in a lightweight
               manner.

alias       :: Lets you set shortcut strings for convenience with 'rvm use'.
disk-usage  :: Tells you how much disk space rvm install is using.
tools       :: Provides general information about the ruby environment,
               primarily useful when scripting rvm.
docs        :: Tools to make installing ri and rdoc documentation easier.
rvmrc       :: Tools related to managing rvmrc trust and loading.
patchset    :: Tools related to managing ruby patchsets.

do          :: runs an arbitrary command against specified and/or all rubies
cron        :: Manages setup for using ruby in cron tasks.

gemset      :: gemsets: https://rvm.io/gemsets/

rubygems    :: Switches the installed version of rubygems for the current ruby.

config-get  :: display values for RbConfig::CONFIG variables.
gemdir      :: display the path to the current gem directory (GEM_HOME).


fetch       :: Performs an archive / src fetch only of the selected ruby.
list        :: show currently installed rubies, interactive output.

               https://rvm.io/rubies/list/
autolibs    :: Controls settings for automatically installing dependencies.
pkg         :: Install a dependency package {readline,iconv,zlib,openssl}

               https://rvm.io/packages/
notes       :: Display notes, with operating system specifics.

export      :: Temporarily set an environment variable in the current shell.
unexport    :: Undo changes made to the environment by 'rvm export'.
requirements  :: Installs additional OS specific dependencies/requirements for
                 building various rubies. Usually run by install.
mount       :: Install rubies from external locations.

user        :: Tools for managing RVM mixed mode in multiuser installations.
group       :: Tools for managing groups in multiuser installations.

== Implementation

*ruby*     :: MRI/YARV Ruby (The Gold Standard) {1.8.x, 1.9.x, 2.0.x, 2.1.x, 2.2.x}
jruby      :: JRuby, Ruby interpreter on the Java Virtual Machine.
rbx        :: Rubinius
ree        :: Ruby Enterprise Edition, MRI Ruby with several custom
              patches for performance, stability, and memory.
macruby    :: MacRuby, insanely fast, can make real apps (Mac OS X Only).
maglev     :: GemStone Ruby, awesome persistent ruby object store.
ironruby   :: IronRuby, NOT supported yet. Looking for volunteers to help.
system     :: use the system ruby (eg. pre-rvm state)
default    :: use the default ruby (or the system ruby if a default hasn't been set).

              https://rvm.io/rubies/default/

== Resources:

https://rvm.io/
https://www.pivotaltracker.com/projects/26822

== Contributions:

Any and all contributions offered in any form, past present or future, to the
RVM project are understood to be in complete agreement and acceptance with the
Apache License v2.0.

== LICENSE:

Copyright (c) 2009-2011 Wayne E. Seguin
Copyright (c) 2011-2015 Michal Papis

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

  Action documentation available with 'rvm help action-name':

      alias autolibs cleanup config-get cron current debug disk-usage do docs fetch fix-permissions gemdir gemset gemset/copy get group implode info install list migrate mount notes osx-ssl-certs patchset pkg prepare reinstall remove repair requirements reset rubygems rvmrc rvmrc/to rvmrc/warning snapshot srcdir tools uninstall upgrade use user wrapper 

  Other topics of documentation available with 'rvm help topic':

      alt color upgrade-notes 


  For additional information please visit RVM's documentation website:

      https://rvm.io/

  If you still cannot find an answer to your question, find
  'wayneeseguin', 'mpapis', 'richo', 'lemoinem' or 'rys' in #rvm on irc.freenode.net:

      http://webchat.freenode.net/?channels=rvm
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress configuration]]></title>
    <link href="http://blog.w3cub.com/blog/2015/06/20/octopress-config/"/>
    <updated>2015-06-20T23:16:31+08:00</updated>
    <id>http://blog.w3cub.com/blog/2015/06/20/octopress-config</id>
    <content type="html"><![CDATA[<h1>前言</h1>

<p>假如想省钱，只是写写博客而已。免去服务器麻烦。推荐你用octopress，可以肯定的，没有wordpress 那么多功能。octopress 是基于 jekyll 的 静态化博客，可以在github pages 和 gitcafe 等上运行。下面我们来部署一下 我们的<code>A blogging framework for hackers.</code> 博客。</p>

<!--more-->


<hr />

<p>先看一下技术栈：</p>

<p>octopress -> jekyll -> ruby</p>

<p>Markdown (or Textile), Liquid, HTML &amp; CSS go in. Static sites come out ready for deployment.</p>

<p>Liquid 一个 ruby模板引擎，Markdown是……。</p>

<p>所以 安装octopress之前必不可少的是安装Ta的生态环境。</p>

<h1>安装Octopress</h1>

<h3>安装rvm</h3>

<p>打开<a href="https://rvm.io/">rvm</a>首页，打开终端，使用以下命令安装吧。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3
</span><span class='line'>
</span><span class='line'>$ \curl -sSL https://get.rvm.io | bash -s stable
</span></code></pre></td></tr></table></div></figure>


<p><a href="https://en.wikipedia.org/wiki/Ruby_Version_Manager">rvm wiki</a></p>

<h3>安装Ruby</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rvm -h
</span><span class='line'>$ rvm list
</span><span class='line'>$ rvm install 2.2.1
</span><span class='line'>$ rvm use 2.2.1</span></code></pre></td></tr></table></div></figure>


<p>某些时候会提示，请使用 &ndash;bash-login. 使用就OK了。</p>

<p>安装完成后可以用ruby &ndash;version进行验证</p>

<h3>安装Octopress</h3>

<p>安装Ruby完成后就按照官方指南安装Octpress</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#clone octopress
</span><span class='line'>$ git clone git://github.com/imathis/octopress.git octopress
</span><span class='line'>$ cd octopress
</span><span class='line'>
</span><span class='line'>#安装依赖
</span><span class='line'>$ gem install bundler
</span><span class='line'>$ bundle install
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>#安装octopress默认主题
</span><span class='line'>$ rake install</span></code></pre></td></tr></table></div></figure>


<hr />

<p>bundle 命令 是 Gemfile 文件用的，和 nodejs 项目的 package.json 类似，都是一键安装依赖包文件。</p>

<h1>部署</h1>

<p>接下来需要把Blog部署到github上去，第一步要做的是去<a href="https://github.com/new">github</a>创建一个<code>username.github.io</code>的repo，比如我的就叫<code>msching.github.io</code>。</p>

<p>然后运行以下命令，并依照提示完成github和Octopress的关联</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<hr />

<h1>创建博客</h1>

<h3>生成博客</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<p>rake 命令 是 Rakefile 文件用的，你在带有Rakefile 目录下执行 rake 命令，
当然你可以 <code>rake -T</code> 查看当前所有的rake Task， 或者 rake -h 获取帮助</p>

<p>把生成后的代码上传到github</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git add .
</span><span class='line'>$ git commit -m 'create blog'
</span><span class='line'>$ git push origin source</span></code></pre></td></tr></table></div></figure>


<p>完成后等待一段时间后就能访问<code>http://username.github.io</code>看到自己的博客了</p>

<h3>修改配置</h3>

<p>配置文件路径为<code>~/octopress/_config.yml</code></p>

<p>参考： <a href="https://github.com/octopress/octopress">官方</a></p>

<p>编辑完成后</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rake generate
</span><span class='line'>
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "settings" 
</span><span class='line'>$ git push origin source
</span><span class='line'>
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<h3>安装第三方主题</h3>

<p>Octopress有许多第三方主题可以选择，首先在<a href="http://opthemes.com/">这里</a>上寻找喜欢的主题，点击进入对应主题的git，一般在readme上都会有安装流程</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#这里以安装allenhsu定制的greyshade主题为例，原作者是shashankmehta
</span><span class='line'>$ git clone git@github.com:allenhsu/greyshade.git .themes/greyshade
</span><span class='line'>
</span><span class='line'>#Substitue 'color' with your highlight color
</span><span class='line'>$ echo "\$greyshade: color;" &gt;&gt; sass/custom/_colors.scss 
</span><span class='line'>
</span><span class='line'>$ rake "install[greyshade]"
</span><span class='line'>$ rake generate
</span><span class='line'>
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "theme" 
</span><span class='line'>$ git push origin source
</span><span class='line'>
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<h3>支持中文标签</h3>

<p>目前版本的Octopress会在<code>/source/blog/categories</code>下创建一个<code>index.markdown</code>来作为分类的首页，但这个首页在标签有中文时会出现无法跳转的情况，原因是因为在出现中文标签时Octopress会把文件的路径中的中文转换成拼音，而在Category跳转时是直接写了中文路径，结果自然是404。解决方法是自己实现一个分类首页并处理中文。</p>

<p>首先按照<a href="https://kaworu.ch/blog/2013/09/23/categories-page-with-octopress/">这里</a>的方法实现<code>index.html</code></p>

<p>将<code>plugins/category_list_tag.rb</code>中的</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase)</span></code></pre></td></tr></table></div></figure>


<p>替换成</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>category_url = File.join(category_dir, category.to_url.downcase)</span></code></pre></td></tr></table></div></figure>


<p>这样你的博客就可以支持中文标签的跳转了。</p>

<hr />

<h1>写博客</h1>

<p>经过上面几部后，博客已经成功搭建，现在就可以开始写博文了。</p>

<h3>创建博文</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#如果用的是终端
</span><span class='line'>$ rake new_post['title']
</span><span class='line'>
</span><span class='line'>#如果用的是ZSH
</span><span class='line'>$ rake "new_post[title]"
</span><span class='line'>#或者
</span><span class='line'>$ rake new_post\['title'\]</span></code></pre></td></tr></table></div></figure>


<p>生成的文件在<code>~/source/_posts</code>目录下</p>

<h3>编辑博文</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#...markdown写博文
</span><span class='line'>
</span><span class='line'>$ rake preview #localhost:4000
</span><span class='line'>
</span><span class='line'>$ rake generate
</span><span class='line'>
</span><span class='line'>$ git add .
</span><span class='line'>$ git commit -m "comment" 
</span><span class='line'>$ git push origin source
</span><span class='line'>
</span><span class='line'>$ rake deploy</span></code></pre></td></tr></table></div></figure>


<hr />

<h1>参考资料</h1>

<ul>
<li><a href="http://octopress.org/">http://octopress.org/</a></li>
<li><a href="https://msching.github.io/blog/2014/04/11/starting/">https://msching.github.io/blog/2014/04/11/starting/</a></li>
<li><a href="https://help.github.com/articles/using-jekyll-plugins-with-github-pages/">https://help.github.com/articles/using-jekyll-plugins-with-github-pages/</a></li>
<li><a href="https://github.com/xiaocong/xiaocong.github.io">https://github.com/xiaocong/xiaocong.github.io</a></li>
<li><a href="https://github.com/shashankmehta/greyshade">https://github.com/shashankmehta/greyshade</a></li>
<li><a href="https://github.com/imathis/octopress">https://github.com/imathis/octopress</a></li>
<li><p><a href="https://github.com/msching/msching.github.io">https://github.com/msching/msching.github.io</a></p></li>
<li><p><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/</a></p></li>
<li><a href="https://msching.github.io/blog/2014/04/11/starting/">https://msching.github.io/blog/2014/04/11/starting/</a></li>
<li><a href="http://robdodson.me/some-octopress-rake-tips/">http://robdodson.me/some-octopress-rake-tips/</a></li>
<li><p><a href="http://jekyllcn.com/docs/templates/">http://jekyllcn.com/docs/templates/</a></p></li>
<li><p><a href="http://rails-practice.com/content/">http://rails-practice.com/content/</a></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rake task for octopress]]></title>
    <link href="http://blog.w3cub.com/blog/2015/06/19/rake-task-for-octopress/"/>
    <updated>2015-06-19T23:35:19+08:00</updated>
    <id>http://blog.w3cub.com/blog/2015/06/19/rake-task-for-octopress</id>
    <content type="html"><![CDATA[<p>翻译样式测试中，情形看不到举行程序看过出售始终出处予以英，上下手机同样委员会分享法，饭店文章是一种民间事实欢迎您检。</p>

<p>他的网游物理就有改革第二提示就有信，一脸举报精美兴趣具有我很自己的产，格式美丽实力学习营养日子老人选项，本报近年来故障体系成长宽带渐渐推广下面居然时尚中文画面，详细内容武器大多数理解广大授权方式酒店写，没有进口文明后果申请浙江些什么插，最低大家今后自从各自自己俱乐部，收藏本页乐队注重自身发。
纪念供应商下列合同食物伟大回答不必机场方案本书指定物品，想到商家门派岗位增加确保投资者数码可见，主营设立造型元素简体中文原则对于日前涉及稿件是因为可以说。</p>

<!--more-->


<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Alias ut quo laboriosam dignissimos neque cupiditate nulla, minus accusantium voluptatum quae! Iste, quo asperiores ex tenetur nemo optio quisquam aliquam nisi.</p>

<p>无聊世界杯本论坛确实下载次数论文激动楼上，协调成了加拿大大陆休闲，一声预期条款说着是什么感觉到下，各个数字效率共和国尚未最大奖励一张深入福建欢迎您日韩管理系，特价点此供求一股保险尝试即使我市销售故障逐步，新手平静作出流行简直高速十大其实政策新技术分别鉴定心灵男子话，一家一丝大师总经理会，领先难道思路手里瞬间新型好了处于天堂机构状态大门杭州强大难，到来经历医学某种暂时。</p>

<p>$ rake -T</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake clean # 清理缓存: .pygments-cache, .gist-cache, .sass-cache
</span><span class='line'>rake copydot[source,dest] # copy dot files for deployment
</span><span class='line'>rake deploy # Default deploy task
</span><span class='line'>rake gen_deploy # 生成并部署网站
</span><span class='line'>rake generate # 生成 jekyll 网站
</span><span class='line'>rake install[theme] # 初始化octopress，复制默认主题到Jekyll's generator路径下
</span><span class='line'>rake integrate # 把所有隐藏的posts移回到posts目录，以准备生成网站
</span><span class='line'>rake isolate[filename] # Move all other posts than the one currently being worked on to a temporary stash location (stash) so regenerating the site happens much more quickly
</span><span class='line'>rake list # list tasks
</span><span class='line'>rake new_page[filename] # Create a new page in source/(filename)/index.markdown
</span><span class='line'>rake new_post[title] # Begin a new post in source/_posts
</span><span class='line'>rake preview # preview the site in a web browser
</span><span class='line'>rake push # ※ deploy public directory to github pages
</span><span class='line'>rake rsync # Deploy website via rsync
</span><span class='line'>rake set_root_dir[dir] # Update configurations to support publishing to root or sub directory
</span><span class='line'>rake setup_github_pages[repo] # Set up _deploy folder and deploy branch for Github Pages deployment
</span><span class='line'>rake update_source[theme] # Move source to source.old, install source theme updates, replace source/_includes/navigation.html with source.old's navigation
</span><span class='line'>rake update_style[theme] # Move sass to sass.old, install sass theme updates, replace sass/custom with sass.old/custom
</span><span class='line'>rake watch # Watch the site and regenerate when it changes</span></code></pre></td></tr></table></div></figure>


<p></p>

<!--more-->


<p>test include_code plugin:</p>

<figure class='code'><figcaption><span>Example 2 (github.js)</span> <a href='http://blog.w3cub.com/downloads/code/github.js'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span class="kd">var</span> <span class="nx">github</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">escapeHtml</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div/&gt;&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">str</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">render</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">repos</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">fragment</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">target</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">repos</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fragment</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;&#39;</span><span class="o">+</span><span class="nx">repos</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">html_url</span><span class="o">+</span><span class="s1">&#39;&quot;&gt;&#39;</span><span class="o">+</span><span class="nx">repos</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">name</span><span class="o">+</span><span class="s1">&#39;&lt;/a&gt;&lt;p&gt;&#39;</span><span class="o">+</span><span class="nx">escapeHtml</span><span class="p">(</span><span class="nx">repos</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">description</span><span class="o">||</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&lt;/p&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">fragment</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">showRepos</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;https://api.github.com/users/&quot;</span><span class="o">+</span><span class="nx">options</span><span class="p">.</span><span class="nx">user</span><span class="o">+</span><span class="s2">&quot;/repos?sort=pushed&amp;callback=?&quot;</span>
</span><span class='line'>        <span class="p">,</span> <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;jsonp&#39;</span>
</span><span class='line'>        <span class="p">,</span> <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="nx">$</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">target</span> <span class="o">+</span> <span class="s1">&#39; li.loading&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;Error loading feed&quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">,</span> <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">repos</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">data</span> <span class="o">||</span> <span class="o">!</span><span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">skip_forks</span> <span class="o">&amp;&amp;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">fork</span><span class="p">)</span> <span class="p">{</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="nx">repos</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">count</span><span class="p">)</span> <span class="p">{</span> <span class="nx">repos</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">count</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>          <span class="nx">render</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span> <span class="nx">repos</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript类库中和编程语言中getter和setter]]></title>
    <link href="http://blog.w3cub.com/blog/2013/08/17/javascript-lib-and-other-programming-language-s-getter-and-setter/"/>
    <updated>2013-08-17T23:16:31+08:00</updated>
    <id>http://blog.w3cub.com/blog/2013/08/17/javascript-lib-and-other-programming-language-s-getter-and-setter</id>
    <content type="html"><![CDATA[<p>1.backbonejs中的getter和setter</p>

<p>所说的backbonejs中的getter和setter就是内部自定义get和set方法，set方法嵌入了<code>Pub/Sub模型</code>,
例如 <code>book.on("change:title change:author", ...);</code>当<code>book.set('title':'othertitle');</code>触发<code>change</code>对用的<code>function</code>,
解开二重锁 （不等于自身和并且非正在执行change function)。</p>

<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set: function(key, val, options) {
</span><span class='line'>  var attr, attrs, unset, changes, silent, changing, prev, current;
</span><span class='line'>  if (key == null) return this;
</span><span class='line'>
</span><span class='line'>  // Handle both `"key", value` and `{key: value}` -style arguments.
</span><span class='line'>  if (typeof key === 'object') {
</span><span class='line'>    attrs = key;
</span><span class='line'>    options = val;
</span><span class='line'>  } else {
</span><span class='line'>    (attrs = {})[key] = val;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  options || (options = {});
</span><span class='line'>
</span><span class='line'>  // Run validation.
</span><span class='line'>  if (!this._validate(attrs, options)) return false;
</span><span class='line'>
</span><span class='line'>  // Extract attributes and options.
</span><span class='line'>  unset           = options.unset;
</span><span class='line'>  silent          = options.silent;
</span><span class='line'>  changes         = [];
</span><span class='line'>  changing        = this._changing;
</span><span class='line'>  this._changing  = true;
</span><span class='line'>
</span><span class='line'>  if (!changing) {
</span><span class='line'>    this._previousAttributes = _.clone(this.attributes);
</span><span class='line'>    this.changed = {};
</span><span class='line'>  }
</span><span class='line'>  current = this.attributes, prev = this._previousAttributes;
</span><span class='line'>
</span><span class='line'>  // Check for changes of `id`.
</span><span class='line'>  if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];
</span><span class='line'>
</span><span class='line'>  // For each `set` attribute, update or delete the current value.
</span><span class='line'>  for (attr in attrs) {
</span><span class='line'>    val = attrs[attr];
</span><span class='line'>    if (!_.isEqual(current[attr], val)) changes.push(attr);
</span><span class='line'>    if (!_.isEqual(prev[attr], val)) {
</span><span class='line'>      this.changed[attr] = val;
</span><span class='line'>    } else {
</span><span class='line'>      delete this.changed[attr];
</span><span class='line'>    }
</span><span class='line'>    unset ? delete current[attr] : current[attr] = val;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  // Trigger all relevant attribute changes.
</span><span class='line'>  if (!silent) {
</span><span class='line'>    if (changes.length) this._pending = true;
</span><span class='line'>    for (var i = 0, l = changes.length; i &lt; l; i++) {
</span><span class='line'>      this.trigger('change:' + changes[i], this, current[changes[i]], options);
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  // You might be wondering why there's a `while` loop here. Changes can
</span><span class='line'>  // be recursively nested within `"change"` events.
</span><span class='line'>  if (changing) return this;
</span><span class='line'>  if (!silent) {
</span><span class='line'>    while (this._pending) {
</span><span class='line'>      this._pending = false;
</span><span class='line'>      this.trigger('change', this, options);
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  this._pending = false;
</span><span class='line'>  this._changing = false;
</span><span class='line'>  return this;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>2.YUI中的getter和setter</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>get : function(name) {
</span><span class='line'>    return this._getAttr(name);
</span><span class='line'>},
</span><span class='line'>
</span><span class='line'>set : function(name, val, opts) {
</span><span class='line'>    return this._setAttr(name, val, opts);
</span><span class='line'>},
</span><span class='line'>//……</span></code></pre></td></tr></table></div></figure>


<p>get: <code>http://yuilibrary.com/yui/docs/api/files/attribute_js_AttributeCore.js.html#l343</code></p>

<p>Y.augment : <code>http://yuilibrary.com/yui/docs/api/files/oop_js_oop.js.html#l67</code></p>

<p>3.javascript中的getter和setter</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 对象构造实现，javascript类库中最常用的方法
</span><span class='line'>
</span><span class='line'>function Field(val){
</span><span class='line'>    var value = val;
</span><span class='line'>       
</span><span class='line'>    this.getValue = function(){
</span><span class='line'>      return value;
</span><span class='line'>    };
</span><span class='line'>       
</span><span class='line'>    this.setValue = function(val){
</span><span class='line'>      value = val;
</span><span class='line'>    };
</span><span class='line'>} 
</span><span class='line'>
</span><span class='line'>// 模拟“hidden value property” 
</span><span class='line'>
</span><span class='line'>function Field(val){
</span><span class='line'>  var value = val;
</span><span class='line'>   
</span><span class='line'>    this.__defineGetter__("value", function(){
</span><span class='line'>      return value;
</span><span class='line'>    });
</span><span class='line'>       
</span><span class='line'>    this.__defineSetter__("value", function(val){
</span><span class='line'>      value = val;
</span><span class='line'>    });
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// es6 是实现
</span><span class='line'>function Field(val){
</span><span class='line'>  this.value = val;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>Field.prototype = {
</span><span class='line'>    get value(){
</span><span class='line'>      return this._value;
</span><span class='line'>    },
</span><span class='line'>    set value(val){
</span><span class='line'>      this._value = val;
</span><span class='line'>    }
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>


<p>4.java中的getter和setter</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class TestGetterSetter { //TestGetterSetter.class
</span><span class='line'>  
</span><span class='line'>  private String name ;
</span><span class='line'>
</span><span class='line'>  public void setName(String name){
</span><span class='line'>      if(this.name != name){
</span><span class='line'>          System.out.println("name is changeing!");
</span><span class='line'>          this.name = name ;
</span><span class='line'>          // trigger change  event
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>public String getName(String name){
</span><span class='line'>    if (this.name == null ){
</span><span class='line'>    setName("Guest");
</span><span class='line'>    }
</span><span class='line'>    return this.name ;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>  public String getName() {
</span><span class='line'>      return name;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>public class TestMain { //TestMain.class
</span><span class='line'>  TestGetterSetter tb ;
</span><span class='line'>
</span><span class='line'>  public static void main(String[] args) {
</span><span class='line'>      
</span><span class='line'>      new TestMain().todo();
</span><span class='line'>      // TODO Auto-generated method stub
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>  public TestMain(){ // init
</span><span class='line'>      
</span><span class='line'>       super();
</span><span class='line'>       System.out.println("init TestMain !!");
</span><span class='line'>  }
</span><span class='line'>  public void todo(){
</span><span class='line'>       tb  =  new TestGetterSetter();
</span><span class='line'>       tb.setName("caicai");
</span><span class='line'>       System.out.println(tb.getName());
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>总结：</p>

<p>用function封装存储规则，在set，get中嵌入pub/sub模式实现 事件触发。</p>

<p>参考文献：</p>

<p>1.<a href="http://ejohn.org/blog/javascript-getters-and-setters/">http://ejohn.org/blog/javascript-getters-and-setters/</a></p>

<p>2.javascript权威指南 6.6 属性getter和setter</p>

<p>-EOF-</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[city hall]]></title>
    <link href="http://blog.w3cub.com/blog/2012/11/10/music-city-hall/"/>
    <updated>2012-11-10T23:35:19+08:00</updated>
    <id>http://blog.w3cub.com/blog/2012/11/10/music-city-hall</id>
    <content type="html"><![CDATA[<div><embed src="http://www.xiami.com/widget/0_141216/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"></embed></div>


<p>Lyrics:</p>

<p>Title: Blue Caravan<br/>
Artist: Vienna Teng<br/>
Album: Dreaming Through the Noise<br/>
Year: 2006</p>

<p>me and my baby on a february holiday<br/>
&lsquo;cause we got the news<br/>
yeah, we got the news<br/>
500 miles and we&rsquo;re gonna make it all the way<br/>
we&rsquo;ve got nothing to lose<br/>
we&rsquo;ve got nothing to lose</p>

<!--more-->


<p>it&rsquo;s been 10 years waiting<br/>
but it&rsquo;s better late than the never<br/>
we&rsquo;ve been told before<br/>
we can&rsquo;t wait one minute more</p>

<p>oh, me and my baby driving down<br/>
to a hilly seaside town in the rainfall<br/>
oh, me and my baby stand in line<br/>
you&rsquo;ve never seen a sight so fine<br/>
as the love that&rsquo;s gonna shine<br/>
at city hall</p>

<p>me and my baby&rsquo;ve been through<br/>
a lot of good and bad<br/>
learned to kiss the sky<br/>
made our momma&rsquo;s cry<br/>
I&rsquo;ve seen a lot of friends<br/>
after giving it all they had<br/>
lay down and die<br/>
lay down and die</p>

<p>10 years into it<br/>
here&rsquo;s our window<br/>
at the vegas drive-thru chapel<br/>
it ain&rsquo;t too much<br/>
for &lsquo;em all to handle</p>

<p>oh, me and my baby driving down<br/>
to a hilly seaside town in the rainfall<br/>
oh, me and my baby stand in line<br/>
you&rsquo;ve never seen a sight so fine<br/>
as the love that&rsquo;s gonna shine<br/>
at city hall</p>

<p>outside, they&rsquo;re handing out<br/>
donuts and pizza pies<br/>
for the folks in pairs in the folding chairs<br/>
my baby&rsquo;s lookin' so damned pretty<br/>
with those anxious eyes<br/>
rain-speckled hair<br/>
and my ring to wear</p>

<p>10 years waiting for this moment of fate<br/>
when we say the words and sign our names<br/>
if they take it away again someday<br/>
this beautiful thing won&rsquo;t change</p>

<p>oh, me and my baby driving down<br/>
to a hilly seaside town in the rainfall<br/>
oh, me and my baby stand in line<br/>
you&rsquo;ve never seen a sight so fine<br/>
as the love that&rsquo;s gonna shine</p>

<p>oh, me and my baby driving down<br/>
to a hilly seaside town in the rainfall<br/>
oh, me and my baby stand in line<br/>
you&rsquo;ve never seen a sight so fine<br/>
as the love that&rsquo;s gonna shine<br/>
at city hall</p>

<p>-EOF-</p>
]]></content>
  </entry>
  
</feed>
