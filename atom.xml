<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[泛前端开发]]></title>
  <link href="http://blog.w3cub.com/atom.xml" rel="self"/>
  <link href="http://blog.w3cub.com/"/>
  <updated>2017-11-05T14:57:33+08:00</updated>
  <id>http://blog.w3cub.com/</id>
  <author>
    <name><![CDATA[Terry Cai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[《html5数据推送应用开发》读书摘要]]></title>
    <link href="http://blog.w3cub.com/blog/2017/08/06/sse-data-push-note/"/>
    <updated>2017-08-06T17:18:14+08:00</updated>
    <id>http://blog.w3cub.com/blog/2017/08/06/sse-data-push-note</id>
    <content type="html"><![CDATA[<p>书很薄，在图书馆瞄了一下，知识点不多。
基本上第二章基本讲完，其他讲解都是一些擦边的，兼容性，安全性，……
可以总结为如下：</p>

<!-- more -->


<p>《Data Push Apps with HTML5 SSE》 读书摘要</p>

<a name="L......"></a>
<h2>摘要</h2>

<ul>
<li>EventSource方法 new EventSource(&ldquo;url&rdquo;);</li>
<li>MIME类型text/event-stream</li>
<li>数据传输格式"data:&ldquo; + new Date().toISOString() + &rdquo;\n\n";</li>
</ul>


<a name="SSE......"></a>
<h2>SSE示例</h2>

<pre><code>    &lt;!doctype html&gt;
    &lt;html&gt;
    &lt;head&gt;
    &lt;meta charset="UTF-8"&gt;
    &lt;title&gt;Basic SSE Example&lt;/title&gt;
    &lt;script src="//code.jquery.com/jquery-1.11.0.min.js"&gt;&lt;/script&gt;
    &lt;/head&gt;
    &lt;body&gt;
    &lt;pre id="x"&gt;Initializing...&lt;/pre&gt;
    &lt;script&gt;
        var es = new EventSource("basic_sse.php");
        es.addEventListener("message", function(e){
            $("#x").append("\n" + e.data);
        },false);
    &lt;/script&gt;
    &lt;/body&gt;
    &lt;/html&gt;
</code></pre>

<pre><code class="javascript">var http = require("http"),
    fs = require("fs");
var port = parseInt(process.argv[2] || 1234);
http.createServer(function(request, response) {
    console.log("Client connected:" + request.url);
    if (request.url != "/sse") {
        fs.readFile("basic_sse.html", function(err, file) {
            response.writeHead(200, { 'Content-Type': 'text/html' });
            var s = file.toString(); //file is a buffer
            s = s.replace("basic_sse.php", "sse");
            response.end(s);
        });
        return;
    }
    //Below is to handle SSE request. It never returns.
    response.writeHead(200, { "Content-Type": "text/event-stream" });
    var timer = setInterval(function() {
        var content = "data:" + new Date().toISOString() + "\n\n";
        var b = response.write(content);
        if (!b) console.log("Data got queued in memory (content=" + content + ")");
        else console.log("Flushed! (content=" + content + ")");
    }, 1000);
    request.connection.on("close", function() {
        response.end();
        clearInterval(timer);
        console.log("Client closed connection. Aborting.");
    });
}).listen(port);
console.log("Server running at http://localhost:" + port);
</code></pre>

<a name="L........."></a>
<h2>兼容性</h2>

<p>startEventSource()</p>

<ul>
<li>Basically all Firefox and Chromea</li>
<li>Desktop Safari 5.0+</li>
<li>iOS Safari 4.0+</li>
<li>Android 4.4+ (earlier where Chrome is default browser)</li>
<li>Chrome for Android (all versions)</li>
<li>Firefox for Android (all versions)</li>
<li>Opera since 11.0</li>
<li>Opera Mobile since 11.1</li>
<li>BlackBerry since 7.0</li>
</ul>


<p>startXHR()</p>

<ul>
<li>IE10+</li>
<li>Firefox 3.6 (and earlier)</li>
<li>Safari 3.x</li>
<li>Android 4.1 to 4.3 (unless Chrome is default browser)</li>
<li>Android 3.x</li>
</ul>


<p>startIframe()</p>

<ul>
<li>IE8</li>
<li>IE9</li>
</ul>


<p><del>startLongpoll()
- IE6 <br/>
- IE7
- Android 2.x
- Anything else not in the preceding list that has Ajax support
</del></p>

<p><del>(none)
- Any browser with JavaScript disabled
</del></p>

<p><del>a Technically since Firefox 6 and Chrome 6, but they have been auto-updating since Firefox 4, and Chrome since it came out
of beta, so you can reasonably expect no one is still using versions that do not support SSE.
</del></p>

<p>书本代码，书本代码，书本代码。</p>

<a name="L............"></a>
<h2>参考资料</h2>

<ul>
<li><a href="https://github.com/DarrenCook/ssebook">书本代码</a></li>
<li><a href="https://caniuse.com/#feat=eventsource">eventsource浏览器支持</a></li>
<li><a href="https://www.w3.org/TR/eventsource/">https://www.w3.org/TR/eventsource/</a></li>
<li><a href="https://html.spec.whatwg.org/multipage/server-sent-events.html">HTML Living Standard: Server-sent events</a></li>
<li><a href="https://github.com/Yaffle/EventSource">a polyfill for http://www.w3.org/TR/eventsource/</a></li>
</ul>


<a name="L............"></a>
<h2>其他参考</h2>

<ul>
<li><a href="https://www.ibm.com/developerworks/library/wa-http-server-push-with-websocket-sse/">HTTP server push with WebSocket and SSE</a></li>
<li><a href="https://www.zhihu.com/question/27498235">Ajax长轮询与服务器推的长连接的区别是？</a></li>
<li><a href="http://goeasy.io/cn/demos">商业化示例</a></li>
</ul>


<p>-EOF-</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日一点点之scrapy]]></title>
    <link href="http://blog.w3cub.com/blog/2017/06/20/today-you-should-know-scrapy/"/>
    <updated>2017-06-20T23:19:58+08:00</updated>
    <id>http://blog.w3cub.com/blog/2017/06/20/today-you-should-know-scrapy</id>
    <content type="html"><![CDATA[<p>Scrapy 是什么？</p>

<p>Scrapy是一个基于Python的高级爬虫框架，只需要简单的配置就可以实现你大大的需求。</p>

<p>为什么要介绍Scrapy，内容时代了，没有内容再好看的网站，那又有什么用呢？</p>

<!-- more -->


<p>对不对？对对对。</p>

<p>学习scrapy有什么需求吗？</p>

<p>python是基于python语言的，那么自然你要懂一些python的基础啦！</p>

<p>还有简单的xpath语法或类似于jQuery选择器语法，一边用一边学也可以的。</p>

<p>建议在Linux或者Mac下进行学习，Windows下可能会遇到各种入门级的问题。例如安装过程中报错，缺少这个，那个的问题。</p>

<p>只需要准备一样东西，就是官方文档 <a href="https://docs.scrapy.org/en/latest/">https://docs.scrapy.org/en/latest/</a></p>

<p>可以一边看，一边实践。</p>

<a name="L......"></a>
<h3>安装</h3>

<pre><code class="bash">pip install Scrapy
</code></pre>

<p>官方推荐你安装python虚拟环境进行 Scrapy，不装也没有问题！ 虚拟环境会虚拟IP么？ 不会，不是这一回事</p>

<pre><code class="bash">pip install virtualenv
</code></pre>

<p>接着来来读一下官方教程：</p>

<p><a href="https://docs.scrapy.org/en/latest/intro/tutorial.html">https://docs.scrapy.org/en/latest/intro/tutorial.html</a></p>

<pre><code class="bash">scrapy startproject 项目名字
</code></pre>

<p>A: 假如你想知道parse接着会干什么，parse里面能干什么，我觉得你去了解一下Scrapy的钩子函数，以及整体架构。</p>

<p>B: 假如你对yield语法不是很了解的，可以去理解一下yield语法（python基础）。</p>

<p>入门是很快的。</p>

<p>假如你感兴趣，接着你可能会提出一些问题：</p>

<p>比如，怎么在一个页面抓取多条？怎么去重？等等</p>

<p>为什么会介绍Scrapy？</p>

<p>其实Scrapy不单只是一个爬虫框架，而且是一个很好的Python入门学习项目，假设你怎么会Python。</p>

<p>-EOF-</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你好2017]]></title>
    <link href="http://blog.w3cub.com/blog/2017/01/02/hello-2017/"/>
    <updated>2017-01-02T16:27:08+08:00</updated>
    <id>http://blog.w3cub.com/blog/2017/01/02/hello-2017</id>
    <content type="html"><![CDATA[<p>2017年，起床的第一天，朋友圈里面的都是困难群众。谢谢主席关心的调侃。</p>

<p>2016的计划完成了多少，小目标还是有的，天马行空的就别谈了。该写的写了，头脑发热能折腾到2,3点。</p>

<!-- more -->


<p>2016看了很多电视，看了很多时政新闻，把台湾大选全程直播都看了，你懂的。</p>

<p>2016年底离开了工作三年的<a href="https://www.thecn.com/aboutus">TheCN</a>（CourseNetworking），结束了"Changing the Way the World Learns"，也是我工作五年里面最长的一份工作。没事周五就溜回家，可能这也是在TheCN工作的特殊记忆。 <br/>
2016年没有过多的留念与怀念，参加了几场婚礼，大部分都是中学同学。
翻开微博，看一看2016的自己都干了什么，都是都是时事之类的观点，微博并没有过多的私隐东西，再翻开QQ空间也没有记录太多特别的，平淡的2016，还是发生了什么特别的事情，我没有记录。回去参加同学同学的婚礼，同学说，怎么你还是跟以前一模一样，好像一点都没有变化。好像也是，除了瘦了几斤，好像真的没有多大变化。
再翻看Github看看，2013就想写的chrome插件，终于在2016写了，还有一堆基于公司需求的开源扩展。</p>

<p>回想起，这些年从事前端工作，头一两年，那些人还在炫耀IE6,IE7 bug，本质上是清零了。剩下的经验都是自己平时阅读开源代码积累的。kissy, ueditor, jQuery, Backbone, underscore, requriejs…… 感谢这些优秀的开源代码。</p>

<p>当别人问Angular，react，vue，gulp， webpack…… 你懂么的时候，还好我还没有掉队。 会点吧。</p>

<p>2016后端语言写的怎么样了，有用的都学了，都是一边做一边学。ruby，python, php …… 用记得，不用就忘记 ……</p>

<p>或许这是今年的目标，“今年要不要去拿个软件专利著作权，2017”，说白就是给自己一个学习的催化剂。
不知道能不能完成，但是当开始了，就意味着收获。与其说是2017年的目标，不如说是没有完成计划。</p>

<p>2016好像写博客的次数越来越少了，Greader阅读习惯也少了, 反而印象笔记的收藏多了。</p>

<p>2016过了， 一直想去旅游，可惜缺少游伴。辞职的时候，同事说，去个旅游先吧。我也想，去哪里好呢，想不到，没有游伴。</p>

<p>2016,2017能为你做的什么呢！急不了…… 每次都想勤点写blog，可惜总不能坚持，一是想不到想写的内容，二或许不能出口成文，文笔空洞，放弃了。</p>

<p>回到家里看见那本《网页设计三剑客8》，还有那一箱高高的电脑爱好者，还有那些年天天折腾Ghost的日子，这些年走来，真的不容易。以前同事说，这就叫做青春。</p>

<p>可能吧，可能这些叫青春。</p>

<p>2017给自己的生活作息定个目标吧，同学说都我瘦了，可能作息不规律吧。这几年看见了离别的离别，住院的住院。</p>

<p>给自己生活一个小目标吧：定期饮食，增肥，定期运动，定时睡眠。</p>

<p>不知不觉，真正工作已经步入了第六个年头了。</p>

<p>2017继续拥抱变化，拥抱生活吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多彩知乎发布啦]]></title>
    <link href="http://blog.w3cub.com/blog/2016/07/25/cozhihu-release/"/>
    <updated>2016-07-25T22:10:46+08:00</updated>
    <id>http://blog.w3cub.com/blog/2016/07/25/cozhihu-release</id>
    <content type="html"><![CDATA[<p>cozhihu(多彩知乎)发布啦！</p>

<blockquote><p>cozhihu是一款知乎皮肤chrome扩展应用。</p></blockquote>

<p>多彩知乎十分适合geek知乎用户。随时随地刷知乎，保护眼睛两不误。</p>

<!-- more -->


<a name="L......"></a>
<h4>安装</h4>

<p><a href="https://chrome.google.com/webstore/detail/oaoadbdcnpjngbdopghepdhlmlbdkgpb"><img width="300px" class="only" src="http://ww3.sinaimg.cn/large/5fd37818jw1eq7bx4bc4ej20c0038mx9.jpg"></a></p>

<p>或者到官网 <a href="http://cozhihu.w3cub.com/">http://cozhihu.w3cub.com/</a>进行安装。</p>

<a name="L......"></a>
<h3>特色</h3>

<ul>
<li>支持动态预览颜色</li>
<li>超过25种颜色主题可供选择，包含夜间模式</li>
<li>多用途的魔术图标</li>
<li>文字阴影（可选）</li>
</ul>


<a name="L......"></a>
<h3>预览</h3>

<p><img aria-hidden="true"  src="https://lh3.googleusercontent.com/Q9-jyFEiolQrCY9WHREouUwbN4i5gcDGy-xw3xFbFii5Ea8S1ezuRM2IQwuLhCOYNZgntdqFcfI=s640-h400-e365-rw" width="640px" height="400px" ></p>

<a name="L............"></a>
<h3>开源协议</h3>

<p>Copyright &copy; 2016 Terry Cai. Licensed under the MIT license.
开源地址：<a href="https://github.com/icai/cozhihu">https://github.com/icai/cozhihu</a></p>

<p>刷知乎，防沉迷哦！</p>

<hr />

<blockquote><p>cozhihu is a chrome extension for zhihu skins.</p></blockquote>

<a name="Install"></a>
<h4>Install</h4>

<p><a href="https://chrome.google.com/webstore/detail/oaoadbdcnpjngbdopghepdhlmlbdkgpb"><img width="300px" class="only" src="http://ww3.sinaimg.cn/large/5fd37818jw1eq7bx4bc4ej20c0038mx9.jpg"></a></p>

<a name="Features"></a>
<h3>Features</h3>

<ul>
<li>Dynamic preview the color style.</li>
<li>A series of skin for you to choose including night mode.</li>
<li>Magic browser action icon, website link for geek user.</li>
<li>Text shadow for the site (optional)</li>
</ul>


<a name="Preview"></a>
<h3>Preview</h3>

<p><img aria-hidden="true" src="https://lh3.googleusercontent.com/Q9-jyFEiolQrCY9WHREouUwbN4i5gcDGy-xw3xFbFii5Ea8S1ezuRM2IQwuLhCOYNZgntdqFcfI=s640-h400-e365-rw" width="640px" height="400px" ></p>

<p>If you like this, Give me star please:</p>

<iframe class="github-btn" src="https://ghbtns.com/github-btn.html?user=icai&amp;repo=cozhihu&amp;type=star&amp;count=true" allowtransparency="true" frameborder="0" scrolling="0" width="100" height="20"></iframe>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[start your shell tour from a question]]></title>
    <link href="http://blog.w3cub.com/blog/2016/05/28/start-your-shell-tour-from-a-question/"/>
    <updated>2016-05-28T16:09:21+08:00</updated>
    <id>http://blog.w3cub.com/blog/2016/05/28/start-your-shell-tour-from-a-question</id>
    <content type="html"><![CDATA[<p>Learn bash shell, by interest or needed. what is your reason to learn the shell? I think the best reason is that what you need is what you learn.</p>

<p>A few days ago, I rewrite the project css to sass, so  I need to rename the css. So I brought out a question, how to &ldquo;Rename multiple files shell&rdquo;? To people, solving problems with search engine is the method of least time. I am no exception, I encountered the same problem, and find out the answer in stackoverflow <a href="https://stackoverflow.com/questions/6911301/rename-multiple-files-shell">https://stackoverflow.com/questions/6911301/rename-multiple-files-shell</a>.</p>

<!--more-->


<pre><code>for file in linux_*.mp4 ; do mv "$file" "${file#linux_}" ; done
</code></pre>

<p>But this isnot for my question, so I need to modify this shell ,in order to suit for my situation. I also I found this solution in the comments on the question<a href="http://pubs.opengroup.org/onlinepubs/9699919799/">http://pubs.opengroup.org/onlinepubs/9699919799/</a>.And you may want to know about the <a href="https://en.wikipedia.org/wiki/POSIX">POSIX</a>.</p>

<p>After check the POSIX wiki, you know that. The Portable Operating System Interface (POSIX) is a family of standards specified by the IEEE Computer Society for maintaining compatibility between operating systems. POSIX defines the application programming interface (API), along with command line shells and utility interfaces, for software compatibility with variants of Unix and other operating systems.</p>

<p>But now, we should focus on solving my question. I review the stackoverflow question and the best answer.</p>

<p><strong>Q</strong>: I have multiple files in a directory, example: <code>linux_file1.mp4</code>, <code>linux_file2.mp4</code> and so on. How do I move these files, using shell, so that the names are <code>file1.mp4</code>, <code>file2.mp4</code> and so on. I have about 30 files that I want to move to the new name.</p>

<p><strong>A</strong>: <code>for file in linux_*.mp4 ; do mv "$file" "${file#linux_}" ; done</code></p>

<p>So I guess <code>${file#linux_}</code>  is remove <code>linux_</code> from the filename. As my guess, i am right, you can have a look at the <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02">documentation</a>. I suggest that you should read the <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html">documentation</a> at lest one time. And about the syntax of bash shell you can type the bash help in your terminal.</p>

<p>~$>help</p>

<pre><code>GNU bash，版本 4.3.11(1)-release (x86_64-pc-linux-gnu)
这些 shell 命令是内部定义的。请输入 `help' 以获取一个列表。
输入 `help 名称' 以得到有关函数`名称'的更多信息。
使用 `info bash' 来获得关于 shell 的更多一般性信息。
使用 `man -k' 或 `info' 来获取不在列表中的命令的更多信息。

名称旁边的星号(*)表示该命令被禁用。

 job_spec [&amp;]                            history [-c] [-d 偏移量] [n] 或 history &gt;
 (( 表达式 ))                               if 命令; then 命令; [ elif 命令; then 命令; &gt;
 . 文件名 [参数]                              jobs [-lnprs] [任务声明 ...] 或 jobs -x 命&gt;
 :                                       kill [-s 信号声明 | -n 信号编号 | -信号声明] 进程号&gt;
 [ 参数... ]                               let 参数 [参数 ...]
 [[ 表达式 ]]                               local [option] 名称[=值] ...
 alias [-p] [名称[=值] ... ]                logout [n]
 bg [任务声明 ...]                           mapfile [-n 计数] [-O 起始序号] [-s 计数] [-&gt;
 bind [-lpsvPSVX] [-m keymap] [-f file&gt;  popd [-n] [+N | -N]
 break [n]                               printf [-v var] 格式 [参数]
 builtin [shell 内建 [参数 ...]]             pushd [-n] [+N | -N | 目录]
 caller [表达式]                            pwd [-LP]
 case 词 in [模式 [| 模式]...) 命令 ;;]... es&gt;         read [-ers] [-a 数组] [-d 分隔符] [-i 缓冲区&gt;
 cd [-L|[-P [-e]] [-@]] [dir]            readarray [-n 计数] [-O 起始序号] [-s 计数] &gt;
 command [-pVv] 命令 [参数 ...]              readonly [-aAf] [名称[=值] ...] 或 reado&gt;
 compgen [-abcdefgjksuv] [-o 选项]  [-A &gt;    return [n]
 complete [-abcdefgjksuv] [-pr] [-DE] &gt;  select NAME [in 词语 ... ;] do 命令; don&gt;
 compopt [-o|+o 选项] [-DE] [名称 ...]       set [--abefhkmnptuvxBCHP] [-o 选项名] [&gt;
 continue [n]                            shift [n]
 coproc [名称] 命令 [重定向]                    shopt [-pqsu] [-o] [选项名 ...]
 declare [-aAfFgilnrtux] [-p] [name[=v&gt;  source 文件名 [参数]
 dirs [-clpv] [+N] [-N]                  suspend [-f]
 disown [-h] [-ar] [任务声明 ...]            test [表达式]
 echo [-neE] [参数 ...]                    time [-p] 管道
 enable [-a] [-dnps] [-f 文件名] [名称 ...]&gt;       times
 eval [参数 ...]                           trap [-lp] [[参数] 信号声明 ...]
 exec [-cl] [-a 名称] [命令 [参数 ...]] [重定向&gt;        true
 exit [n]                                type [-afptP] 名称 [名称 ...]
 export [-fn] [名称[=值] ...] 或 export -p&gt;      typeset [-aAfFgilrtux] [-p] 名称[=值] .&gt;
 false                                   ulimit [-SHabcdefilmnpqrstuvxT] [lim&gt;
 fc [-e 编辑器名] [-lnr] [起始] [终结] 或 fc -s&gt;          umask [-p] [-S] [模式]
 fg [任务声明]                               unalias [-a] 名称 [名称 ...]
 for 名称 [in 词语 ... ] ; do 命令; done        unset [-f] [-v] [-n] [name ...]
 for (( 表达式1; 表达式2; 表达式3 )); do 命令; do&gt;           until 命令; do 命令; done
 function 名称 { 命令 ; } 或 name () { 命令 ;&gt;       variables - 一些 shell 变量的名称和含义
 getopts 选项字符串 名称 [参数]                   wait [-n] [id ...]
 hash [-lr] [-p 路径名] [-dt] [名称 ...]       while 命令; do 命令; done
 help [-dms] [模式 ...]                    { 命令 ; }
</code></pre>

<p>Now, I brought out my question :</p>

<p><strong>Q</strong>: Rename the css suffix all current directory file <code>.css</code> to <code>.scss</code> and underscore the file prefix.</p>

<p><strong>A</strong>: <code>for file in *.css ; do mv "$file" "_${file%.css}.scss" ; done</code></p>

<p>About the syntax, you can have a look at the chapter <code>2.6.2 Parameter Expansion</code>.</p>

<p>&hellip;</p>

<p>${parameter%[word]}</p>

<p><strong>Remove Smallest Suffix Pattern</strong>. The word shall be expanded to produce a pattern. The parameter expansion shall then result in parameter, with the smallest portion of the suffix matched by the pattern deleted. If present, word shall not begin with an unquoted &lsquo;%&rsquo;.</p>

<p>${parameter%%[word]}</p>

<p><strong>Remove Largest Suffix Pattern</strong>. The word shall be expanded to produce a pattern. The parameter expansion shall then result in parameter, with the largest portion of the suffix matched by the pattern deleted.</p>

<p>${parameter#[word]}</p>

<p><strong>Remove Smallest Prefix Pattern</strong>. The word shall be expanded to produce a pattern. The parameter expansion shall then result in parameter, with the smallest portion of the prefix matched by the pattern deleted. If present, word shall not begin with an unquoted &lsquo;#&rsquo;.</p>

<p>${parameter##[word]}</p>

<p><strong>Remove Largest Prefix Pattern</strong>. The word shall be expanded to produce a pattern. The parameter expansion shall then result in parameter, with the largest portion of the prefix matched by the pattern deleted.</p>

<p>&hellip;</p>

<p>My question has been solved.</p>

<p>Good luck to you.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Upgrade from Octopress 2.x to Jekyll 3.x]]></title>
    <link href="http://blog.w3cub.com/blog/2016/05/25/blog-upgrade-from-octopress-2-dot-x-to-jekyll-3-dot-x/"/>
    <updated>2016-05-25T08:06:09+08:00</updated>
    <id>http://blog.w3cub.com/blog/2016/05/25/blog-upgrade-from-octopress-2-dot-x-to-jekyll-3-dot-x</id>
    <content type="html"><![CDATA[<p>Good news, my blog had Upgrade from Octopress 2.x to Jekyll 3.x. It is not difficult to do this, if you follow me step by step.</p>

<p>As you know, Octopress 2.x is based on Jekyll 2.x. so &ldquo;Upgrade from Octopress 2.x to Jekyll 3.x&rdquo; mean that upgrading Jekyll 2.x to Jekyll 3.x.</p>

<!--more-->


<p><strong>Firstly</strong>, Check out and have a look the offcial upgrade turtuial <a href="https://jekyllrb.com/docs/upgrading/2-to-3/">https://jekyllrb.com/docs/upgrading/2-to-3/</a></p>

<p><strong>Secondly</strong>, upgrade the <code>Gemfile</code> file, <code>gem 'pygments.rb'</code>, <code>gem 'jekyll','~&gt; 3.1.6'</code>, <code>gem 'jekyll-sitemap'</code>,<code>gem 'jekyll-paginate', '~&gt; 1.1'</code>, etc. and than remove the <code>Gemfile.lock</code> file and run command <code>bundle install</code>. If in the gem install process, you catch out the error or some dependencies dependency confliction, upgrading it to the newest version could be ok.</p>

<p><strong>And Then</strong>, Add <code>gems: [jekyll-paginate]</code>  in your <code>_config.yml</code> file and remove <code>Octopress-hooks</code> plugin. if you use the <code>octopress_filters.rb</code>, you need to change the following Code：</p>

<pre><code>  Jekyll::Hooks.register :page, :pre_render do |page|
    OctopressFilters::pre_filter(page)
  end

  Jekyll::Hooks.register :page, :post_render do |page|
    OctopressFilters::post_render(page)
  end

  Jekyll::Hooks.register :post, :pre_render do |post|
    OctopressFilters::pre_filter(post)
  end

  Jekyll::Hooks.register :post, :post_render do |post|
    OctopressFilters::post_render(post)
  end
</code></pre>

<p>And the <code>sitemap_generator.rb</code> should be upgrade to the newest version.</p>

<p>The above problem is that I encountered during the upgrade process, only for reference. I suggest that when you upgrade the jekyll like me, you should use the the command <code>jekyll build --trace</code> instead of <code>rake preview</code> that you can catch out the error easily.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docs w3cub is on]]></title>
    <link href="http://blog.w3cub.com/blog/2015/12/08/docs-w3cub-release/"/>
    <updated>2015-12-08T22:23:26+08:00</updated>
    <id>http://blog.w3cub.com/blog/2015/12/08/docs-w3cub-release</id>
    <content type="html"><![CDATA[<a name="Preface"></a>
<h2>Preface</h2>

<p><a href="http://docs.w3cub.com/">docs.w3cub</a> project is based on <a href="https://github.com/Thibaut/devdocs">open source</a><iframe class="github-btn" src="https://ghbtns.com/github-btn.html?user=Thibaut&amp;repo=devdocs&amp;type=star&amp;count=true" allowtransparency="true" frameborder="0" scrolling="0" width="100" height="20"></iframe>. we use jekyll system to rewrite and hosted on Github Pages. This project continued for several months and written in my spare time.</p>

<p>As you know, all pages are static. we think that this would be more fast than using backend router. The most important thing is that Github Pages is free. we also thought about using frondend history router to rewrite this project, but Github Pages don&rsquo;t support the nginx rule. However we have permission to use 404 page, but useing the 404 page as the frontend router is very crazy idea. So at last we use the jekyll system to generate the static pages.</p>

<!--more-->


<p>After subsequent improvement, we will open some jekyll plug-ins and source code.</p>

<a name="Credits"></a>
<h2>Credits</h2>

<p>Following credits copy from devdocs.</p>

<table class="table table-bordered table-hover">
  <tbody><tr>
    <th>Documentation
    </th><th>Copyright
    </th><th>License
  </th></tr><tr><td>Angular.js</td><td>© 2010-2015 Google, Inc.</td><td><a href="http://creativecommons.org/licenses/by/3.0/">CC BY</a></td></tr><tr><td>Apache HTTP Server</td><td>© The Apache Software Foundation</td><td><a href="http://www.apache.org/licenses/LICENSE-2.0">Apache</a></td></tr><tr><td>Backbone.js</td><td>© 2010-2015 Jeremy Ashkenas, DocumentCloud</td><td><a href="https://raw.github.com/jashkenas/backbone/master/LICENSE">MIT</a></td></tr><tr><td>Bower</td><td>© 2015 Bower contributors</td><td><a href="https://github.com/bower/bower.github.io/blob/b7b94ad38b72e8fb5dafb20c8ce42835a49cc98f/package.json#L20">CC BY</a></td></tr><tr><td>C<br>C++</td><td>© cppreference.com</td><td><a href="http://en.cppreference.com/w/Cppreference:Copyright/CC-BY-SA">CC BY-SA</a></td></tr><tr><td>Chai</td><td>© 2011-2015 Jake Luer</td><td><a href="https://github.com/chaijs/chai/blob/master/README.md#license">MIT</a></td></tr><tr><td>Clojure</td><td>© Rich Hickey</td><td><a href="https://github.com/clojure/clojure/blob/master/epl-v10.html">EPL</a></td></tr><tr><td>CoffeeScript</td><td>© 2009-2015 Jeremy Ashkenas</td><td><a href="https://raw.github.com/jashkenas/coffee-script/master/LICENSE">MIT</a></td></tr><tr><td>Cordova</td><td>© 2012-2015 The Apache Software Foundation</td><td><a href="https://raw.githubusercontent.com/apache/cordova-docs/master/LICENSE">Apache</a></td></tr><tr><td>CSS<br>DOM<br>HTML<br>JavaScript<br>SVG<br>XPath</td><td>© 2005-2015 Mozilla Developer Network and individual contributors</td><td><a href="http://creativecommons.org/licenses/by-sa/2.5/">CC BY-SA</a></td></tr><tr><td>D3.js</td><td>© 2015 Michael Bostock</td><td><a href="https://raw.github.com/mbostock/d3/master/LICENSE">BSD</a></td></tr><tr><td>Django</td><td>© Django Software Foundation and individual contributors</td><td><a href="https://raw.githubusercontent.com/django/django/master/LICENSE">BSD</a></td></tr><tr><td>Dojo</td><td>© 2005-2015 The Dojo Foundation</td><td><a href="http://dojotoolkit.org/license.html">BSD + AFL</a></td></tr><tr><td>Drupal</td><td>© 2001-2015 by the original authors<br>Drupal is a registered trademark of Dries Buytaert.</td><td><a href="https://api.drupal.org/api/drupal/LICENSE.txt">GPLv2</a></td></tr><tr><td>Ember.js</td><td>© 2015 Yehuda Katz, Tom Dale and Ember.js contributors</td><td><a href="https://raw.github.com/emberjs/ember.js/master/LICENSE">MIT</a></td></tr><tr><td>Elixir</td><td>© 2012 Plataformatec</td><td><a href="https://raw.githubusercontent.com/elixir-lang/elixir/master/LICENSE">Apache</a></td></tr><tr><td>Express</td><td>© 2009-2015 TJ Holowaychuk</td><td><a href="https://raw.githubusercontent.com/visionmedia/express/master/LICENSE">MIT</a></td></tr><tr><td>Git</td><td>© 2005-2015 Linus Torvalds and others</td><td><a href="https://raw.github.com/git/git/master/COPYING">GPLv2</a></td></tr><tr><td>Go</td><td>© Google, Inc.</td><td><a href="http://creativecommons.org/licenses/by/3.0/">CC BY</a></td></tr><tr><td>Grunt</td><td>© 2014 Grunt Team</td><td><a href="https://raw.githubusercontent.com/gruntjs/gruntjs.com/master/LICENSE">MIT</a></td></tr><tr><td>Haskell</td><td>© The University of Glasgow</td><td><a href="http://www.haskell.org/ghc/license">BSD</a></td></tr><tr><td>io.js</td><td>© io.js contributors</td><td><a href="https://raw.githubusercontent.com/iojs/io.js/v1.x/LICENSE">MIT</a></td></tr><tr><td>jQuery</td><td>© 2009 Packt Publishing<br>© 2014 jQuery Foundation</td><td><a href="https://raw.github.com/jquery/api.jquery.com/master/LICENSE-MIT.txt">MIT</a></td></tr><tr><td>jQuery Mobile</td><td>© 2014 jQuery Foundation</td><td><a href="https://raw.github.com/jquery/api.jquerymobile.com/master/LICENSE-MIT.txt">MIT</a></td></tr><tr><td>jQuery UI</td><td>© 2014 jQuery Foundation</td><td><a href="https://raw.github.com/jquery/api.jqueryui.com/master/LICENSE-MIT.txt">MIT</a></td></tr><tr><td>Knockout.js</td><td>© Steven Sanderson, the Knockout.js team, and other contributors</td><td><a href="https://raw.github.com/knockout/knockout/master/LICENSE">MIT</a></td></tr><tr><td>Laravel</td><td>© Taylor Otwell</td><td><a href="https://raw.githubusercontent.com/laravel/framework/master/LICENSE.txt">MIT</a></td></tr><tr><td>Less</td><td>© 2009-2015 The Core Less Team</td><td><a href="http://creativecommons.org/licenses/by/3.0/">CC BY</a></td></tr><tr><td>Lo-Dash</td><td>© 2012-2015 The Dojo Foundation</td><td><a href="https://raw.github.com/lodash/lodash/master/LICENSE.txt">MIT</a></td></tr><tr><td>Lua</td><td>© 1994–2015 Lua.org, PUC-Rio</td><td><a href="http://www.lua.org/license.html">MIT</a></td></tr><tr><td>Marionette.js</td><td>© 2015 Muted Solutions, LLC</td><td><a href="http://mutedsolutions.mit-license.org/">MIT</a></td></tr><tr><td>Markdown</td><td>© 2004 John Gruber</td><td><a href="http://daringfireball.net/projects/markdown/license">BSD</a></td></tr><tr><td>Meteor</td><td>© 2011-2015 Meteor Development Group</td><td><a href="https://raw.githubusercontent.com/meteor/meteor/master/LICENSE.txt">MIT</a></td></tr><tr><td>Minitest</td><td>© Ryan Davis, seattle.rb</td><td><a href="https://raw.githubusercontent.com/seattlerb/minitest/master/README.txt">MIT</a></td></tr><tr><td>Mocha</td><td>© 2011-2015 TJ Holowaychuk</td><td><a href="https://raw.githubusercontent.com/mochajs/mocha/master/LICENSE">MIT</a></td></tr><tr><td>Modernizr</td><td>© 2009-2014 Modernizr</td><td><a href="http://modernizr.com/license/">MIT</a></td></tr><tr><td>Moment.js</td><td>© 2011-2015 Tim Wood, Iskren Chernev, Moment.js contributors</td><td><a href="https://raw.github.com/moment/moment/master/LICENSE">MIT</a></td></tr><tr><td>Mongoose</td><td>© 2010 LearnBoost</td><td><a href="https://github.com/LearnBoost/mongoose/blob/master/README.md#license">MIT</a></td></tr><tr><td>nginx</td><td>© 2002-2015 Igor Sysoev<br>© 2011-2015 Nginx, Inc.</td><td><a href="http://nginx.org/LICENSE">BSD</a></td></tr><tr><td>Node.js</td><td>© Joyent, Inc. and other Node contributors<br>Node.js is a trademark of Joyent, Inc.</td><td><a href="https://raw.githubusercontent.com/nodejs/node/master/LICENSE">MIT</a></td></tr><tr><td>Nokogiri</td><td>© 2008-2014 2014 Aaron Patterson, Mike Dalessio, Charles Nutter, Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori Musha</td><td><a href="https://github.com/sparklemotion/nokogiri/blob/master/README.rdoc#license">MIT</a></td></tr><tr><td>npm</td><td>© npm, Inc. and Contributors<br>npm is a trademark of npm, Inc.</td><td><a href="https://raw.githubusercontent.com/npm/npm/master/LICENSE">npm</a></td></tr><tr><td>OpenTSDB</td><td>© 2010-2015 The OpenTSDB Authors</td><td><a href="https://raw.githubusercontent.com/OpenTSDB/opentsdb.net/gh-pages/COPYING.LESSER">LGPLv2.1</a></td></tr><tr><td>Phalcon</td><td>© 2011-2015 Phalcon Framework Team</td><td><a href="https://docs.phalconphp.com/en/latest/reference/license.html">CC BY</a></td></tr><tr><td>Phaser</td><td>© 2015 Richard Davey, Photon Storm Ltd.</td><td><a href="https://raw.githubusercontent.com/photonstorm/phaser/master/license.txt">MIT</a></td></tr><tr><td>Phoenix</td><td>© 2014 Chris McCord</td><td><a href="https://raw.githubusercontent.com/phoenixframework/phoenix/master/LICENSE.md">MIT</a></td></tr><tr><td>PHP</td><td>© 1997-2015 The PHP Documentation Group</td><td><a href="http://creativecommons.org/licenses/by/3.0/">CC BY</a></td></tr><tr><td>PHPUnit</td><td>© 2005-2015 Sebastian Bergmann</td><td><a href="http://creativecommons.org/licenses/by/3.0/">CC BY</a></td></tr><tr><td>PostgreSQL</td><td>© 1996-2013 The PostgreSQL Global Development Group<br>© 1994 The Regents of the University of California</td><td><a href="http://www.postgresql.org/about/licence/">PostgreSQL</a></td></tr><tr><td>Python</td><td>© 1990-2015 Python Software Foundation<br>Python is a trademark of the Python Software Foundation.</td><td><a href="http://docs.python.org/3/license.html">PSFL</a></td></tr><tr><td>Q</td><td>© 2009-2015 Kristopher Michael Kowal and contributors</td><td><a href="https://raw.githubusercontent.com/kriskowal/q/v1/LICENSE">MIT</a></td></tr><tr><td>React, React Native, Flow, Relay</td><td>© 2013-2015 Facebook Inc.</td><td><a href="https://raw.githubusercontent.com/facebook/react/master/LICENSE-docs">CC BY</a></td></tr><tr><td>Redis</td><td>© 2009-2015 Salvatore Sanfilippo</td><td><a href="http://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA</a></td></tr><tr><td>RequireJS</td><td>© 2010-2014 The Dojo Foundation</td><td><a href="https://raw.githubusercontent.com/jrburke/requirejs/master/LICENSE">MIT</a></td></tr><tr><td>RethinkDB</td><td>© RethinkDB contributors</td><td><a href="https://raw.githubusercontent.com/rethinkdb/docs/master/LICENSE">CC BY-SA</a></td></tr><tr><td>Ruby</td><td>© 1993-2015 Yukihiro Matsumoto</td><td><a href="https://www.ruby-lang.org/en/about/license.txt">Ruby</a></td></tr><tr><td>Ruby on Rails</td><td>© 2004-2015 David Heinemeier Hansson<br>Rails, Ruby on Rails, and the Rails logo are trademarks of David Heinemeier Hansson.</td><td><a href="https://raw.github.com/rails/rails/master/activerecord/MIT-LICENSE">MIT</a></td></tr><tr><td>Rust</td><td>© 2011-2015 The Rust Project Developers</td><td><a href="https://raw.githubusercontent.com/rust-lang/rust/master/LICENSE-MIT">MIT</a></td></tr><tr><td>Sass</td><td>© 2006-2015 Hampton Catlin, Nathan Weizenbaum, and Chris Eppstein</td><td><a href="https://raw.github.com/nex3/sass/master/MIT-LICENSE">MIT</a></td></tr><tr><td>Sinon</td><td>© 2010-2015 Christian Johansen</td><td><a href="https://raw.githubusercontent.com/cjohansen/Sinon.JS/master/LICENSE">BSD</a></td></tr><tr><td>Socket.io</td><td>© 2014-2015 Automattic</td><td><a href="https://raw.githubusercontent.com/Automattic/socket.io/master/LICENSE">MIT</a></td></tr><tr><td>Symfony</td><td>© 2004-2015 Fabien Potencier</td><td><a href="http://symfony.com/doc/current/contributing/code/license.html">MIT</a></td></tr><tr><td>Underscore.js</td><td>© 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters &amp; Editors</td><td><a href="https://raw.github.com/jashkenas/underscore/master/LICENSE">MIT</a></td></tr><tr><td>Vagrant</td><td>© 2010-2015 Mitchell Hashimoto</td><td><a href="https://raw.githubusercontent.com/mitchellh/vagrant/master/LICENSE">MIT</a></td></tr><tr><td>Vue.js</td><td>© 2013-2015 Evan You, Vue.js contributors</td><td><a href="https://raw.githubusercontent.com/yyx990803/vue/master/LICENSE">MIT</a></td></tr><tr><td>Webpack</td><td>© 2012-2015 Tobias Koppers</td><td><a href="https://raw.githubusercontent.com/webpack/webpack/master/LICENSE">MIT</a></td></tr><tr><td>Yii</td><td>© 2008-2015 by Yii Software LLC</td><td><a href="https://raw.github.com/yiisoft/yii/master/LICENSE">BSD</a>
</td></tr></tbody></table>


<p>About devdocs, you can read <a href="https://devdocs.io/about">this</a>.</p>

<a name="The.coming.issue"></a>
<h2>The coming issue</h2>

<p>After improve these static web pages, I would do the app. If you like this, please wait the coming app.</p>

<a name="Related.links"></a>
<h2>Related links</h2>

<ul>
<li>my project <a href="http://docs.w3cub.com/">docs.w3cub</a></li>
<li>original project <a href="https://devdocs.io/about">devdocs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[鲜香虾粥]]></title>
    <link href="http://blog.w3cub.com/blog/2015/08/20/shrimpcongee/"/>
    <updated>2015-08-20T22:53:49+08:00</updated>
    <id>http://blog.w3cub.com/blog/2015/08/20/shrimpcongee</id>
    <content type="html"><![CDATA[<a name="L......"></a>
<h2>前言</h2>

<p>你会不会经常大排档吃砂锅粥呢，各种虾粥，蟹粥之类的。在广州，潮汕大排档这些东西是最普遍不过了。要么味道太浓，味精太多，要么吃不出什么鲜肉。对于我这种喜欢折腾的人来说，自然就是少不了在家DIY了.</p>

<!-- more -->


<a name="L........."></a>
<h2>食材：</h2>

<p>米 150  毫升 （电饭锅米杯差不多满杯）</p>

<p>虾 600 克 （shrimp）</p>

<p>香菜（芫荽） 50 克</p>

<p>姜 小许</p>

<p>盐油 小许</p>

<a name="L........."></a>
<h2>步骤：</h2>

<ol>
<li><p>把米放到锅里面洗干净，放进适量的水。
其实我也不知道适量是多少，以前本港台中午的烹饪节目就是那么说的。
可以开火了，1000W 煲到沸，转600W。</p>

<blockquote><p><img src="http://blog.w3cub.com/assets/posts/shrimpcongee/IMG_20150820_185200-ab4ea285f212a3930d6c47638223ac092f9d79492faa1fd56bd6221b3f449fad.png" alt="第一步, 洗米" /></p></blockquote></li>
<li><p>在煲的过程中，我们开始处理主要材料。
明虾去头，虾脚等，由腹开刀，去除虾线。把尾也去掉吧。</p>

<blockquote><p><img src="http://blog.w3cub.com/assets/posts/shrimpcongee/IMG_20150820_190823-99aa8352a9b8e078d4eb8d56d703ae11dcc2d9d5c47904940739f569aa96dcad.png" alt="第二步, 处理虾" /></p></blockquote></li>
<li><p>腌虾。当粥煮到沸，<strong>米变粗，没有变花</strong>的时候，开始腌虾，盐少许，油适量。盐不要放太多，是个人口味而定，这里已经放盐了，之后就不用放了。</p>

<blockquote><p><img src="http://blog.w3cub.com/assets/posts/shrimpcongee/IMG_20150820_195056-89493e813c72b42aa0dc969e90bbde0c53a426e3bf2f52b42f9a0a8d02b043b9.png" alt="第三步, 腌虾" /></p></blockquote></li>
<li><p>准备配料。洗净，去头，切段。假如，你能把头洗净的话，可以留头。姜，拍扁。</p>

<blockquote><p><img src="http://blog.w3cub.com/assets/posts/shrimpcongee/IMG_20150820_195127-015749ef609849ed4662af64fe3652945c37c324c1545285ec5ddf5cafbb9de5.png" alt="第四步, 准备配料" /></p></blockquote></li>
<li><p><strong>米变粗</strong>，放入姜。</p></li>
<li><p>米开花，煮好的白粥，放料。把火调到1000w。</p>

<blockquote><p><img src="http://blog.w3cub.com/assets/posts/shrimpcongee/IMG_20150820_195312-1c47c1f564b2ff34a6b1b3af01242d2fcb5d6554a48344208a8f4c9f7be09172.png" alt="第五步,白粥" /></p></blockquote></li>
<li><p>等待煮沸，放入香草，OK。</p>

<blockquote><p><img src="http://blog.w3cub.com/assets/posts/shrimpcongee/IMG_20150820_200346-aa68687cc1891b945300fc192247d6e48fdb9ffe10b643d3e065287404dcb692.png" alt="最后完成" /></p></blockquote></li>
</ol>


<a name="L........."></a>
<h2>点评：</h2>

<p>过程，虾处理十分耗时，煮白粥也要相当一段时间。放下米的时候，开始处理就好了。</p>

<p>味道, 十分鲜味，还有米和姜的香。十分OK啦。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模糊匹配查询正则表达式探究]]></title>
    <link href="http://blog.w3cub.com/blog/2015/07/15/fuzzy-scoring-regex-mayhem-zh/"/>
    <updated>2015-07-15T22:09:43+08:00</updated>
    <id>http://blog.w3cub.com/blog/2015/07/15/fuzzy-scoring-regex-mayhem-zh</id>
    <content type="html"><![CDATA[<p>Autocompletion is never an entirely solved problem. Can anyone really say what on earth a user typing &ldquo;uni&rdquo; into a country input field actually intends to select? It could match any of these:</p>

<p>自动完成一直都是一个没完没了的问题。谁能准确地说出当一个地球人在一个国家输入框输入“uni”打算选什么？可能会出现以下情况：</p>

<ul>
<li>Tanzania, [<strong>U</strong>][<strong>n</strong>][<strong>i</strong>]ted Republic of</li>
<li>[<strong>U</strong>][<strong>n</strong>][<strong>i</strong>]ted Arab Emirates</li>
<li>[<strong>U</strong>][<strong>n</strong>][<strong>i</strong>]ted Kingdom</li>
<li>[<strong>U</strong>][<strong>n</strong>][<strong>i</strong>]ted States</li>
<li>T[<strong>u</strong>][<strong>n</strong>][<strong>i</strong>]sia</li>
</ul>


<p>Of course, it’s probably not the last one, but that right there is a human intuition that we often forget to instil into these UI interactions.</p>

<p>当然，这可能不是最后一个，但人类的直觉通常会忘记灌输这些UI交互。</p>

<!-- more -->


<p>We can divine what the user <em>probably</em> intends most of the time but it&rsquo;ll always be a game of heuristics. Most solutions shy away from this game, opting instead to match the query letter-for-letter in each potential value, and this is usually sufficient, but without any other logic not only will “la” match “Latvia” but also “Angola”. And usually “Ltvia” will match nothing whatsoever, even though it’s seemingly obvious what the user is trying to type.</p>

<p>我们可以推断用户在这上面花费的时间，显然这是一个启发式游戏。大多数解决方案都是尝试匹配字母之间可能潜在的值，通常已经足够了，“la” 没有任何逻辑，会匹配 “Latvia” 也会匹配 “Angola”。但绝不会匹配 “Ltvia”，尽管“Ltvia”看似是用户想要的输入类型。</p>

<p>If you try implementing a fuzzy matcher to solve this, the first revelation is that you can&rsquo;t just boolean-match the query against the data like so many solutions do. You need to score each potential match. Hopefully, in the case of country selection, you end up with a sensible subset of countries that match the query to some reasonable degree. This scoring is necessary so that you know what you&rsquo;re putting at the top of the list. When typing &ldquo;U&rdquo;, the user expects Ukraine or Uzbekistan sooner than Mauritius or Sudan, for example.</p>

<p>假如你想用模糊匹配去解决这个问题。首先，你不能像往常那样用boolean匹配去请求查询数据。你需要计算每个存在匹配的分数。 在选择国家情况下，你最终需要请求匹配查询一些合符逻辑的合理的国家子集。那么这分数是非常有必要的，以便我们可以把它们排到列表的顶部。</p>

<p>（译注, boolean匹配 <a href="https://github.com/bevacqua/fuzzysearch">https://github.com/bevacqua/fuzzysearch</a>）</p>

<p>Oddly, if you looked at the most common autocompletion widget out there (jQuery UI), it <a href="http://jsfiddle.net/2c11xknm/embedded/result,js,html">doesn&rsquo;t appear</a> to follow this intuition.</p>

<p>奇怪的是，假如见过最常用的jQuery UI 自动完成（autocompletion）插件，他并没有解决这个问题。</p>

<p>Even the most <a href="http://baymard.com/labs/country-selector">graceful</a> solutions tend to avoid the muddiness of dealing with mistakes like “untied states” or “leichtenstein”. Sure, the likeliness of a person having to type the name of a country they aren’t intimately familiar with is probably quite low, but people still make mistakes.</p>

<p>即使是最优雅的解决方案，都趋向于忽视模糊处理错误，像“untied states” （united states） 和 “leichtenstein” （liechtenstein ）。当然， 就像一个人输入一个国家的名字，他们不熟悉这个国家可能性是非常很低。但人们仍然会犯错误。</p>

<p>I&rsquo;ve been intrigued by this topic for quite a while and it&rsquo;s why I originally made <a href="https://github.com/padolsey/relevancy.js">relevancy.js</a>. It solves the problem quite well, I think, and it does so in a pretty transparent way, with scores applied for various qualities such as the index of the query within the target string (&ldquo;king&rdquo; scores higher than &ldquo;dom&rdquo; in &ldquo;kingdom&rdquo;, for example), but it&rsquo;s still a quite a lot of code for such a tiny part of an overall user experience.</p>

<p>我一直被这个话题吸引了很长时间，也是我写 <a href="https://github.com/padolsey/relevancy.js">relevancy.js</a> 的原因。它可以很好地处理类似问题，我想，他的原理是非常显而易见的，就是通过分数去区分不同品质（把分数应用于品质）例如，目标字符串查询的索引(正如在查询“kingdom” &ldquo;的时候，king"的分数比 "dom"高)。但这还是需要相当多的代码去实现这小部分，相对于这样一个整体用户体验的而言。</p>

<p>I have once again been playing with this problem (thanks to a certain <a href="https://twitter.com/codepo8/status/572863924887945216">tweet</a>) and have so wanted to come up with something stupefyingly graceful.</p>

<p>我又再一次遇上了这个问题（谢谢 <a href="https://twitter.com/codepo8/status/572863924887945216">tweet</a> 的肯定），我想可以写的更加优雅。</p>

<p>It all starts with a scratch in back of your mind — the one that tells you that your time has come. The <a href="http://xkcd.com/208/">world requires you</a> to use regular expressions.</p>

<p>一切从头开始在你的脑海里，这告诉你的时间到了。<a href="http://xkcd.com/208/">world requires you</a> （世界需要你） 用正则表达式。</p>

<p><strong>Warning:</strong> I don’t sincerely recommend doing any of this. It’s just a bit of fun. It’s probably an inefficient, unreliable, obscure and ultimately foolish endeavour!</p>

<p>Warning： 别分心，不然效率极低的，bebebe～～～</p>

<a name="Let...s.begin."></a>
<h2>Let’s begin!</h2>

<a name="L.................."></a>
<h2>我们入正题：</h2>

<p>A static France might look like this:</p>

<p>静态字符串France 正则：</p>

<pre><code>/^France$/
</code></pre>

<p>A more lenient France might be less sensitive to its case:</p>

<p>不区分大小写：</p>

<pre><code>/^france$/i
</code></pre>

<p>We could then allow the characters to be optional too:</p>

<p>我们也可以允许字符是可选的</p>

<pre><code>/^f?r?a?n?c?e?$/i
</code></pre>

<p>This would match “f” and “franc” and “FaE”, etc.</p>

<p>这会匹配 “f”， “franc” 和 “FaE”等等。</p>

<p>But… users make even more grievous mistakes sometimes, and our regular expression should be able to handle those. So let’s add a single character of leniency between each legitimate character, and at the beginning and end of the string:</p>

<p>但…… 用户有时犯更严重的错误，我们的正常表达应该能够处理这些错误。因此，让我们在每一个合理的字母之间加上一个宽容的字符在每个字符的前后。</p>

<pre><code>/^.?f?.?r?.?a?.?n?.?c?.?e?.?$/i
</code></pre>

<p>But then this would allow contiguous mistakes like “fafafafa”. We only want to allow a <em>single</em> incorrect mistake after each successfully entered character. For this we can use groups to force each character to be matched and a lazy quantifier on the mistake character to ensure that legitimate characters get to successfully match.</p>

<p>但当这允许连续错误像“fafafafa”，我们只允许一个单一的错误在每个正确输入字符之后。为此我们可以使用分组强制每个字符匹配和懒惰匹配的错误的字符串，确保合法字符可以成功匹配。</p>

<p>So:</p>

<pre><code>/f.?otherStuff/
</code></pre>

<p>Becomes:</p>

<pre><code>/(?:f.??)?otherStuff/
</code></pre>

<p>In English: Try to match <code>f</code> followed by <code>otherStuff</code>. If impossible then try to match any character after <code>f</code> but before <code>otherStuff</code>. (This is why lazy quantifiers (e.g. <code>??</code>) are so useful!)</p>

<p>就是说，尝试匹配跟在otherStuff之前的f。如果不可能的话，尝试匹配任何在“f” 之后，在“otherStuff” 之前的字符。</p>

<p>The entire regex would become:</p>

<p>完整的正则表达式会变成：</p>

<pre><code>/^(?:.(?=f))?(?:f.??)?(?:r.??)?(?:a.??)?(?:n.??)?(?:c.??)?(?:e.??)?$/i
</code></pre>

<p>We should probably capture each individual match (<code>f</code> should be <code>(f)</code>) so that we can analyze the result and score it appropriately.</p>

<p>我们可能需要捕获每个单独的匹配(<code>f</code> 应该是<code>(f)</code>) ，以便我们可以分析结果并适当地评分。</p>

<pre><code>var r = /^(?:(f).??)?(?:(r).??)?(?:(a).??)?(?:(n).??)?(?:(c).??)?(?:(e).??)?$/i

'f$R-aN_cEx'.match(r);
// =&gt; ["f$R-aN_cEx", "f", "R", "a", "N", "c", "E"]
</code></pre>

<p>The regular expression, broken down:</p>

<p>正则表达式解释：</p>

<pre><code>/
  ^       # Start of string

  (?:     # Non-captured group（非捕获）
    (f)   # Match and capture 'f' （匹配并捕获"f"）
    .??   # Followed lazily by any character （懒惰匹配跟随字符）
  )?      # Entire group is optional （组可选）

  (?:     # Non-captured group
    (r)   # Match and capture 'f'
    .??   # Followed lazily by any character
  )?      # Entire group is optional

  ...     # Etc.

  $       # End of string
/i
</code></pre>

<p><em>A quick note</em>: <em>lazy</em> or <em>lazily</em> in the context of regular expressions simply means that that thing will be intentionally excluded from the first match attempt and will only be used if the subsequent regular expression is unsuccessful without it.</p>

<p>小便签：正则表达式中懒惰匹配是指……</p>

<p>One caveat with the above regex is that it doesn’t allow a mistake to be at the beginning of the string. We could fix this with a lookahead to the effect of “allow a mistake here as long as its followed by a non-mistake” but since “non-mistake” could effectively be any character in the legitimate string it’s easier to just make allowances for that initial mistake in each group. Additionally, we probably want to capture every single mistake, in addition to legitimate characters. Here’s our next iteration:</p>

<p>一个需要注意的是，上面的正则表达式，它不允许在字符串的开头有错误。我们可以修复这个前瞻错误通过 “允许犯错误，只要它跟在一个非错误后面”， 但由于 “非错误” 可以有效地在合法字符串中的任何字符，使得它更容易在每个组中出现所允许的初始错误。此外，除了合法的字符，我们还可能要捕捉每一个错误。下面是我们的实现：</p>

<pre><code>/
  ^         # Start of string

  (?:       # Non-captured group

    (^.)?   # Captured optional mistake at the beginning of the string
            # ===============================================

    (f)     # Match and capture 'f'
    (.??)   # Followed lazily by any character (captured)
  )?        # Entire group is optional

  ...     # Etc.

  $       # End of string
/i
</code></pre>

<p>The check <code>(^.)?</code> has to be specified in each group, to account for mistakes that don’t involve “f”, like “krance” or “ttance”, etc.</p>

<p>检查<code>(^.)?</code>必须每组都指定, 以便考虑错误不涉及到 “f”, 就像 “krance” 和 “ttance”, 等等。</p>

<p>Since we’re aiming to genericize this entire mess, we should create a generator that assembles the regular expression given any piece of text:</p>

<p>我们的目标是是要去处理这一类问题，所以我们需要构建一个完整的生成器去组装将给定的文本集合的正则表达式。</p>

<pre><code>function makeFuzzyRegex(string) {

  if (!string) { return /^$/; }

  // Escape any potential special characters:
  var cleansed = string.replace(/\W/g, '\\$&amp;');

  return RegExp(
    '^' +
      cleansed.replace(
        // Find every escaped and non-escaped char:
        /(\\?.)/g,
        // Replace with fuzzy character matcher:
        '(?:(^.)?($1)(.??))?'
      ) +
    '$',
    'i'
  );
}

makeFuzzyRegex('omg');
// =&gt; /^(?:(^.)?(o)(.??))?(?:(^.)?(m)(.??))?(?:(^.)?(g)(.??))?$/i
</code></pre>

<p>This regex matched against ‘_o-m*g!’ produces:</p>

<pre><code>[
  // Full match:
  "_o-m*g!",

  // Captures:
  "_",           // Mistake
  "o",           // Legit
  "-",           // Mistake

  undefined,     // Void mistake
  "m",           // Legit
  "*",           // Mistake

  undefined,     // Void mistake
  "g",           // Legit
  "!"            // Mistake
]
</code></pre>

<p>The captures are in groups of three, with every second capture being the legitimate character (case-insensitive), and with every first and third potentially being mistakes.</p>

<p>捕获是在三组，每组捕获都是合法性（不区分大小写），并与每组第一和第三个字符都可能潜在错误。</p>

<p>We can then loop through these captures and apply weights as we see fit.</p>

<p>我们可以循环这些捕捉和应用权重作为我们合适的分数。</p>

<pre><code>var fullMatch = makeFuzzyRegex('omg').exec('_o-m*g!');
var captures = fullMatch.slice(1); // Get captures specifically
var score = 0;

for (var i = 0, l = captures.length; i &lt; l; i += 3) {
  if (captures[i]) score -= 1;
  if (captures[i+1]) score += 10;
  if (captures[i+2]) score -= 1;
}

score; // =&gt; 26
</code></pre>

<p>That scoring is quite arbitrary, but we’ve at least prescribed our wish to score successes more than we punish mistakes (10 vs 1).</p>

<p>这计算是十分随意的，但是我们至少指定我们的愿望比我们惩罚的错误更成功(10 vs 1)。</p>

<p>We can start to play with the heuristics of this if we wrap it all up:</p>

<p>我们把它封装起来，让Ta溜溜：</p>

<pre><code>function createFuzzyScorer(text) {

  var matcher = makeFuzzyRegex(text);

  return function(query) {
    var match = matcher.exec(query);

    if (!match) return 0;

    var captures = match.slice(1);
    var score = 0;

    for (var i = 0, l = captures.length; i &lt; l; i += 3) {
      if (captures[i]) score -= 1;
      if (captures[i+1]) score += 10;
      if (captures[i+2]) score -= 1;
    }

    return score;
  };

  function makeFuzzyRegex(string) {

    if (!string) { return /^$/; }

    // Escape any potential special characters:
    var cleansed = string.replace(/\W/g, '\\$&amp;');

    return RegExp(
      '^' +
        cleansed.replace(
          // Find every escaped and non-escaped char:
          /(\\?.)/g,
          // Replace with fuzzy character matcher:
          '(?:(^.)?($1)(.??))?'
        ) +
      '$',
      'i'
    );
  }
}
</code></pre>

<p>Our first attempt isn’t too bad:</p>

<p>我们的第一次尝试并不太坏：</p>

<pre><code>var score = createFuzzyScorer('omg');

score('omg');     // =&gt; 30
score('xOmg');    // =&gt; 29
score('.o.m.g.'); // =&gt; 26
score('om');      // =&gt; 20
score('og');      // =&gt; 20
score('o');       // =&gt; 10
score('nope');    // =&gt; 0
</code></pre>

<p>These seem like sensible enough scores, generally, but we’re more interested in autocompletion, and so there’s an obvious predictive element there. If a user types ‘o’ then that should probably score higher than ‘g’ if we’re testing against ‘omg’, but with the above mechanism they both receive a standard 10:</p>

<p>这似乎是可感知的足够的分数，一般，但我们在自动完成更感兴趣，所以有一个明显的预测元素的存在。当我们我们测试‘omg’时，如果用户键入"o"那应该得分高于"g"，但上述方法都接受标准的10：</p>

<pre><code>var score = createFuzzyScorer('omg');

score('o'); // =&gt; 10
score('g'); // =&gt; 10
</code></pre>

<p>We can fix this by applying a higher weight to matches that appear earlier in the string:</p>

<p>我们可以用更高的权重来解决字符串中较早出现的匹配问题：</p>

<pre><code>// The scoring loop:
for (var i = 0, l = captures.length; i &lt; l; i += 3) {
  if (captures[i]) score -= 0.1;
  if (captures[i+1]) score += (l - i) / l; // the magic
  if (captures[i+2]) score -= 0.1;
}
</code></pre>

<p>Now the score given for any singular legitimate match will decrease as the index (<code>i</code>) increases. Here are the results:</p>

<p>现在任何奇异的合法的匹配的得分将会递减随着指数（i）增加。这里是结果：</p>

<pre><code>var score = createFuzzyScorer('omg');

score('omg');     // =&gt; 1.99
score('xOmg');    // =&gt; 1.90
score('om');      // =&gt; 1.66
score('.o.m.g.'); // =&gt; 1.59
score('og');      // =&gt; 1.33
score('o');       // =&gt; 1.00
score('nope');    // =&gt; 0.00
</code></pre>

<p>This is getting closer to our intuition. The next step would be to try to create a real autocompletion widget. I’ve done it so I know that we’ll want to make one more change. The problem with our scoring right now is that it’ll award legitimate characters relative to the length of the string. But when comparing scores across multiple subject strings, this approach seems broken.</p>

<p>这是越来越接近我们的直觉。下一步将努力创造一个真正的自动完成功能部件。我已经这样做了，所以我知道，我们将要做一个改变。现在我们分值的问题是，奖励合法的字符相对于字符串的长度。但是，当比较多个同类字符串的分数时，这种方法似乎被打破。</p>

<pre><code>createFuzzyScorer('RuneScript')('Ru'); // 1.9
createFuzzyScorer('Ruby')('Ru');       // 1.7
</code></pre>

<p>These should both score equally, as “Ru” is just as likely to become “Ruby” as it is to become “RuneScript”. To achieve this we should only take into account the index, and make the weight of any scoring decision inversely proportional to that index, in this case via an exponential taper (<code>pow(index, -2)</code>).</p>

<p>显然，分数应该相等，因为 “Ru” 推演成 “Ruby” 和 “RuneScript” 是一样. 为了实现这一点，我们应该考虑到该指数，并使任何得分决定的权重与指数成反比，在这种情况下，通过指数锥度 (<code>pow(index, -2)</code>)</p>

<pre><code>// The scoring loop:
for (var i = 0, l = captures.length; i &lt; l; i += 3) {
  var relevancyOfCharacter = Math.pow(i + 1, -2);
  if (captures[i]) score -= relevancyOfCharacter * 0.1;
  if (captures[i+1]) score += relevancyOfCharacter * 1;
  if (captures[i+2]) score -= relevancyOfCharacter * 0.1;
}
</code></pre>

<p><em>(Final version of <code>createFuzzyScorer</code> available <a href="https://gist.github.com/padolsey/a27a32d5859a71403b10">as a gist</a>.)</em></p>

<p><strong><a href="http://jsbin.com/wanetemare/1/edit?js,output">See this demo using programming languages as the dataset</a></strong>. Try intentionally misspelling something (jawascript), or missing out characters (jaascit), or just going a little crazy (jahskt). It works beautifully.</p>

<p><strong><a href="http://jsbin.com/wanetemare/1/edit?js,output">在数据集用编程语言实现查看demo</a></strong>. 尝试拼写错误（jawascript），或者丢失字母（jaascit）或者输入一些类似的（jahskt）， 它依然工作得很漂亮。</p>

<p>To achieve speedy sorting, a fuzzy scorer is created for every single value before the user types anything:</p>

<p>为了实现快速排序， 每一个单一的值的模糊分数应该在用户输入之前被创建：</p>

<pre><code>var data = PROGRAMMING_LANGUAGES.map(function(lang, i) {
  return {
    actualValue: lang,
    score: createFuzzyScorer(lang),
    i: i,
    toString: function() { return lang; }
  };
});
</code></pre>

<p>This means we can iterate through <code>data</code> on every relevant input event, and call the <code>score()</code>method with the current query. We can then bundle this into a <em>filter->sort->slice</em> flow to get our list of sensible suggestions:</p>

<p>这意味着我们可以遍历每个相关的输入事件的 data ，调用 score() 方法来实现当前查询。我们可以把这变成一个 <em>filter->sort->slice</em> 得出我们列出的有判断力的建议：</p>

<pre><code>var sorted = data.filter(function(item) {

  // Get rid of any very unlikely matches (and cache the score!)
  return (item._cachedScore = item.score(query)) &gt;= .5;

}).sort(function(a, b) {

  var as = a._cachedScore;
  var bs = b._cachedScore;

  // Sort by score, and if score is equal, then by original index:
  // (We would typically return 0 in that case but some engines don't stable-sort)
  return as &gt; bs ? -1 : as == bs &amp;&amp; a.i &lt; b.i ? -1 : 1;

}).slice(0, 10); // We only need the top 10...
</code></pre>

<p>And.. we’re done. It’s never really finished though: you’ll find endless tweaks that can be made to the scorer to make it more believably resemble human-like intuition.</p>

<p>我们做到了，虽然它从来没有真正完成，你会发现很多的调整，使得分数更加人工智能。</p>

<p>For those wanting to test the resulting country autocompletion interaction: <strong><a href="http://jsbin.com/lejucikiha/1/edit?js,output">See the demo</a></strong>.</p>

<p>对于那些想要测试国家自动完成返回值交互的，<strong><a href="http://jsbin.com/lejucikiha/1/edit?js,output">See the demo</a></strong>.</p>

<p>I guess, despite my initial warning, I wouldn’t actually mind using this in production, as long as there were a decent number of unit tests. I’d probably also assemble the regular expressions on the server and serve them up as literals. It’s also worth mentioning that almost everything in this post has been exploring the fuzzy-matching of very short strings in small datasets. Even in the case of the country demo, to get more applicable results, I broke up long names into the component parts and then scored against each. E.g.</p>

<p>我想，尽管我最初的忠告，我不介意使用这个在生产，只要做一些数量的单位测试。我可能也组装正则表达式在服务器并为提供服务。值得一提的是，几乎所有的这篇文章都在探索小数据集上的模糊匹配。即使在国家输入案例的演示，以获得更适用的结果，我折断了长的名字，组成部分，然后对每一个得分。例如</p>

<pre><code>// E.g. Macedonia, the Former Yugoslav Republic of:
var scorers = [
  "Macedonia, the Former Yugoslav Republic of",
  "Macedonia",
  "the",
  "former",
  "yugoslav",
  "republic",
  "of"
].map(createFuzzyScorer);
// Etc.
</code></pre>

<p>And this would be terribly inefficient on a larger scale, so with any dataset longer than a list of countries you’re probably best to explore <a href="http://en.wikipedia.org/wiki/Trie">Trie</a>-based approaches to autocompletion.</p>

<p>And with that, I’ll shut-up and wish you merry regex’ing!</p>

<p>然而这在大规模扫描下是非常低效的，所以任何数据集比的国家名单长的，你可能最好的探究 <a href="http://en.wikipedia.org/wiki/Trie">Trie</a>-based 方法 来处理自动完成。然后，我会闭嘴， wish you merry regex’ing!</p>

<p>译者注：</p>

<p>文中及其评论提到的资源：</p>

<p><a href="https://github.com/padolsey/relevancy.js">https://github.com/padolsey/relevancy.js</a></p>

<p><a href="https://github.com/bevacqua/fuzzysearch">https://github.com/bevacqua/fuzzysearch</a></p>

<p><a href="https://github.com/gf3/Levenshtein">https://github.com/gf3/Levenshtein</a></p>

<p>作者github：<a href="https://github.com/padolsey">https://github.com/padolsey</a></p>

<p>译者：主要用到正则懒惰匹配去实现<code>真值</code>线性回归。you are truly, how much truly you are!</p>

<p>就是通过匹配度分数进行排序，而不是单单的boolean 值指定，再a-z 排序输出，</p>

<blockquote><p>比例投票法：【A，B】候选人，每人有100%的投票额度。%A + %B + %X = 1。X 代表 你放弃的额度。 你的投票额度代表你对候选人信任度。这样的投票更具民主性。例如：我投A 70%，B 0% 那么X 就是30%。懂么，我发明的。[挖鼻屎] <a href="http://weibo.com/1356859197/BqrPv2rRL?type=comment">链接</a></p></blockquote>

<p>100%选你 就是<a href="https://github.com/bevacqua/fuzzysearch">https://github.com/bevacqua/fuzzysearch</a>所用的方法，你只能在true or false 之间选择，而padolsey所用的方法字样更加人工智能，但是在大规模数据下是非常低效的。另外在作者的博客评论中也提到的 <a href="https://github.com/gf3/Levenshtein">https://github.com/gf3/Levenshtein</a>， 可以自行wiki一下。</p>

<hr />

<p>最后如有漏译，错译，欢迎指正。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rvm help]]></title>
    <link href="http://blog.w3cub.com/blog/2015/06/28/rvm-help/"/>
    <updated>2015-06-28T13:12:54+08:00</updated>
    <id>http://blog.w3cub.com/blog/2015/06/28/rvm-help</id>
    <content type="html"><![CDATA[<p>常用命令（Action）：</p>

<pre><code>list        :: show currently installed rubies, interactive output.
install     :: install one or many ruby versions
use         :: setup current shell to use a specific ruby version
</code></pre>

<!-- more -->


<p>详细帮助文档（rvm -h）：</p>

<pre><code>= rvm

* https://rvm.io/
* https://github.com/wayneeseguin/rvm/

== DESCRIPTION:

RVM is the Ruby enVironment Manager (rvm).

It manages Ruby application environments and enables switching between them.

== Installation

  curl -L https://get.rvm.io | bash -s stable --autolibs=enabled [--ruby] [--rails] [--trace]

stable     :: Install stable RVM, good for servers.
--ruby     :: Additionally install latest ruby version (MRI).
--rails    :: Install gem rails into default gemset (also installs ruby=).
--trace    :: Print trace of the installation, gist output when you have problems.
--autolibs :: Enable or disable autolibs see: https://rvm.io/rvm/autolibs

More details here: https://rvm.io/rvm/install/

== Usage

  rvm [Flags] [Options] Action [Implementation[,Implementation[,...]]

== Flags

--default         :: with 'rvm use X', sets the default ruby for new shells to X.
--debug           :: Toggle debug mode on for very verbose output.
--disable-binary  :: Install from source instead of using binaries
--trace           :: Toggle trace mode on to see EVERYTHING rvm is doing.
--force           :: Force install, removes old install &amp; source before install.
--summary         :: Used with rubydo to print out a summary of the commands run.
--latest          :: with gemset --dump skips version strings for latest gem.
--gems            :: with uninstall/remove removes gems with the interpreter.
--docs            :: with install, attempt to generate ri after installation.
--reconfigure     :: Force ./configure on install even if Makefile already exists.
--skip-gemsets    :: with install, skip the installation of default gemsets.
--quiet-curl      :: Makes curl silent when fetching data

== Options

-v|--version     :: Emit rvm version loaded for current shell
-l|--level       :: patch level to use with rvm use / install
   --bin         :: path for binaries to be placed (~/.rvm/bin/)
-S               :: Specify a script file to attempt to load and run (rubydo)
-e               :: Execute code from the command line.
--gems           :: Used to set the 'gems_flag', use with 'remove' to remove
                    gems
--archive        :: Used to set the 'archive_flag', use with 'remove' to remove
                    archive
--patch          :: With MRI Rubies you may specify one or more full paths to
                    patches

                    for multiple, specify comma separated:

                      --patch /.../.../a.patch[%prefix],/.../.../.../b.patch

                    'prefix' is an optional argument, which will be bypassed
                    to the '-p' argument of the 'patch' command. It is separated
                    from patch file name with '%' symbol.
-C|--configure   :: custom configure options. If you need to pass several
                    configure options then append them comma separated:

                      -C --...,--...,--...

--nice           :: process niceness (for slow computers, default 0)
--ree-options    :: Options passed directly to ree's './installer' on the
                    command line.
--with-rubies    :: Specifies a string for rvm to attempt to expand for set
                    operations.

== Action

(Note: for most actions, 'rvm help action-name' may provide more information.)

*usage*     :: show this usage information
version     :: show the rvm version installed in rvm_path
use         :: setup current shell to use a specific ruby version
reload      :: reload rvm source itself (useful after changing rvm source)
implode     :: (seppuku) removes the rvm installation completely.

               This means everything in $rvm_path (~/.rvm || /usr/local/rvm).

               This does not touch your profiles. However, this means that you
               must manually clean up your profiles and remove the lines which
               source RVM.
get         :: {head,stable} upgrades rvm to latest head or stable version.

               Check 'rvm help get' for more details.

               (If you experience bugs try this first with head version, then
               ask for help in #rvm on irc.freenode.net and hang around)
reset       :: remove current and stored default &amp; system settings.

               (If you experience odd behavior try this second)
info        :: show the *current* environment information for current ruby
current     :: print the *current* ruby version and the name of any gemset
               being used.
debug       :: show info plus additional information for common issues

install     :: install one or many ruby versions

               See also: https://rvm.io/rubies/installing/
uninstall   :: uninstall one or many ruby versions, leaves their sources
remove      :: uninstall one or many ruby versions and remove their sources
reinstall   :: reinstall ruby and runs gem pristine on all gems,
               make sure to read output, use 'all' for all rubies.

migrate     :: Lets you migrate all gemsets from one ruby to another.
upgrade     :: Lets you upgrade from one version of a ruby to another, including
               migrating your gemsets semi-automatically.

wrapper     :: generates a set of wrapper executables for a given ruby with the
               specified ruby and gemset combination. Used under the hood for
               passenger support and the like.

cleanup     :: Lets you remove stale source folders / archives and other
               miscellaneous data associated with rvm.
repair      :: Lets you repair parts of your environment e.g. wrappers, env
               files and and similar files (e.g. general maintenance).
fix-permissions :: Repairs broken permissions (e.g. by sudo or chef)
osx-ssl-certs :: Helps update certificates for OpenSSL installed by rvm on OSX.
snapshot    :: Lets you backup / restore an rvm installation in a lightweight
               manner.

alias       :: Lets you set shortcut strings for convenience with 'rvm use'.
disk-usage  :: Tells you how much disk space rvm install is using.
tools       :: Provides general information about the ruby environment,
               primarily useful when scripting rvm.
docs        :: Tools to make installing ri and rdoc documentation easier.
rvmrc       :: Tools related to managing rvmrc trust and loading.
patchset    :: Tools related to managing ruby patchsets.

do          :: runs an arbitrary command against specified and/or all rubies
cron        :: Manages setup for using ruby in cron tasks.

gemset      :: gemsets: https://rvm.io/gemsets/

rubygems    :: Switches the installed version of rubygems for the current ruby.

config-get  :: display values for RbConfig::CONFIG variables.
gemdir      :: display the path to the current gem directory (GEM_HOME).


fetch       :: Performs an archive / src fetch only of the selected ruby.
list        :: show currently installed rubies, interactive output.

               https://rvm.io/rubies/list/
autolibs    :: Controls settings for automatically installing dependencies.
pkg         :: Install a dependency package {readline,iconv,zlib,openssl}

               https://rvm.io/packages/
notes       :: Display notes, with operating system specifics.

export      :: Temporarily set an environment variable in the current shell.
unexport    :: Undo changes made to the environment by 'rvm export'.
requirements  :: Installs additional OS specific dependencies/requirements for
                 building various rubies. Usually run by install.
mount       :: Install rubies from external locations.

user        :: Tools for managing RVM mixed mode in multiuser installations.
group       :: Tools for managing groups in multiuser installations.

== Implementation

*ruby*     :: MRI/YARV Ruby (The Gold Standard) {1.8.x, 1.9.x, 2.0.x, 2.1.x, 2.2.x}
jruby      :: JRuby, Ruby interpreter on the Java Virtual Machine.
rbx        :: Rubinius
ree        :: Ruby Enterprise Edition, MRI Ruby with several custom
              patches for performance, stability, and memory.
macruby    :: MacRuby, insanely fast, can make real apps (Mac OS X Only).
maglev     :: GemStone Ruby, awesome persistent ruby object store.
ironruby   :: IronRuby, NOT supported yet. Looking for volunteers to help.
system     :: use the system ruby (eg. pre-rvm state)
default    :: use the default ruby (or the system ruby if a default hasn't been set).

              https://rvm.io/rubies/default/

== Resources:

https://rvm.io/
https://www.pivotaltracker.com/projects/26822

== Contributions:

Any and all contributions offered in any form, past present or future, to the
RVM project are understood to be in complete agreement and acceptance with the
Apache License v2.0.

== LICENSE:

Copyright (c) 2009-2011 Wayne E. Seguin
Copyright (c) 2011-2015 Michal Papis

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

  Action documentation available with 'rvm help action-name':

      alias autolibs cleanup config-get cron current debug disk-usage do docs fetch fix-permissions gemdir gemset gemset/copy get group implode info install list migrate mount notes osx-ssl-certs patchset pkg prepare reinstall remove repair requirements reset rubygems rvmrc rvmrc/to rvmrc/warning snapshot srcdir tools uninstall upgrade use user wrapper 

  Other topics of documentation available with 'rvm help topic':

      alt color upgrade-notes 


  For additional information please visit RVM's documentation website:

      https://rvm.io/

  If you still cannot find an answer to your question, find
  'wayneeseguin', 'mpapis', 'richo', 'lemoinem' or 'rys' in #rvm on irc.freenode.net:

      http://webchat.freenode.net/?channels=rvm
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress configuration]]></title>
    <link href="http://blog.w3cub.com/blog/2015/06/20/octopress-config/"/>
    <updated>2015-06-20T23:16:31+08:00</updated>
    <id>http://blog.w3cub.com/blog/2015/06/20/octopress-config</id>
    <content type="html"><![CDATA[<a name="L......"></a>
<h2>前言</h2>

<p>假如想省钱，只是写写博客而已。免去服务器麻烦。推荐你用octopress，可以肯定的，没有wordpress 那么多功能。octopress 是基于 jekyll 的 静态化博客，可以在github pages 和 gitcafe 等上运行。下面我们来部署一下 我们的<code>A blogging framework for hackers.</code> 博客。</p>

<!--more-->


<hr />

<p>先看一下技术栈：</p>

<p>octopress -> jekyll -> ruby</p>

<p>Markdown (or Textile), Liquid, HTML &amp; CSS go in. Static sites come out ready for deployment.</p>

<p>Liquid 一个 ruby模板引擎，Markdown是……。</p>

<p>所以 安装octopress之前必不可少的是安装Ta的生态环境。</p>

<a name="L......Octopress"></a>
<h2>安装Octopress</h2>

<a name="L......rvm"></a>
<h3>安装rvm</h3>

<p>打开<a href="https://rvm.io/">rvm</a>首页，打开终端，使用以下命令安装吧。</p>

<pre><code>$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3

$ \curl -sSL https://get.rvm.io | bash -s stable
</code></pre>

<p><a href="https://en.wikipedia.org/wiki/Ruby_Version_Manager">rvm wiki</a></p>

<a name="L......Ruby"></a>
<h3>安装Ruby</h3>

<pre><code>$ rvm -h
$ rvm list
$ rvm install 2.2.1
$ rvm use 2.2.1
</code></pre>

<p>某些时候会提示，请使用 &ndash;bash-login. 使用就OK了。</p>

<p>安装完成后可以用ruby &ndash;version进行验证</p>

<a name="L......Octopress"></a>
<h3>安装Octopress</h3>

<p>安装Ruby完成后就按照官方指南安装Octpress</p>

<pre><code>#clone octopress
$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress

##安装依赖
$ gem install bundler
$ bundle install



##安装octopress默认主题
$ rake install
</code></pre>

<hr />

<p>bundle 命令 是 Gemfile 文件用的，和 nodejs 项目的 package.json 类似，都是一键安装依赖包文件。</p>

<a name="L......"></a>
<h2>部署</h2>

<p>接下来需要把Blog部署到github上去，第一步要做的是去<a href="https://github.com/new">github</a>创建一个<code>username.github.io</code>的repo，比如我的就叫<code>icai.github.io</code>。</p>

<p>然后运行以下命令，并依照提示完成github和Octopress的关联</p>

<pre><code>$ rake setup_github_pages
</code></pre>

<hr />

<a name="L............"></a>
<h2>创建博客</h2>

<a name="L............"></a>
<h3>生成博客</h3>

<pre><code>$ rake generate
$ rake deploy
</code></pre>

<p>rake 命令 是 Rakefile 文件用的，你在带有Rakefile 目录下执行 rake 命令，
当然你可以 <code>rake -T</code> 查看当前所有的rake Task， 或者 rake -h 获取帮助</p>

<p>把生成后的代码上传到github</p>

<pre><code>$ git add .
$ git commit -m 'create blog'
$ git push origin source
</code></pre>

<p>完成后等待一段时间后就能访问<code>http://username.github.io</code>看到自己的博客了</p>

<a name="L............"></a>
<h3>修改配置</h3>

<p>配置文件路径为<code>~/octopress/_config.yml</code></p>

<p>参考： <a href="https://github.com/octopress/octopress">官方</a></p>

<p>编辑完成后</p>

<pre><code>$ rake generate

$ git add .
$ git commit -m "settings" 
$ git push origin source

$ rake deploy
</code></pre>

<a name="L....................."></a>
<h3>安装第三方主题</h3>

<p>Octopress有许多第三方主题可以选择，首先在<a href="http://opthemes.com/">这里</a>上寻找喜欢的主题，点击进入对应主题的git，一般在readme上都会有安装流程</p>

<pre><code>#这里以安装allenhsu定制的greyshade主题为例，原作者是shashankmehta
$ git clone git@github.com:allenhsu/greyshade.git .themes/greyshade

#Substitue 'color' with your highlight color
$ echo "\$greyshade: color;" &gt;&gt; sass/custom/_colors.scss 

$ rake "install[greyshade]"
$ rake generate

$ git add .
$ git commit -m "theme" 
$ git push origin source

$ rake deploy
</code></pre>

<a name="L.................."></a>
<h3>支持中文标签</h3>

<p>目前版本的Octopress会在<code>/source/blog/categories</code>下创建一个<code>index.markdown</code>来作为分类的首页，但这个首页在标签有中文时会出现无法跳转的情况，原因是因为在出现中文标签时Octopress会把文件的路径中的中文转换成拼音，而在Category跳转时是直接写了中文路径，结果自然是404。解决方法是自己实现一个分类首页并处理中文。</p>

<p>首先按照<a href="https://kaworu.ch/blog/2013/09/23/categories-page-with-octopress/">这里</a>的方法实现<code>index.html</code></p>

<p>将<code>plugins/category_list_tag.rb</code>中的</p>

<pre><code>category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase)
</code></pre>

<p>替换成</p>

<pre><code>category_url = File.join(category_dir, category.to_url.downcase)
</code></pre>

<p>这样你的博客就可以支持中文标签的跳转了。</p>

<hr />

<a name="L........."></a>
<h2>写博客</h2>

<p>经过上面几部后，博客已经成功搭建，现在就可以开始写博文了。</p>

<a name="L............"></a>
<h3>创建博文</h3>

<pre><code>#如果用的是终端
$ rake new_post['title']

#如果用的是ZSH
$ rake "new_post[title]"
#或者
$ rake new_post\['title'\]
</code></pre>

<p>生成的文件在<code>~/source/_posts</code>目录下</p>

<a name="L............"></a>
<h3>编辑博文</h3>

<pre><code>#...markdown写博文

$ rake preview #localhost:4000

$ rake generate

$ git add .
$ git commit -m "comment" 
$ git push origin source

$ rake deploy
</code></pre>

<hr />

<a name="L............"></a>
<h2>参考资料</h2>

<ul>
<li><a href="http://octopress.org/">http://octopress.org/</a></li>
<li><a href="https://msching.github.io/blog/2014/04/11/starting/">https://msching.github.io/blog/2014/04/11/starting/</a></li>
<li><a href="https://github.com/msching/msching.github.io">https://github.com/msching/msching.github.io</a></li>
<li><a href="https://github.com/xiaocong/xiaocong.github.io">https://github.com/xiaocong/xiaocong.github.io</a></li>
<li><a href="https://help.github.com/articles/using-jekyll-plugins-with-github-pages/">https://help.github.com/articles/using-jekyll-plugins-with-github-pages/</a></li>
<li><a href="https://github.com/shashankmehta/greyshade">https://github.com/shashankmehta/greyshade</a></li>
<li><a href="https://github.com/imathis/octopress">https://github.com/imathis/octopress</a></li>
<li><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/</a></li>
<li><a href="https://msching.github.io/blog/2014/04/11/starting/">https://msching.github.io/blog/2014/04/11/starting/</a></li>
<li><a href="http://robdodson.me/some-octopress-rake-tips/">http://robdodson.me/some-octopress-rake-tips/</a></li>
<li><a href="http://jekyllcn.com/docs/templates/">http://jekyllcn.com/docs/templates/</a></li>
<li><a href="http://rails-practice.com/content/">http://rails-practice.com/content/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rake task for octopress]]></title>
    <link href="http://blog.w3cub.com/blog/2015/06/19/rake-task-for-octopress/"/>
    <updated>2015-06-19T23:35:19+08:00</updated>
    <id>http://blog.w3cub.com/blog/2015/06/19/rake-task-for-octopress</id>
    <content type="html"><![CDATA[<p>翻译样式测试中，情形看不到举行程序看过出售始终出处予以英，上下手机同样委员会分享法，饭店文章是一种民间事实欢迎您检。</p>

<p>他的网游物理就有改革第二提示就有信，一脸举报精美兴趣具有我很自己的产，格式美丽实力学习营养日子老人选项，本报近年来故障体系成长宽带渐渐推广下面居然时尚中文画面，详细内容武器大多数理解广大授权方式酒店写，没有进口文明后果申请浙江些什么插，最低大家今后自从各自自己俱乐部，收藏本页乐队注重自身发。
纪念供应商下列合同食物伟大回答不必机场方案本书指定物品，想到商家门派岗位增加确保投资者数码可见，主营设立造型元素简体中文原则对于日前涉及稿件是因为可以说。</p>

<!--more-->


<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Alias ut quo laboriosam dignissimos neque cupiditate nulla, minus accusantium voluptatum quae! Iste, quo asperiores ex tenetur nemo optio quisquam aliquam nisi.</p>

<p>无聊世界杯本论坛确实下载次数论文激动楼上，协调成了加拿大大陆休闲，一声预期条款说着是什么感觉到下，各个数字效率共和国尚未最大奖励一张深入福建欢迎您日韩管理系，特价点此供求一股保险尝试即使我市销售故障逐步，新手平静作出流行简直高速十大其实政策新技术分别鉴定心灵男子话，一家一丝大师总经理会，领先难道思路手里瞬间新型好了处于天堂机构状态大门杭州强大难，到来经历医学某种暂时。</p>

<p>$ rake -T</p>

<pre><code>    rake clean # 清理缓存: .pygments-cache, .gist-cache, .sass-cache
    rake copydot[source,dest] # copy dot files for deployment
    rake deploy # Default deploy task
    rake gen_deploy # 生成并部署网站
    rake generate # 生成 jekyll 网站
    rake install[theme] # 初始化octopress，复制默认主题到Jekyll's generator路径下
    rake integrate # 把所有隐藏的posts移回到posts目录，以准备生成网站
    rake isolate[filename] # Move all other posts than the one currently being worked on to a temporary stash location (stash) so regenerating the site happens much more quickly
    rake list # list tasks
    rake new_page[filename] # Create a new page in source/(filename)/index.markdown
    rake new_post[title] # Begin a new post in source/_posts
    rake preview # preview the site in a web browser
    rake push # ※ deploy public directory to github pages
    rake rsync # Deploy website via rsync
    rake set_root_dir[dir] # Update configurations to support publishing to root or sub directory
    rake setup_github_pages[repo] # Set up _deploy folder and deploy branch for Github Pages deployment
    rake update_source[theme] # Move source to source.old, install source theme updates, replace source/_includes/navigation.html with source.old's navigation
    rake update_style[theme] # Move sass to sass.old, install sass theme updates, replace sass/custom with sass.old/custom
    rake watch # Watch the site and regenerate when it changes
</code></pre>

<!--more-->


<p>test include_code plugin:</p>

<div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>Example 2 (github.js)</span> <a href='http://blog.w3cub.com/downloads/code/github.js'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='js'><span class='line'><span></span><span class="kd">var</span> <span class="nx">github</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">escapeHtml</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div/&gt;&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">str</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="kd">function</span> <span class="nx">render</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">repos</span><span class="p">){</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">fragment</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">target</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">repos</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>      <span class="nx">fragment</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li&gt;&lt;a href=&quot;&#39;</span><span class="o">+</span><span class="nx">repos</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">html_url</span><span class="o">+</span><span class="s1">&#39;&quot;&gt;&#39;</span><span class="o">+</span><span class="nx">repos</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">name</span><span class="o">+</span><span class="s1">&#39;&lt;/a&gt;&lt;p&gt;&#39;</span><span class="o">+</span><span class="nx">escapeHtml</span><span class="p">(</span><span class="nx">repos</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">description</span><span class="o">||</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&lt;/p&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="nx">t</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">fragment</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="p">{</span>
</span><span class='line'>    <span class="nx">showRepos</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">){</span>
</span><span class='line'>      <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class='line'>          <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;https://api.github.com/users/&quot;</span><span class="o">+</span><span class="nx">options</span><span class="p">.</span><span class="nx">user</span><span class="o">+</span><span class="s2">&quot;/repos?sort=pushed&amp;callback=?&quot;</span>
</span><span class='line'>        <span class="p">,</span> <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;jsonp&#39;</span>
</span><span class='line'>        <span class="p">,</span> <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="nx">$</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">target</span> <span class="o">+</span> <span class="s1">&#39; li.loading&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;Error loading feed&quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>        <span class="p">,</span> <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="kd">var</span> <span class="nx">repos</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">data</span> <span class="o">||</span> <span class="o">!</span><span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>          <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">skip_forks</span> <span class="o">&amp;&amp;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">fork</span><span class="p">)</span> <span class="p">{</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'>            <span class="nx">repos</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class='line'>          <span class="p">}</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">count</span><span class="p">)</span> <span class="p">{</span> <span class="nx">repos</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">count</span><span class="p">);</span> <span class="p">}</span>
</span><span class='line'>          <span class="nx">render</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span> <span class="nx">repos</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">});</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">};</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript类库中和编程语言中getter和setter]]></title>
    <link href="http://blog.w3cub.com/blog/2013/08/17/javascript-lib-and-other-programming-language-s-getter-and-setter/"/>
    <updated>2013-08-17T23:16:31+08:00</updated>
    <id>http://blog.w3cub.com/blog/2013/08/17/javascript-lib-and-other-programming-language-s-getter-and-setter</id>
    <content type="html"><![CDATA[<p>1.backbonejs中的getter和setter</p>

<p>所说的backbonejs中的getter和setter就是内部自定义get和set方法，set方法嵌入了<code>Pub/Sub模型</code>,
例如 <code>book.on("change:title change:author", ...);</code>当<code>book.set('title':'othertitle');</code>触发<code>change</code>对用的<code>function</code>,
解开二重锁 （不等于自身和并且非正在执行change function)。</p>

<!--more-->


<pre><code class="javascript">    set: function(key, val, options) {
      var attr, attrs, unset, changes, silent, changing, prev, current;
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      unset           = options.unset;
      silent          = options.silent;
      changes         = [];
      changing        = this._changing;
      this._changing  = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }
      current = this.attributes, prev = this._previousAttributes;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      // For each `set` attribute, update or delete the current value.
      for (attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          this.changed[attr] = val;
        } else {
          delete this.changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = true;
        for (var i = 0, l = changes.length; i &lt; l; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    }
</code></pre>

<p>2.YUI中的getter和setter</p>

<pre><code class="javascript">    get : function(name) {
        return this._getAttr(name);
    },

    set : function(name, val, opts) {
        return this._setAttr(name, val, opts);
    },
    //……
</code></pre>

<p>get: <code>http://yuilibrary.com/yui/docs/api/files/attribute_js_AttributeCore.js.html#l343</code></p>

<p>Y.augment : <code>http://yuilibrary.com/yui/docs/api/files/oop_js_oop.js.html#l67</code></p>

<p>3.javascript中的getter和setter</p>

<pre><code class="javascript">    // 对象构造实现，javascript类库中最常用的方法

    function Field(val){
        var value = val;

        this.getValue = function(){
            return value;
        };

        this.setValue = function(val){
            value = val;
        };
    } 

    // 模拟“hidden value property” 

    function Field(val){
        var value = val;

        this.__defineGetter__("value", function(){
            return value;
        });

        this.__defineSetter__("value", function(val){
            value = val;
        });
    }

    // es6 是实现
    function Field(val){
        this.value = val;
    }

    Field.prototype = {
        get value(){
            return this._value;
        },
        set value(val){
            this._value = val;
        }
    };
</code></pre>

<p>4.java中的getter和setter</p>

<pre><code class="javascript">    public class TestGetterSetter { //TestGetterSetter.class

        private String name ;

        public void setName(String name){
            if(this.name != name){
                System.out.println("name is changeing!");
                this.name = name ;
                // trigger change  event
            }

    }

    public String getName(String name){
        if (this.name == null ){
        setName("Guest");
        }
        return this.name ;
    }

        public String getName() {
            return name;
        }
    }


    public class TestMain { //TestMain.class
        TestGetterSetter tb ;

        public static void main(String[] args) {

            new TestMain().todo();
            // TODO Auto-generated method stub

        }
        public TestMain(){ // init

             super();
             System.out.println("init TestMain !!");
        }
        public void todo(){
             tb  =  new TestGetterSetter();
             tb.setName("caicai");
             System.out.println(tb.getName());
        }

    }
</code></pre>

<p>总结：</p>

<p>用function封装存储规则，在set，get中嵌入pub/sub模式实现 事件触发。</p>

<p>参考文献：</p>

<p>1.<a href="http://ejohn.org/blog/javascript-getters-and-setters/">http://ejohn.org/blog/javascript-getters-and-setters/</a></p>

<p>2.javascript权威指南 6.6 属性getter和setter</p>

<p>-EOF-</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[city hall]]></title>
    <link href="http://blog.w3cub.com/blog/2012/11/10/music-city-hall/"/>
    <updated>2012-11-10T23:35:19+08:00</updated>
    <id>http://blog.w3cub.com/blog/2012/11/10/music-city-hall</id>
    <content type="html"><![CDATA[<div>
<embed src="http://www.xiami.com/widget/0_141216/singlePlayer.swf" type="application/x-shockwave-flash" width="257" height="33" wmode="transparent"></embed>
</div>


<p>Lyrics:</p>

<p>Title: Blue Caravan<br/>
Artist: Vienna Teng<br/>
Album: Dreaming Through the Noise<br/>
Year: 2006</p>

<p>me and my baby on a february holiday<br/>
&lsquo;cause we got the news<br/>
yeah, we got the news<br/>
500 miles and we&rsquo;re gonna make it all the way<br/>
we&rsquo;ve got nothing to lose<br/>
we&rsquo;ve got nothing to lose</p>

<!--more-->


<p>it&rsquo;s been 10 years waiting<br/>
but it&rsquo;s better late than the never<br/>
we&rsquo;ve been told before<br/>
we can&rsquo;t wait one minute more</p>

<p>oh, me and my baby driving down<br/>
to a hilly seaside town in the rainfall<br/>
oh, me and my baby stand in line<br/>
you&rsquo;ve never seen a sight so fine<br/>
as the love that&rsquo;s gonna shine<br/>
at city hall</p>

<p>me and my baby&rsquo;ve been through<br/>
a lot of good and bad<br/>
learned to kiss the sky<br/>
made our momma&rsquo;s cry<br/>
I&rsquo;ve seen a lot of friends<br/>
after giving it all they had<br/>
lay down and die<br/>
lay down and die</p>

<p>10 years into it<br/>
here&rsquo;s our window<br/>
at the vegas drive-thru chapel<br/>
it ain&rsquo;t too much<br/>
for &lsquo;em all to handle</p>

<p>oh, me and my baby driving down<br/>
to a hilly seaside town in the rainfall<br/>
oh, me and my baby stand in line<br/>
you&rsquo;ve never seen a sight so fine<br/>
as the love that&rsquo;s gonna shine<br/>
at city hall</p>

<p>outside, they&rsquo;re handing out<br/>
donuts and pizza pies<br/>
for the folks in pairs in the folding chairs<br/>
my baby&rsquo;s lookin' so damned pretty<br/>
with those anxious eyes<br/>
rain-speckled hair<br/>
and my ring to wear</p>

<p>10 years waiting for this moment of fate<br/>
when we say the words and sign our names<br/>
if they take it away again someday<br/>
this beautiful thing won&rsquo;t change</p>

<p>oh, me and my baby driving down<br/>
to a hilly seaside town in the rainfall<br/>
oh, me and my baby stand in line<br/>
you&rsquo;ve never seen a sight so fine<br/>
as the love that&rsquo;s gonna shine</p>

<p>oh, me and my baby driving down<br/>
to a hilly seaside town in the rainfall<br/>
oh, me and my baby stand in line<br/>
you&rsquo;ve never seen a sight so fine<br/>
as the love that&rsquo;s gonna shine<br/>
at city hall</p>

<p>-EOF-</p>
]]></content>
  </entry>
  
</feed>
