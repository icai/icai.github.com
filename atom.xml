<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[泛前端开发]]></title>
  <link href="http://blog.w3cub.com/atom.xml" rel="self"/>
  <link href="http://blog.w3cub.com/"/>
  <updated>2020-05-22T01:24:06+00:00</updated>
  <id>http://blog.w3cub.com/</id>
  <author>
    <name><![CDATA[Terry Cai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[mysql function procedure trigger to generate serial number]]></title>
    <link href="http://blog.w3cub.com/blog/2020/03/24/mysql-function-procedure-to-generate-serial-number/"/>
    <updated>2020-03-24T14:27:44+00:00</updated>
    <id>http://blog.w3cub.com/blog/2020/03/24/mysql-function-procedure-to-generate-serial-number</id>
    <content type="html"><![CDATA[<p>Today, we show some useful mysql code about procedure, function and trigger.</p>

<h2 id="1-generate-serial-number-by-table-name-using-function">1. generate serial number by table name using <code>function</code></h2>

<p>rule: prefix + timestr + sequence number</p>

<!--more -->

<pre><code class="language-sql">
DROP function IF EXISTS nextNo;

delimiter ;; 

CREATE function nextNo(tableType char(20)) returns char(20) 
reads sql data
commit '表单号'
begin 
    declare prefix char(2);
    -- declare table_prefix char(3);
    -- set table_prefix = 'bs_';
    select prefix=
        case tableType
            when 'role' then 'ro'
        end

    declare timestr INT;

    SET timestr = round(date_format(now(),'%Y%m%d%H%m%s') * 1.72); 
    -- len 14

	declare lastval int; 
	select lastval = 
        case  tableType
            when 'role' then (select right(max(role_no), 4) from `bs_role`)
        end
	if lastval is null set lastval = prefix + '0001';
	return prefix + timestr + right('000' + convert(varchar(10),lastval + 1),4)
end
;;
delimiter ;


select nextNo('role');

</code></pre>

<h2 id="2-generate-sequence-number-using-procedure">2. generate sequence number using <code>procedure</code></h2>

<p>rule:  timestr + ordersn</p>

<pre><code class="language-sql">
DROP PROCEDURE IF EXISTS usp_seqnum;
delimiter ;; 
CREATE PROCEDURE usp_seqnum()
    reads sql data
    comment '序列号'
BEGIN
    -- 定义变量并获取相关值
    DECLARE v_cnt INT;
    DECLARE v_timestr INT;
    SET v_timestr = DATE_FORMAT(NOW(),'%Y%m%d');
    SELECT ROUND(RAND()*100,0)+1 INTO v_cnt;
    -- 新建表
    DROP TABLE IF EXISTS im_orderseq;
    CREATE TABLE  im_orderseq(
        timestr NVARCHAR(8) NOT NULL ,
        ordersn INT(3)
    );
    START TRANSACTION;
		-- 更新表的最值
		UPDATE im_orderseq SET ordersn = ordersn + v_cnt WHERE timestr = v_timestr;
		IF ROW_COUNT() = 0 THEN
			-- 插入数据
			INSERT INTO im_orderseq(timestr,ordersn) VALUES(v_timestr,v_cnt);
		END IF;
		SELECT CONCAT(v_timestr,LPAD(ordersn,7,0))AS ordersn
		FROM im_orderseq WHERE timestr = v_timestr;
    COMMIT;
END;
;; 
delimiter ;


CALL usp_seqnum();
SELECT * FROM im_orderseq;

</code></pre>

<h2 id="3-tree-data-using-function-or-procedure">3. tree data using <code>function</code> or <code>PROCEDURE</code></h2>

<p>first, initialize table structure and insert demo data.</p>

<pre><code class="language-sql">DROP TABLE IF EXISTS `tree_node`;
CREATE TABLE `tree_node`(
	`id` INT   COMMENT "登录日志ID"  ,
    `pid` INT NULL,
    `name` VARCHAR(5),
    `sort` INT NULL,
	PRIMARY KEY (`id`)
	
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='树形结构表';

insert into tree_node values(1,0,"A",0);
insert into tree_node values(7,0,"G",2);
insert into tree_node values(2,1,"B",3);
insert into tree_node values(3,1,"C",4);
insert into tree_node values(4,1,"D",5);
insert into tree_node values(5,4,"E",6);
insert into tree_node values(6,4,"F",7);

insert into tree_node values(8,7,"H",8);
insert into tree_node values(9,7,"I",9);
insert into tree_node values(10,7,"J",10);
insert into tree_node values(11,10,"K",11);
insert into tree_node values(12,10,"L",12);
insert into tree_node values(13,11,"M",13);
insert into tree_node values(14,11,"N",14);


</code></pre>

<p>get all the children ids by parent id</p>

<pre><code class="language-sql">DROP function IF EXISTS getTreeChild;
delimiter ;; 
CREATE function getTreeChild( rootid int) RETURNS VARCHAR(5000)
COMMENT '树形节点ID'  
reads sql data
BEGIN
	DECLARE sTemp VARCHAR(200);  
	DECLARE sTempChd VARCHAR(200);  
	SET sTemp = '$';
	SET sTempChd = cast(rootid as char);  
	WHILE sTempChd is not NULL DO  
		SET sTemp = concat(sTemp,',',sTempChd);  
		SELECT group_concat(id) INTO sTempChd FROM tree_node where find_in_set(pid,sTempChd)&gt;0;  
	END WHILE;  
	return sTemp;  
END
;;

delimiter ;  

-- -----------------------------------------

select getTreeChild(0)

</code></pre>

<p>get tree order data</p>

<pre><code class="language-sql">  
DROP PROCEDURE IF EXISTS `createChildLst`;  
delimiter ;;  
CREATE PROCEDURE `createChildLst`(IN pidin INT,IN nDepth INT)  
COMMENT '入口过程'  
BEGIN  
    DECLARE done INT DEFAULT 0;  
    DECLARE b INT;  
    DECLARE cur1 CURSOR FOR SELECT id FROM tree_node where pid=pidin order by sort;  
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1; 
      
    OPEN cur1;  
  
    FETCH cur1 INTO b;  
    INSERT INTO tmpLst VALUES (NULL,pidin,nDepth,done);  
      
    WHILE done=0 DO  
         CALL createChildLst(b,nDepth+1);  
         
         FETCH cur1 INTO b;  
           
    END WHILE;  
  
    CLOSE cur1;  
 END  
 ;;  
delimiter ;  
  
-- ----------------------------  
--  Procedure structure for `showChildLst`  
-- ----------------------------  
DROP PROCEDURE IF EXISTS `showChildLst`;  
delimiter ;;  
CREATE PROCEDURE `showChildLst`(IN pid INT)  
    COMMENT '递归过程'  
BEGIN  
    CREATE TEMPORARY TABLE IF NOT EXISTS tmpLst(sno int primary key auto_increment,id int,depth int,isLeaf int);  
    DELETE FROM tmpLst;  
  
    CALL createChildLst(pid,0);  
    select tmpLst.*,tree_node.* from tmpLst,tree_node where tmpLst.id=tree_node.id order by tmpLst.sno;  
END  
 ;;  
delimiter ;  

-- ----------------------------------------

set max_sp_recursion_depth=255;  
call showChildLst(1);  


</code></pre>

<h2 id="4-can-i-use-a-function-for-a-default-value-in-mysql">4. Can I use a function for a default value in MySql?</h2>

<p><a href="https://stackoverflow.com/questions/270309/can-i-use-a-function-for-a-default-value-in-mysql">question link</a></p>

<pre><code class="language-sql">create table app_users
(
    app_user_id smallint(6) not null auto_increment primary key,
    api_key     char(36) not null default uuid()
);

</code></pre>

<p>use <code>Trigger</code></p>

<pre><code class="language-sql">CREATE TRIGGER before_insert_app_users
BEFORE INSERT ON app_users
FOR EACH ROW
  IF new.api_key IS NULL
  THEN
    SET new.api_key = uuid();
  END IF;
</code></pre>
<p>You still have to update previously existing rows, like this:</p>

<pre><code class="language-sql">
UPDATE app_users SET api_key = (SELECT uuid());
</code></pre>

<h2 id="reference">Reference</h2>

<ul>
  <li><a href="https://stackoverflow.com/questions/270309/can-i-use-a-function-for-a-default-value-in-mysql">Can I use a function for a default value in MySql?</a></li>
  <li><a href="https://www.tutorialspoint.com/What-are-the-advantages-and-disadvantages-of-using-MySQL-stored-procedures">What are the advantages and disadvantages of using MySQL stored procedures?</a></li>
  <li><a href="https://dzone.com/articles/why-mysql-stored-procedures-functions-and-triggers">Why MySQL Stored Procedures, Functions, and Triggers Are Bad for Performance</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[group_concat scences to be used]]></title>
    <link href="http://blog.w3cub.com/blog/2020/03/13/group-concat-scences-to-be-used/"/>
    <updated>2020-03-13T07:44:47+00:00</updated>
    <id>http://blog.w3cub.com/blog/2020/03/13/group-concat-scences-to-be-used</id>
    <content type="html"><![CDATA[<p>group_concat 只能与groupby连用，分组查询常用场景</p>

<p>场景一：</p>

<p>用户角色关系， 用户表，角色表，用户角色表。 用户可以拥有多个角色。查询所有用户并附带出他们所属的角色。</p>

<p>场景二：</p>

<p>文章标签关系，文章表，标签表，文章标签关系表。查询所有文章并附带出他们所属的标签。</p>

<!--more -->

<p>下面以场景一举例</p>

<p>创建用户表</p>

<pre><code class="language-sql">CREATE TABLE `bs_user` (
  `id` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `user_name` varchar(20) NOT NULL,
  `password` varchar(32) NOT NULL,
  `name` varchar(40) NOT NULL,
  `mail` varchar(40) DEFAULT NULL,
  `tel` varchar(11) DEFAULT NULL,
  `sex` varchar(1) DEFAULT NULL,
  `birthday` date DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `modified_at` datetime NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
</code></pre>

<p>创建角色表</p>

<pre><code class="language-sql">CREATE TABLE `bs_role` (
  `role_id` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `role_name` varchar(10) NOT NULL,
  `description` varchar(100) DEFAULT NULL,
  `creator_id` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `created_at` datetime NOT NULL,
  `modified_id` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin DEFAULT NULL,
  `modified_at` datetime DEFAULT CURRENT_TIMESTAMP,
  `is_del` int(1) DEFAULT '0',
  PRIMARY KEY (`role_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
</code></pre>

<p>创建用户角色关系表</p>

<pre><code class="language-sql">CREATE TABLE `bs_user_role` (
  `user_id` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `role_id` char(36) CHARACTER SET utf8mb4 COLLATE utf8mb4_bin NOT NULL,
  `created_at` datetime NOT NULL,
  `modified_at` datetime NOT NULL,
  PRIMARY KEY (`user_id`,`role_id`),
  KEY `role_id` (`role_id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci
</code></pre>

<h2 id="查询所有用户并附带出他们所属的角色">查询所有用户并附带出他们所属的角色</h2>

<p>分解</p>

<ul>
  <li>查询 所有用户</li>
  <li>查询 所有用户角色</li>
  <li>联合</li>
</ul>

<pre><code class="language-sql">select a.id as user_id, a.user_name, a.name, 
    group_concat(s.role_id) AS role_id, 
    group_concat(s.role_name) AS role_name, 
    group_concat(s.description) AS description from bs_user a
left outer join (
	select  b.user_id user_id, b.role_id role_id, c.role_name role_name, c.description description from bs_user_role b  
	left  join bs_role c on b.role_id=c.role_id
 ) AS s on s.user_id = a.id
where a.is_del=0
group by user_id
order by created_at desc limit 0, 10;
</code></pre>

<p>结果</p>

<p><img src="http://blog.w3cub.com/assets/posts/mysql/group_concat-a2f9d87821e17b3df49f6bb5ccc7f9f17f8d9c46feb92c747456b56754d9f64c.png" alt="Result" /></p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[浅谈服务端渲染(SSR)的几种形式]]></title>
    <link href="http://blog.w3cub.com/blog/2019/07/01/ssr-types/"/>
    <updated>2019-07-01T08:48:43+00:00</updated>
    <id>http://blog.w3cub.com/blog/2019/07/01/ssr-types</id>
    <content type="html"><![CDATA[<p>在好久好久之前，前端的概念是模糊的。前端就是页面仔，切图仔。前端的任务就是把html跟js写好，然后丢给后端套数据。基本传统的MVC，smarty View。</p>
<pre><code>assign-&gt;('data', $data)
</code></pre>
<p>这些也给后端做了。或者前端就丢给UI（美工）做，前端是不存在的。</p>

<!--more -->

<p>[[back] -&gt;[view]]-&gt; [front end]</p>

<p>但是随着移动端的兴起，开始流行前后分离。</p>

<p>后端渲染模版的这一层就给省略掉了.<br />
变成前后分离。其实所谓的后端渲染，也就是渲染首屏幕。<br />
[back] -&gt;-&gt; [front and view]</p>

<p>但是又因为前后分离对搜索引擎爬虫不太友好。想当年，做网站的人都十分在意一个东西，就是Alexa排名，后者国内的百度排名，cnzz排名等等。毕竟那个时候风头的人都会看一下你的网站alexa是多少。其实这种指标就是反应了一个网站的活跃度。不如说，你说你的网站有几百万用户，但是别人查了一下这种排名，尽然几千万，搜索引擎收录几乎没有。这样做你认为会有信服力吗？</p>

<p>当然SEO需求大部分面向C端的。<strong>面向后台管理系统</strong>的当然就没有那么在乎了。</p>

<p>为了解决SPA  bad SEO 问题。例如后台服务器拦截拦截特定爬虫进行SEO hack，批量提交Sitemap 等等的手段。简单的说，你想告诉搜索引擎链接，然后爬虫跳进来，进行相应的SEO hack 投食时渲染。</p>

<p><strong>我们把这种形式叫做 前后分离 + 后端辅助（SPA hack回滚）。</strong></p>

<p>但是随着node，babel的快速发展，浏览器快速迭代，前端工作天天调试兼容的时代过去了。变成了后端服务器 + 前端服务器这种架构。[back server] -&gt;-&gt; [[view-server]front server]。<br />
前端的地位重要多了。同构这个概念于是被提出了。当时前端们就设想 <strong>后端渲染跟前端异步渲染可以重用</strong>。比如一个循环的列表，里面的item 模版可以被前端重用。到后来，随着 react vue 等框架开始流行，nextjs诞生了。这个阶段，主要是SPA的改进。node服务器把SEO需要的功能都做了。<br />
既然node可以写server层，那么为什么不可以后端也用node呢。当然这用什么语言写后端，并不影响前端。</p>

<p><strong>我们把这个形式称做，SPA + SSR前端渲染。</strong></p>

<p>既然可以SSR前端渲染，为什么不可以后端渲染呢！当然服务器的权利就只剩下了 node。<br />
又开始 后端的 Route -&gt; Controller -&gt; Model-&gt; View.<br />
这时候的 View 就变成了react 或者 vue. 其实就把当年的后端模版替换成了 前端框架模版，model输出的数据就变成 View的prop或者data 变量。</p>

<p><strong>我们把这种形式称为  SSR后端渲染。</strong></p>

<p>到头来，你会发现，走了一圈，又回到了原点。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript混淆与解混淆的那些事儿]]></title>
    <link href="http://blog.w3cub.com/blog/2019/04/01/js-confusion/"/>
    <updated>2019-04-01T05:48:43+00:00</updated>
    <id>http://blog.w3cub.com/blog/2019/04/01/js-confusion</id>
    <content type="html"><![CDATA[<p>像软件加密与解密一样，javascript的混淆与解混淆同属于同一个范畴。道高一尺，魔高一丈。没有永恒的黑，也没有永恒的白。一切都是资本市场驱动行为，现在都流行你能为人解决什么问题，这个概念。那么市场究竟能容纳多少个能解决这种问题的利益者。JS没有秘密。</p>

<p>其实本人不赞成javascript进行hash混淆处理，一拖慢运行时速度，二体积大。JS代码前端可获取，天生赋予“开源”属性，都可以在chrome devTools下查看。JS非压缩性混淆完全违法前端优化准则。</p>

<!-- more -->

<p>目前网络上可以搜索的JS混淆工具不外乎以下几种：</p>

<p><a href="http://blog.w3cub.com/tools/jspacker/">eval混淆</a>，也是最早JS出现的混淆加密，据说第一天就被破解，修改一下代码，alert一下就可以破解了。这种方法从出生的那天就失去了意义。其实JS加密（混淆）是相对于可读性而言的，其实真正有意义的就是压缩型混淆uglify这一类，即可减少体重，也可减少可读性。</p>

<p>但是，也不能排除部分商业源代码使用hash类型混淆源代码，比如 miniui 使用的<a href="https://sourceforge.net/projects/jsintegration/files/tools/_%20JSA-20071021/">JSA加密</a>, fundebug使用的<a href="https://obfuscator.io/">javascript-obfuscator</a>。</p>

<p>下面通过代码来说明 JSA加密 和 javascript-obfuscator 的区别：</p>

<p>要混淆的代码：</p>

<pre><code class="language-js">function logG(message) {
  console.log('\x1b[32m%s\x1b[0m', message); 
}
function logR(message) {
  console.log('\x1b[41m%s\x1b[0m', message); 
}
logG('logR');
logR('logG');

</code></pre>

<p>通过<a href="https://sourceforge.net/projects/jsintegration/files/tools/_%20JSA-20071021/">JSA加密</a>混淆后生成的代码</p>

<pre><code>function o00($){console.log("\x1b[32m%s\x1b[0m",$)}function o01($){console.log("\x1b[41m%s\x1b[0m",$)}o00("logR");o01("logG")

</code></pre>
<p>然后再<a href="https://beautifier.io/">beautifier</a>一下：</p>

<pre><code class="language-js">function o00($) {
  console.log("\x1b[32m%s\x1b[0m", $)
}

function o01($) {
  console.log("\x1b[41m%s\x1b[0m", $)
}
o00("logR");
o01("logG")

</code></pre>

<p>可以发现，其实没有做什么什么修改，只是做了一些变量替换。想还原也比较简单的。这里就不拿它来做代表，也没有什么人用。</p>

<p>通过<a href="https://obfuscator.io/">javascript-obfuscator</a>混淆后生成的代码</p>

<pre><code class="language-js">var _0xd6ac=['[41m%s[0m','logG','log'];(function(_0x203a66,_0x6dd4f4){var _0x3c5c81=function(_0x4f427c){while(--_0x4f427c){_0x203a66['push'](_0x203a66['shift']());}};_0x3c5c81(++_0x6dd4f4);}(_0xd6ac,0x6e));var _0x5b26=function(_0x2d8f05,_0x4b81bb){_0x2d8f05=_0x2d8f05-0x0;var _0x4d74cb=_0xd6ac[_0x2d8f05];return _0x4d74cb;};function logG(_0x4f1daa){console[_0x5b26('0x0')]('[32m%s[0m',_0x4f1daa);}function logR(_0x38b325){console[_0x5b26('0x0')](_0x5b26('0x1'),_0x38b325);}logG('logR');logR(_0x5b26('0x2'));

</code></pre>

<p>再<a href="https://beautifier.io/">beautifier</a>一下：</p>

<pre><code class="language-js">var _0xd6ac = ['[41m%s[0m', 'logG', 'log'];
(function(_0x203a66, _0x6dd4f4) {
  var _0x3c5c81 = function(_0x4f427c) {
    while (--_0x4f427c) {
      _0x203a66['push'](_0x203a66['shift']());
    }
  };
  _0x3c5c81(++_0x6dd4f4);
}(_0xd6ac, 0x6e));
var _0x5b26 = function(_0x2d8f05, _0x4b81bb) {
  _0x2d8f05 = _0x2d8f05 - 0x0;
  var _0x4d74cb = _0xd6ac[_0x2d8f05];
  return _0x4d74cb;
};

function logG(_0x4f1daa) {
  console[_0x5b26('0x0')]('[32m%s[0m', _0x4f1daa);
}

function logR(_0x38b325) {
  console[_0x5b26('0x0')](_0x5b26('0x1'), _0x38b325);
}
logG('logR');
logR(_0x5b26('0x2'));
</code></pre>

<p>这个复杂得多，但是分析一下你会发现，其实多了一个字典，所有方法变量，都有可能存在字典中，调用时先调用字典还原方法名变量再执行。<br />
其实入口都是变量的规则。</p>

<p>字典函数：</p>

<pre><code class="language-js">var _0xd6ac = ['[41m%s[0m', 'logG', 'log'];
(function(_0x203a66, _0x6dd4f4) {
  var _0x3c5c81 = function(_0x4f427c) {
    while (--_0x4f427c) {
      _0x203a66['push'](_0x203a66['shift']());
    }
  };
  _0x3c5c81(++_0x6dd4f4);
}(_0xd6ac, 0x6e));
var _0x5b26 = function(_0x2d8f05, _0x4b81bb) {
  _0x2d8f05 = _0x2d8f05 - 0x0;
  var _0x4d74cb = _0xd6ac[_0x2d8f05];
  return _0x4d74cb;
};

</code></pre>

<p>通过以上发现，我们可以把JS混淆归结为三类，分别是 eval类型，hash类型，压缩类型。而压缩类型，是目前前端性能优化的常用工具，以<a href="https://www.npmjs.com/package/uglify-js">uglify</a>为代表。</p>

<p>常用的前端压缩优化工具：</p>

<p>JavaScript:</p>
<ul>
  <li><a href="https://github.com/babel/minify">babel-minify</a></li>
  <li><a href="https://github.com/terser-js/terser">terser</a></li>
  <li><a href="https://github.com/mishoo/UglifyJS2">uglify-js</a></li>
  <li><a href="https://github.com/mishoo/UglifyJS2/tree/harmony">uglify-es</a></li>
  <li><a href="https://www.npmjs.com/package/google-closure-compiler">Google Closure Compiler</a></li>
  <li><a href="http://yui.github.io/yuicompressor/">YUI Compressor</a></li>
</ul>

<p>CSS:</p>
<ul>
  <li><a href="https://github.com/postcss/postcss">PostCSS</a></li>
  <li><a href="https://github.com/jakubpawlowicz/clean-css">clean-css</a></li>
  <li><a href="https://github.com/css/csso">CSSO</a></li>
  <li><a href="http://yui.github.io/yuicompressor/">YUI Compressor</a></li>
</ul>

<p>HTML:</p>
<ul>
  <li><a href="https://www.npmjs.com/package/html-minifier">html-minifier</a></li>
</ul>

<p>从工具流(workflow) 来看，不论是 webpack 还是 gulp ，目前javascript最流行工具还是uglify。</p>

<p>相应的解混淆工具：</p>

<ul>
  <li>
    <p>eval对应的解混淆工具, 随便百度都可以搜索到，如<a href="http://blog.w3cub.com/tools/jspacker/">jspacker</a></p>
  </li>
  <li>
    <p>JSA对应的解混淆工具<a href="https://github.com/jscck/unjsa">unjsa</a></p>
  </li>
  <li>
    <p><a href="https://obfuscator.io/">javascript-obfuscator</a>对应的解混淆工具<a href="https://github.com/jscck/crack.js">crack.js</a></p>
  </li>
  <li>
    <p>压缩类型uglify对应的工具<a href="https://github.com/eth-sri/UnuglifyJS">UnuglifyJS</a>，在线版<a href="http://www.jsnice.org/">jsnice</a></p>
  </li>
</ul>

<p>解混淆策略其实是依据生成代码规律编写，不外乎观察特征分析，再观察特征分析，不断调整。都是手办眼见功夫。</p>

<p>都没有什么难度可言，有的就是耐性。比如<a href="https://obfuscator.io/">javascript-obfuscator</a>对应的解混淆工具可以<br />
分解为N因子问题：</p>

<p>如何查询function的作用域？<br />
预执行变量替换可能存在类型？<br />
…</p>

<p>如：</p>

<pre><code class="language-js">var _0xd6ac = ['[41m%s[0m', 'logG', 'log'];
(function(_0x203a66, _0x6dd4f4) {
  var _0x3c5c81 = function(_0x4f427c) {
    while (--_0x4f427c) {
      _0x203a66['push'](_0x203a66['shift']());
    }
  };
  _0x3c5c81(++_0x6dd4f4);
}(_0xd6ac, 0x6e));
var _0x5b26 = function(_0x2d8f05, _0x4b81bb) {
  _0x2d8f05 = _0x2d8f05 - 0x0;
  var _0x4d74cb = _0xd6ac[_0x2d8f05];
  return _0x4d74cb;
};

function logG(_0x4f1daa) {
  console[_0x5b26('0x0')]('[32m%s[0m', _0x4f1daa);
}

function logR(_0x38b325) {
  console[_0x5b26('0x0')](_0x5b26('0x1'), _0x38b325);
}
logG('logR');
logR(_0x5b26('0x2'));
</code></pre>

<p>要还原成</p>

<pre><code class="language-js">function logG(message) {
  console.log('\x1b[32m%s\x1b[0m', message); 
}
function logR(message) {
  console.log('\x1b[41m%s\x1b[0m', message); 
}
logG('logR');
logR('logG');

</code></pre>
<p>第一步你总得知道字典函数，然后执行字典函数 <code>_0x5b26('0x0')</code> 还原成 <code>log</code>.</p>

<p>那么就好办了，写代码的事。<br />
如 https://github.com/jscck/crack.js/blob/master/crack.js</p>

<p>还原后，如何重构代码，那么你还得知道代码生成之前是通过什么工具打包的webpack? 还是？</p>

<p>如webpack 的各种封装头和尾<br />
https://webpack.js.org/configuration/output/#expose-a-variable</p>

<pre><code class="language-js">(function webpackUniversalModuleDefinition(root, factory) {
  if(typeof exports === 'object' &amp;&amp; typeof module === 'object')
    module.exports = factory();
  else if(typeof define === 'function' &amp;&amp; define.amd)
    define([], factory);
  else if(typeof exports === 'object')
    exports['MyLibrary'] = factory();
  else
    root['MyLibrary'] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
  return _entry_return_;
});
</code></pre>

<p>假如再深入一点，可能会涉及到JS语法解释器, AST抽象语法树</p>

<p>目前涉及到 JS语法解释器, AST抽象语法树的功能如下：</p>

<p><a href="https://prepack.io/">prepack</a>, <a href="http://esprima.org/">esprima</a>, <a href="https://babeljs.io/">babel</a></p>

<p>或者可以阅读《编程语言实现模式》，涉及到 <a href="https://github.com/antlr/antlr4">antlr4</a>。</p>

<p>当然也可以通过esprima等工具来做解混淆，只是工作量大一点，值不值的问题。</p>

<p>对于未来，JS商业源码加密的方向可能<a href="https://webassembly.org/">webassembly</a>，先在服务端编译成wasm，源码就能真正的闭源。</p>

<p>有人的地方就有路，有混淆的地方就有解混淆，目前机器学习编程响应的解混淆工具也做的相当出色，比如</p>

<p><a href="16"><img src="https://www.sri.inf.ethz.ch/assets/images/sri-logo.svg" alt="Secure, Reliable, and Intelligent Systems Lab" width="136" /></a></p>

<p>Machine Learning for Programming 产品<br />
<a href="17">nice2predict</a>，<a href="9">jsnice</a> …<br />
查看 https://www.sri.inf.ethz.ch/research/plml</p>

<h2 id="拓展参考">拓展参考</h2>

<h3 id="ast抽象语法树">AST抽象语法树</h3>

<p>为什么额外说一下AST抽象语法树，因为你可以 input-&gt; ast -&gt; output Anything。</p>

<p>比如你jsx转换小程序模版语法，这样你就可以用react语法来写小程序，如Taro。<br />
mpvue, wepy, postcss …… 这些都是通过AST进行构建转换的工具，es6 -&gt; es5, babel 都是使用AST。</p>

<p>AST抽象语法树大致流程：</p>

<p>Input 生成 AST tree</p>

<p>然后通过AST类型断言进行相应的转换</p>

<p>http://esprima.org/demo/parse.html</p>

<h3 id="反编译工具全集">反编译工具全集</h3>

<p>小程序</p>

<p>https://github.com/qwerty472123/wxappUnpacker</p>

<p><code>推荐.Net、C# 逆向反编译四大工具利器</code></p>

<p>https://www.cnblogs.com/ldc218/p/8945892.html</p>

<p>2018年支持java8的Java反编译工具汇总<br />
https://blog.csdn.net/yannqi/article/details/80847354</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Docker Compose入门]]></title>
    <link href="http://blog.w3cub.com/blog/2018/12/23/docker-compose-gettingstarted/"/>
    <updated>2018-12-23T05:48:43+00:00</updated>
    <id>http://blog.w3cub.com/blog/2018/12/23/docker-compose-gettingstarted</id>
    <content type="html"><![CDATA[<pre><code>预计阅读时间：10分钟
</code></pre>

<p>在此页面上，您将构建一个在Docker Compose上运行的简单Python Web应用程序。该应用程序使用Flask框架并在Redis中维护一个命中计数器。虽然该示例使用Python，但即使您不熟悉它，此处演示的概念也应该是可以理解的。</p>

<h2 id="预先准备">预先准备</h2>

<p>确保您已经安装了 <a href="https://docs.docker.com/install/">Docker Engine</a> 和 <a href="https://docs.docker.com/compose/install/">Docker Compose</a>. 您不需要安装Python或Redis，因为两者都是由Docker镜像提供的。</p>

<!-- more -->

<h2 id="第一步-setup">第一步: Setup</h2>

<p>定义应用程序依赖(dependencies).</p>

<ol>
  <li>
    <p>为项目创建一个目录:</p>

    <pre><code>$ mkdir composetest
$ cd composetest
</code></pre>
  </li>
  <li>
    <p>在项目目录中创建一个名为<code>app.py</code>的文件并粘贴如下:</p>
  </li>
</ol>

<pre><code class="language-python">import time

import redis
from flask import Flask

app = Flask(__name__)
cache = redis.Redis(host='redis', port=6379)

def get_hit_count():
    retries = 5
    while True:
        try:
            return cache.incr('hits')
        except redis.exceptions.ConnectionError as exc:
            if retries == 0:
                raise exc
            retries -= 1
            time.sleep(0.5)

@app.route('/')
def hello():
    count = get_hit_count()
    return 'Hello World! I have been seen {} times.\n'.format(count)

if __name__ == "__main__":
    app.run(host="0.0.0.0", debug=True)
</code></pre>

<p>In this example, <code>redis</code> is the hostname of the redis container on the application’s network. We use the default port for Redis, <code>6379</code>.</p>

<blockquote>
  <p>Handling transient errors</p>

  <p>Note the way the <code>get_hit_count</code> function is written. This basic retry loop lets us attempt our request multiple times if the redis service is not available. This is useful at startup while the application comes online, but also makes our application more resilient if the Redis service needs to be restarted anytime during the app’s lifetime. In a cluster, this also helps handling momentary connection drops between nodes.</p>
</blockquote>

<ol>
  <li>
    <p>在项目目录中创建另一个名为<code>requirements.txt</code>的文件并粘贴如下:</p>

    <pre><code>flask
redis
</code></pre>
  </li>
</ol>

<h2 id="第二步-创建一个dockerfile">第二步: 创建一个Dockerfile</h2>

<p>在此步骤中，您将编写一个构建包含Python应用程序所需的所有依赖项，包括Python本身的Docker镜像的Dockerfile。</p>

<p>在项目目录中，创建一个名为<code>Dockerfile</code>的文件并粘贴以下内容：</p>

<pre><code>FROM python:3.4-alpine
ADD . /code
WORKDIR /code
RUN pip install -r requirements.txt
CMD ["python", "app.py"]
</code></pre>

<p>这里告诉Docker要做什么:</p>

<ul>
  <li>Build an image starting with the Python 3.4 image.</li>
  <li>Add the current directory <code>.</code> into the path <code>/code</code> in the image.</li>
  <li>Set the working directory to <code>/code</code>.</li>
  <li>Install the Python dependencies.</li>
  <li>Set the default command for the container to <code>python app.py</code>.</li>
</ul>

<p>更多关于如何编写Dockerfiles的信息，请查看 <a href="https://docs.docker.com/engine/tutorials/dockerimages/#building-an-image-from-a-dockerfile">Docker user guide</a> 和 <a href="https://docs.docker.com/engine/reference/builder/">Dockerfile reference</a>.</p>

<h2 id="第三步-在compose文件中定义服务">第三步: 在Compose文件中定义服务</h2>

<p>在项目目录中创建一个名为<code>docker-compose.yml</code>的文件并粘贴以下内容:</p>
<pre><code class="language-yaml">version: '3'
services:
  web:
    build: .
    ports:
     - "5000:5000"
  redis:
    image: "redis:alpine"

</code></pre>

<p>这Compose文件定义了两个服务, <code>web</code> and <code>redis</code>. The <code>web</code> service:</p>

<ul>
  <li>Uses an image that’s built from the <code>Dockerfile</code> in the current directory.</li>
  <li>Forwards the exposed port 5000 on the container to port 5000 on the host machine. We use the default port for the Flask web server, <code>5000</code>.</li>
</ul>

<p>The <code>redis</code> service uses a public <a href="https://registry.hub.docker.com/_/redis/">Redis</a> image pulled from the Docker Hub registry.</p>

<h2 id="第四步-使用compose构建和运行您的应用程序">第四步: 使用Compose构建和运行您的应用程序</h2>

<ol>
  <li>从项目目录中，运行<code>docker-compose up</code>启动应用程序.</li>
</ol>

<pre><code class="language-bash">$ docker-compose up
Creating network "composetest_default" with the default driver
Creating composetest_web_1 ...
Creating composetest_redis_1 ...
Creating composetest_web_1
Creating composetest_redis_1 ... done
Attaching to composetest_web_1, composetest_redis_1
web_1    |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)
redis_1  | 1:C 17 Aug 22:11:10.480 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
redis_1  | 1:C 17 Aug 22:11:10.480 # Redis version=4.0.1, bits=64, commit=00000000, modified=0, pid=1, just started
redis_1  | 1:C 17 Aug 22:11:10.480 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf
web_1    |  * Restarting with stat
redis_1  | 1:M 17 Aug 22:11:10.483 * Running mode=standalone, port=6379.
redis_1  | 1:M 17 Aug 22:11:10.483 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.
web_1    |  * Debugger is active!
redis_1  | 1:M 17 Aug 22:11:10.483 # Server initialized
redis_1  | 1:M 17 Aug 22:11:10.483 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.
web_1    |  * Debugger PIN: 330-787-903
redis_1  | 1:M 17 Aug 22:11:10.483 * Ready to accept connections
</code></pre>

<p>Compose拉取Redis镜像，为您的代码构建镜像，并启动您定义的服务。 在这种情况下，代码在构建时静态复制到映像中。</p>

<ol>
  <li>
    <p>在浏览器输入 <code>http://0.0.0.0:5000/</code> 查看应用运行情况.</p>

    <p>If you’re using Docker natively on Linux, Docker for Mac, or Docker for Windows, then the web app should now be listening on port 5000 on your Docker daemon host. Point your web browser to <code>http://localhost:5000</code> to find the <code>Hello World</code>message. If this doesn’t resolve, you can also try <code>http://0.0.0.0:5000</code>.</p>

    <p>If you’re using Docker Machine on a Mac or Windows, use <code>docker-machine ip MACHINE_VM</code> to get the IP address of your Docker host. Then, open <code>http://MACHINE_VM_IP:5000</code> in a browser.</p>

    <p>You should see a message in your browser saying:</p>

    <pre><code>Hello World! I have been seen 1 times.
</code></pre>

    <p><img src="https://docs.docker.com/compose/images/quick-hello-world-1.png" alt="hello world in browser" /></p>
  </li>
  <li>
    <p>刷新网页.</p>

    <p>The number should increment.</p>

    <pre><code>Hello World! I have been seen 2 times.
</code></pre>

    <p><img src="https://docs.docker.com/compose/images/quick-hello-world-2.png" alt="hello world in browser" /></p>
  </li>
  <li>
    <p>切换到另一个终端窗口，然后键入<code>docker image ls</code>列出本地镜像.</p>

    <p>Listing images at this point should return <code>redis</code> and <code>web</code>.</p>

    <pre><code>$ docker image ls
REPOSITORY              TAG                 IMAGE ID            CREATED             SIZE
composetest_web         latest              e2c21aa48cc1        4 minutes ago       93.8MB
python                  3.4-alpine          84e6077c7ab6        7 days ago          82.5MB
redis                   alpine              9d8fa9aa0e5b        3 weeks ago         27.5MB
</code></pre>

    <p>You can inspect images with <code>docker inspect &lt;tag or id&gt;</code>.</p>
  </li>
  <li>
    <p>通过在另一个终端在项目目录中运行<code>docker-compose down</code>, 或者在启动应用程序的终端中按CTRL + C 来停止应用程序.</p>
  </li>
</ol>

<h2 id="第五步-编辑compose文件以添加绑定装载">第五步: 编辑Compose文件以添加绑定装载</h2>

<p>编辑项目目录中的<code>docker-compose.yml</code>为<code>web</code>服务添加 <a href="https://docs.docker.com/engine/admin/volumes/bind-mounts/">bind mount</a> :</p>
<pre><code class="language-yaml">version: '3'
services:
  web:
    build: .
    ports:
     - "5000:5000"
    volumes:
     - .:/code
  redis:
    image: "redis:alpine"

</code></pre>
<p>The new <code>volumes</code> key 把项目目录（当前目录）挂载到容器内的<code>/ code</code>允许您动态修改代码，而无需重建映像</p>

<h2 id="第六步-使用compose-re-build并运行应用程序">第六步: 使用Compose Re-build并运行应用程序</h2>

<p>在项目目录中，键入<code>docker-compose up</code>以使用更新的Compose文件构建应用程序，然后运行它。</p>
<pre><code class="language-bash">$ docker-compose up
Creating network "composetest_default" with the default driver
Creating composetest_web_1 ...
Creating composetest_redis_1 ...
Creating composetest_web_1
Creating composetest_redis_1 ... done
Attaching to composetest_web_1, composetest_redis_1
web_1    |  * Running on http://0.0.0.0:5000/ (Press CTRL+C to quit)
...
</code></pre>

<p>Check the <code>Hello World</code> message in a web browser again, and refresh to see the count increment.</p>

<blockquote>
  <p>Shared folders, volumes, and bind mounts</p>

  <ul>
    <li>
      <p>If your project is outside of the <code>Users</code> directory (<code>cd ~</code>), then you need to share the drive or location of the Dockerfile and volume you are using. If you get runtime errors indicating an application file is not found, a volume mount is denied, or a service cannot start, try enabling file or drive sharing. Volume mounting requires shared drives for projects that live outside of <code>C:\Users</code> (Windows) or <code>/Users</code> (Mac), and is required for <em>any</em> project on Docker for Windows that uses <a href="https://docs.docker.com/docker-for-windows/#switch-between-windows-and-linux-containers-beta-feature">Linux containers</a>. For more information, see <a href="https://docs.docker.com/docker-for-windows/#shared-drives">Shared Drives</a> on Docker for Windows, <a href="https://docs.docker.com/docker-for-mac/#file-sharing">File sharing</a> on Docker for Mac, and the general examples on how to <a href="https://docs.docker.com/engine/tutorials/dockervolumes/">Manage data in containers</a>.</p>
    </li>
    <li>
      <p>If you are using Oracle VirtualBox on an older Windows OS, you might encounter an issue with shared folders as described in this <a href="https://www.virtualbox.org/ticket/14920">VB trouble ticket</a>. Newer Windows systems meet the requirements for <a href="https://docs.docker.com/docker-for-windows/install/">Docker for Windows</a> and do not need VirtualBox.</p>
    </li>
  </ul>
</blockquote>

<h2 id="第七步-更新应用程序">第七步: 更新应用程序</h2>

<p>由于应用程序代码现在使用卷安装到容器中，因此您可以更改其代码并立即查看更改，而无需重建映像.</p>

<ol>
  <li>
    <p>Change the greeting in <code>app.py</code> and save it. For example, change the <code>Hello World!</code> message to <code>Hello from Docker!</code>:</p>

    <pre><code>return 'Hello from Docker! I have been seen {} times.\n'.format(count)
</code></pre>
  </li>
  <li>
    <p>Refresh the app in your browser. The greeting should be updated, and the counter should still be incrementing.</p>

    <p><img src="https://docs.docker.com/compose/images/quick-hello-world-3.png" alt="hello world in browser" /></p>
  </li>
</ol>

<h2 id="第八步-尝试一些其他命令">第八步: 尝试一些其他命令</h2>

<p>如果你想在后台运行你的服务, 你可以在<code>docker-compose up</code>命令后面添加 <code>-d</code> (for “detached” mode)，使用<code>docker-compose ps</code>查看当前正在运行的内容:</p>

<pre><code class="language-bash">$ docker-compose up -d
Starting composetest_redis_1...
Starting composetest_web_1...

$ docker-compose ps
Name                 Command            State       Ports
-------------------------------------------------------------------
composetest_redis_1   /usr/local/bin/run         Up
composetest_web_1     /bin/sh -c python app.py   Up      5000-&gt;5000/tcp
</code></pre>

<p><code>docker-compose run</code>命令允许您为服务运行一次性命令。例如，查看<code>web</code>服务可用的环境变量:</p>

<pre><code>$ docker-compose run web env
</code></pre>

<p>可以通过<code>docker-compose --help</code>查看更多其他可用命令  . 您还可以为bash和zsh shell安装 <a href="https://docs.docker.com/compose/completion/">command completion</a>,以查看可用的命令.</p>

<p>如果您使用<code>docker-compose up -d</code>启动Compose，请在完成后停止服务:</p>

<pre><code>$ docker-compose stop
</code></pre>

<p>您可以使用<code>down</code>命令将所有内容放下，完全删除容器. 传递<code>--volumes</code>也可以删除Redis容器使用的数据挂载:</p>

<pre><code>$ docker-compose down --volumes
</code></pre>

<p>到这里, 您已经了解了Compose如何工作的基础知识.</p>

<h2 id="接下来">接下来</h2>

<ul>
  <li>Next, try the quick start guide for <a href="https://docs.docker.com/compose/django/">Django</a>, <a href="https://docs.docker.com/compose/rails/">Rails</a>, or <a href="https://docs.docker.com/samples/library/wordpress/">WordPress</a></li>
  <li><a href="https://docs.docker.com/compose/reference/">Explore the full list of Compose commands</a></li>
  <li><a href="https://docs.docker.com/compose/compose-file/">Compose configuration file reference</a></li>
  <li>
    <p>To learn more about volumes and bind mounts, see <a href="https://docs.docker.com/engine/admin/volumes/">Manage data in Docker</a></p>

    <p>documentation, docs, docker, compose, orchestration, containers</p>
  </li>
</ul>

<hr />

<p>Terry edit on <a href="http://markdown.w3cub.com/">markdown编辑</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[前端面试题之他们想问什么？]]></title>
    <link href="http://blog.w3cub.com/blog/2018/09/19/front-end-interview-questions-what-do-you-want-to-ask/"/>
    <updated>2018-09-19T14:55:43+00:00</updated>
    <id>http://blog.w3cub.com/blog/2018/09/19/front-end-interview-questions--what-do-you-want-to-ask</id>
    <content type="html"><![CDATA[<p>最近在找工作遇到很多奇葩的面试问题？怎么说呢，就是比较书面性的，比较学术性的问题？<br />
今天大家分享一下吧，我们来分析一下究竟这些问题究竟在问什么？跟最终像表达的是什么？<br />
对于面试题，真是千秋各异，有些公司喜欢问原理，有些公司不管原理什么的，直接那个API怎么怎么用！</p>

<!-- more -->

<p>回归正题吧!</p>

<h2 id="1浏览器输入url后都干了些什么">1、浏览器输入url后都干了些什么?</h2>

<p>你只会答：建立请求，接收数据，dom渲染等。那么百度一下别人是怎么写？<br />
其实也差不多只是分解的很细，按我的理解说一下吧</p>

<p>1） 如何建立请求？引申出来的HTTP协议的理解了？<br />
那么HTTP协议如何工作？</p>

<p>一个基本HTTP系统有什么组件构成？</p>

<p><img width="418" alt="default" src="https://user-images.githubusercontent.com/1061012/45764276-f4866500-bc64-11e8-9825-49c9ac0efa2d.png" /></p>

<p>过程是怎么样的？</p>

<p>[client/request] –[Proxy] – [Proxy] – [Proxy]– [Server/response]</p>

<p>其中Proxies中可以进行如下操作：</p>

<ul>
  <li>caching (the cache can be public or private, like the browser cache)</li>
  <li>filtering (like an antivirus scan, parental controls, …)</li>
  <li>load balancing (to allow multiple servers to serve the different requests)</li>
  <li>authentication (to control access to different resources)</li>
  <li>logging (allowing the storage of historical information)</li>
</ul>

<p>HTTP大致的流程：</p>

<p>1、Open a TCP connection (建立TCP链接)</p>

<p>2、Send an HTTP message （发送HTTP消息）</p>

<p>3、Read the response sent by the server （读取服务器响应信息）</p>

<p>4、Close or reuse the connection for further requests.（关闭或者重用链接）</p>

<p><a href="https://docs.w3cub.com/http/overview/">https://docs.w3cub.com/http/overview/</a></p>

<p>2）如何渲染页面的？</p>

<p>任何浏览器都应该有的7大组件</p>

<p><img src="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/layers.png" alt="How Web Browswers Work 2" width="432" height="296" /></p>

<p>涉及到的要点：DOM Tree, Html Parser, Css Parser, Layout, Painting, Css Box Modal(盒子模型), Positioning 等等，很长不一一说，可以阅读下面链接。</p>

<p><a href="https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/">https://www.html5rocks.com/en/tutorials/internals/howbrowserswork/</a></p>

<h2 id="2-eventloop的理解">2、 eventloop的理解？</h2>

<p>你只会答：你指的是setTimeout，作用域，执行机制之类的吗？</p>

<p>其实想问的是浏览器单线程是如何工作的？ setTimeout在当前作用域最后调用只是一个子集</p>

<p><img src="https://mdn.mozillademos.org/files/4617/default.svg" alt="Stack, heap, queue" style="height: 270px; width: 294px;" /></p>

<p>alert 和 synchronous XHR 会堵塞浏览器</p>

<p>eventLoop 大致的执行顺序</p>

<pre><code class="language-js">while (eventLoop.waitForTask()) {
  const taskQueue = eventLoop.selectTaskQueue()
  if (taskQueue.hasNextTask()) {
    taskQueue.processNextTask()
  }

  const microtaskQueue = eventLoop.microTaskQueue
  while (microtaskQueue.hasNextMicrotask()) {
    microtaskQueue.processNextMicrotask()
  }

  if (shouldRender()) {
    applyScrollResizeAndCSS()
    runAnimationFrames()
    render()
  }
}

</code></pre>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop">https://developer.mozilla.org/en-US/docs/Web/JavaScript/EventLoop</a></p>

<p><a href="https://blog.risingstack.com/writing-a-javascript-framework-execution-timing-beyond-settimeout/">https://blog.risingstack.com/writing-a-javascript-framework-execution-timing-beyond-settimeout/</a></p>

<h2 id="3vue-或-react-diff算法原理的有了解过吗">3、Vue 或 react Diff算法原理的有了解过吗？</h2>

<p>过程：</p>

<p>跟上一次 vircual dom diff 后生成语法树, 然后patch回去 native dom.</p>

<p>状态机 -&gt; virtual dom(template) diff -&gt; 生成 patch -&gt; native dom.</p>

<p>Vue virtual DOM patching 算法是基于 https://github.com/snabbdom/snabbdom</p>

<p>diff 算法大致 O(n3) -&gt; O(n) 引入两个前提条件：elements Types 和 collection key</p>

<p>React:</p>

<p>https://reactjs.org/docs/reconciliation.html</p>

<h2 id="4-vue-data-vuex-或者-react-state-redux-是如何工作的">4、 Vue data Vuex 或者 React state Redux 是如何工作的？</h2>

<p>Vuex</p>

<p><img src="http://wx2.sinaimg.cn/large/50e0073dgy1fwg0bx3mo8j20jh0fbwef.jpg" alt="" /></p>

<p>Redux</p>

<p><img src="http://wx1.sinaimg.cn/large/50e0073dgy1fwuwvl12isg21400u0kjm.gif" alt="" /></p>

<p>Dva <br />
<img src="http://wx1.sinaimg.cn/mw690/50e0073dgy1fwg0c6xkgej218u0e4ju8.jpg" alt="" /></p>

<p>Redux-saga</p>

<p><img src="http://wx1.sinaimg.cn/mw690/50e0073dgy1fwg0hxxv3bj20u30f2q4e.jpg" alt="" /></p>

<p>-完-</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Complete NGINX Cookbook notes]]></title>
    <link href="http://blog.w3cub.com/blog/2018/09/19/complete-nginx-cookbook-notes/"/>
    <updated>2018-09-19T04:51:43+00:00</updated>
    <id>http://blog.w3cub.com/blog/2018/09/19/complete-nginx-cookbook-notes</id>
    <content type="html"><![CDATA[<p>Complete NGINX Cookbook 首先这本说是可以免费下载的。</p>

<p>https://www.nginx.com/resources/library/complete-nginx-cookbook/</p>

<p>正题</p>

<p>我们都清楚 O’Reilly Cookbook 类型的书籍的风格，主要行文风格都是提出问题，给出答案并解决问题。</p>

<p>这本说主要分为三部分讲解：</p>

<ul>
  <li>Part I: Load Balancing and HTTP Caching（负载平衡和HTTP缓存）</li>
  <li>Part II: Security and Access （安全和访问）</li>
  <li>Part III: Deployment and Operations （部署和运营）</li>
</ul>

<p>最常用到的当然是第一章，负载均衡；十一章，访问控制，如何设置跨域；十三章，https配置等。<br />
相对于开发者而言，我们更多的只需要了解第一部分。第三部分对于开发者没有什么必要，所以就没有记录，有需要的可以自行阅读。</p>

<!-- more -->

<ul>
  <li>第一部分：</li>
</ul>

<h2 id="第一章-high-performance-load-balancing-高性能负载均衡">第一章 High-Performance Load Balancing （高性能负载均衡）</h2>

<p>1.1 HTTP Load Balancing（http负载均衡）</p>

<pre><code>upstream backend {
    server 10.10.12.45:80 weight=1;
    server app.example.com:80 weight=2;
}
server {
    location / {
        proxy_pass http://backend;
    }
}

</code></pre>
<p>你把当前请求负载到多个server上，同时server可以指定权重（weight）。</p>

<p>更多配置可以访问 https://docs.w3cub.com/nginx/stream/ngx_stream_upstream_module/#upstream</p>

<p>1.2 TCP Load Balancing （TCP负载均衡）</p>

<pre><code>stream {
    upstream mysql_read {
        server read1.example.com:3306 weight=5;
        server read2.example.com:3306;
        server 10.10.12.34:3306 backup;
    }
    server {
        listen 3306;
        proxy_pass mysql_read;
    }
}
</code></pre>

<p>1.3 Load-Balancing Methods （负载均衡方法）</p>

<p>The following load-balancing methods are available for upstream HTTP, TCP, and UDP pools:</p>

<p>五种方法（指令名称）：</p>

<p>Round robin （ weight=x）<br />
Least connections （least_conn）<br />
Least time （least_time）<br />
Generic hash （hash）<br />
IP hash （ip_hash）</p>

<p>阅读： https://docs.w3cub.com/nginx/stream/ngx_stream_upstream_module/</p>

<p>1.4 Connection Limiting （连接数限制）</p>

<pre><code>upstream backend {
    zone backends 64k;
    queue 750 timeout=30s;
    server webserver1.example.com max_conns=25;
    server webserver2.example.com max_conns=15;
}

</code></pre>

<h2 id="第二章-intelligent-session-persistence--智能会话持久性">第二章 Intelligent Session Persistence  （智能会话持久性）</h2>

<p>2.1 Sticky Cookie （粘性Cookie）</p>

<p>You need to bind a downstream client to an upstream server</p>

<p>sticky cookie 指令</p>

<pre><code>upstream backend {
    server backend1.example.com;
    server backend2.example.com;
    sticky cookie
           affinity
           expires=1h
           domain=.example.com
           httponly
           secure
           path=/;
}

</code></pre>

<p>2.2 Sticky Learn</p>

<p>You need to bind a downstream client to an upstream server by using an existing cookie.</p>

<p>sticky learn 指令</p>

<pre><code>upstream backend {
    server backend1.example.com:8080;
    server backend2.example.com:8081;
    sticky learn
            create=$upstream_cookie_cookiename
            lookup=$cookie_cookiename
            zone=client_sessions:2m;
}
</code></pre>

<p>2.3 Sticky Routing</p>

<p>提供一个映射修正处理</p>

<pre><code>map $cookie_jsessionid $route_cookie {
    ~.+\.(?P&lt;route&gt;\w+)$ $route;
}
map $request_uri $route_uri {
    ~jsessionid=.+\.(?P&lt;route&gt;\w+)$ $route;
}
upstream backend {
    server backend1.example.com route=a;
    server backend2.example.com route=b;
    sticky route $route_cookie $route_uri;
}
</code></pre>

<p>2.4 Connection Draining</p>

<p>You need to gracefully remove servers for maintenance or other reasons while still serving sessions.</p>

<pre><code>curl 'http://localhost/upstream_conf?upstream=backend&amp;id=1&amp;drain=1'
</code></pre>

<h2 id="第五章-massively-scalable-content-caching-大规模可扩展的内容缓存">第五章 Massively Scalable Content Caching （大规模可扩展的内容缓存）</h2>

<p>5.1 Caching Zones （缓存区）</p>

<p>You need to cache content and need to define where the cache is stored.</p>

<p>Use the proxy_cache_path directive to define shared memory cache<br />
zones and a location for the content:</p>

<pre><code>proxy_cache_path /var/nginx/cache
                keys_zone=CACHE:60m
                levels=1:2
                inactive=3h
                max_size=20g;
proxy_cache CACHE;
</code></pre>

<p>5.2 Caching Hash Keys</p>

<p>You need to control how your content is cached and looked up.</p>

<p>Use the proxy_cache_key directive, along with variables to define<br />
what constitutes a cache hit or miss:</p>

<pre><code>proxy_cache_key "$host$request_uri $cookie_user";
</code></pre>

<p>5.3 Cache Bypass</p>

<p>Use the proxy_cache_bypass directive with a nonempty or nonzero<br />
value. One way to do this is by setting a variable within location<br />
blocks that you do not want cached to equal 1:</p>

<pre><code>proxy_cache_bypass $http_cache_bypass;

</code></pre>

<p>The configuration tells NGINX to bypass the cache if the HTTP<br />
request header named cache_bypass is set to any value that is not 0.</p>

<p>5.4 Cache Performance (性能)</p>

<pre><code>location ~* \.(css|js)$ {
  expires 1y;
  add_header Cache-Control "public";
}
</code></pre>

<p>5.5 Purging （）</p>

<pre><code>map $request_method $purge_method {
    PURGE 1;
    default 0;
}
server {
    ...
    location / {
        ...
        proxy_cache_purge $purge_method;
    }
}

</code></pre>

<hr />

<p>Part II: Security and Access（安全和访问）</p>

<h2 id="第十一章-controlling-access">第十一章 Controlling Access</h2>

<p>11.1 Access Based on IP Address</p>

<p>根据客户端IP设定访问权限</p>

<pre><code>location /admin/ {
    deny 10.0.0.1;
    allow 10.0.0.0/20;
    allow 2001:0db8::/32;
    deny all;
}

</code></pre>

<p>11.2 Allowing Cross-Origin Resource Sharing</p>

<p>跨域资源共享, 这里的OPTIONS 处理可以参考</p>

<pre><code>map $request_method $cors_method {
    OPTIONS 11;
    GET 1;
    POST 1;
    default 0;
}
server {
    ...
    location / {
        if ($cors_method ~ '1') {
            add_header 'Access-Control-Allow-Methods' 
            'GET,POST,OPTIONS';
            add_header 'Access-Control-Allow-Origin'
            '*.example.com';
            add_header 'Access-Control-Allow-Headers'
            'DNT,
            Keep-Alive,
            User-Agent,
            If-Modified-Since,
            Cache-Control,
            Content-Type';
        }
        if ($cors_method = '11') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain; charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
    }
}

</code></pre>

<h2 id="第十二章-limiting-use-限制使用">第十二章 Limiting Use （限制使用）</h2>

<p>12.1 Limiting Connections <br />
限制连接数</p>

<p>You need to limit the number of connections based on a <code>predefined key</code>, such as the client’s IP address.</p>

<p>limit_conn 指令</p>

<pre><code>http {
    limit_conn_zone $binary_remote_addr zone=limitbyaddr:10m;
    limit_conn_status 429;
    ...
    server {
        ...
        limit_conn limitbyaddr 40;
        ...
    }
}
</code></pre>

<p>This configuration creates a shared memory zone named limit <br />
byaddr. The predefined key used is the client’s IP address in binary<br />
form. The size of the shared memory zone is set to 10 mega‐<br />
bytes. The limit_conn directive takes two parameters: a<br />
limit_conn_zone name, and the number of connections allowed.<br />
The limit_conn_status sets the response when the connections are<br />
limited to a status of 429, indicating too many<br />
requests. The limit_conn and limit_conn_status directives are<br />
valid in the HTTP, server, and location context.</p>

<p>12.2 Limiting Rate</p>

<p>频率</p>

<pre><code>http {
    limit_req_zone $binary_remote_addr
        zone=limitbyaddr:10m rate=1r/s;
    limit_req_status 429;
    ...
    server {
        ...
        limit_req zone=limitbyaddr burst=10 nodelay;
        ...
    }
}

</code></pre>

<p>12.3 Limiting Bandwidth</p>

<p>带宽限制， 自动降速</p>

<pre><code>location /download/ {
    limit_rate_after 10m;
    limit_rate 1m;
}
</code></pre>

<h2 id="第十三章-encrypting">第十三章 Encrypting</h2>

<p>13.1 Client-Side Encryption</p>

<p>You need to encrypt traffic between your NGINX server and the client.</p>

<p>加密传输，SSL modules such as  the <code>ngx_http_ssl_module</code> or <code>ngx_stream_ssl_module</code></p>

<pre><code>http { # All directives used below are also valid in stream
    server {
        listen 8433 ssl;
        ssl_protocols TLSv1.2;
        ssl_ciphers HIGH:!aNULL:!MD5;
        ssl_certificate /usr/local/nginx/conf/cert.pem;
        ssl_certificate_key /usr/local/nginx/conf/cert.key;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
    }
}

</code></pre>

<p>更新阅读  <br />
https://docs.w3cub.com/nginx/http/ngx_http_ssl_module/#example   <br />
https://docs.w3cub.com/nginx/stream/ngx_stream_ssl_module/#example</p>

<p>13.2 Upstream Encryption</p>

<p>You need to encrypt traffic between NGINX and the upstream service <br />
and set specific negotiation rules for compliance regulations <br />
or if the upstream is outside of your secured network.</p>

<pre><code>location / {
    proxy_pass https://upstream.example.com;
    proxy_ssl_verify on;
    proxy_ssl_verify_depth 2;
    proxy_ssl_protocols TLSv1.2;
}
</code></pre>

<h2 id="第十四章-http-basic-authentication">第十四章 HTTP Basic Authentication</h2>

<p>分为两个步骤，创建密码文件， 设定nginx 配置</p>

<p>14.1 Creating a User File</p>

<p>文件格式</p>

<pre><code># comment
name1:password1
name2:password2:comment
name3:password3

</code></pre>

<p>或者通过以下命令（先安装openssl）</p>

<pre><code>openssl passwd MyPassword1234
</code></pre>

<p>14.2 Using Basic Authentication</p>

<pre><code>location / {
    auth_basic "Private site";
    auth_basic_user_file conf.d/passwd;
}

</code></pre>

<h2 id="第十五章-http-authentication-subrequests">第十五章 HTTP Authentication Subrequests</h2>

<p>15.1 Authentication Subrequests</p>

<p>Use the http_auth_request_module to make a request to the<br />
authentication service to verify identity before serving the request:</p>

<pre><code>location /private/ {
    auth_request /auth;
    auth_request_set $auth_status $upstream_status;
}
location = /auth {
    internal;
    proxy_pass http://auth-server;
    proxy_pass_request_body off;
    proxy_set_header Content-Length "";
    proxy_set_header X-Original-URI $request_uri;
}
</code></pre>

<h2 id="第十六章--secure-links">第十六章  Secure Links</h2>

<p>16.1 Securing a Location</p>

<p>Use the secure link module and the secure_link_secret directive<br />
to restrict access to resources to users who have a secure link:</p>

<pre><code>location /resources {
    secure_link_secret mySecret;
    if ($secure_link = "") { return 403; }
    rewrite ^ /secured/$secure_link;
}
location /secured/ {
    internal;
    root /var/www;
}
</code></pre>

<p>16.2 Generating a Secure Link with a Secret (生成一个安全链接)</p>

<p>You need to generate a secure link from <code>your application</code> using a<br />
secret.</p>

<p>The <code>secure link module</code> in NGINX accepts the hex digest of an <code>md5</code><br />
hashed string, where the string is a concatenation of the URI path<br />
and the secret.</p>

<pre><code>echo -n 'index.htmlmySecret' | openssl md5 -hex

(stdin)= a53bee08a4bf0bbea978ddf736363a12
</code></pre>
<p>Python示例</p>

<pre><code class="language-py">import hashlib
hashlib.md5.(b'index.htmlmySecret').hexdigest()

'a53bee08a4bf0bbea978ddf736363a12
</code></pre>

<p>Now that we have this hash digest, we can use it in a URL. Our<br />
example will be for www.example.com making a request for the<br />
file <code>/var/www/secured/index.html</code> through our /resources location.<br />
Our full URL will be the following:</p>
<pre><code>www.example.com/resources/a53bee08a4bf0bbea978ddf736363a12/\
index.html
</code></pre>

<p>16.3 Securing a Location with an <code>Expire Date</code></p>

<pre><code>location /resources {
    root /var/www;
    secure_link $arg_md5,$arg_expires;
    secure_link_md5 "$secure_link_expires$uri$remote_addr
    mySecret";
    if ($secure_link = "") { return 403; }
    if ($secure_link = "0") { return 410; }
}
</code></pre>

<p>secure_link directive 有两个参数，第一个参数是保存md5哈希的变量；第二个参数是保存链接的到期时间（Unix epoch time format）</p>

<p>16.4 Generating an Expiring Link</p>

<p>创建一个时间戳（Unix epoch time format）</p>

<pre><code class="language-bash">date -d "2020-12-31 00:00" +%s --utc
# 1609372800
</code></pre>

<p>Next you’ll need to concatenate your hash string to match the string<br />
configured with the secure_link_md5 directive. In this case, our<br />
string to be used will be 1293771600/resources/<br />
index.html127.0.0.1 mySecret. The md5 hash is a bit different<br />
than just a hex digest. It’s an md5 hash in binary format, base64 enco‐<br />
ded, with plus signs (+) translated to hyphens (-), slashes (/) trans‐<br />
lated to underscores (_), and equal (=) signs removed. The following<br />
is an example on a Unix system:</p>

<pre><code class="language-bash"> echo -n '1609372800/resources/index.html127.0.0.1 mySecret' \
| openssl md5 -binary \
| openssl base64 \
| tr +/ -_ \
| tr -d =
# TG6ck3OpAttQ1d7jW3JOcw
</code></pre>

<p>Now that we have our hash, we can use it as an argument along with<br />
the expire date:</p>

<p>/resources/index.html?md5=TG6ck3OpAttQ1d7jW3JOcw&amp;expires=1609372800’</p>

<pre><code class="language-py">
from datetime import datetime, timedelta
from base64 import b64encode
import hashlib
# Set environment vars
resource = b'/resources/index.html'
remote_addr = b'127.0.0.1'
host = b'www.example.com'
mysecret = b'mySecret'
# Generate expire timestamp
now = datetime.utcnow()
expire_dt = now + timedelta(hours=1)
expire_epoch = str.encode(expire_dt.strftime('%s'))
# md5 hash the string
uncoded = expire_epoch + resource + remote_addr + mysecret
md5hashed = hashlib.md5(uncoded).digest()
# Base64 encode and transform the string
b64 = b64encode(md5hashed)
unpadded_b64url = b64.replace(b'+', b'-')\
    .replace(b'/', b'_')\
    .replace(b'=', b'')
# Format and generate the link
linkformat = "{}{}?md5={}?expires={}"
securelink = linkformat.format(
    host.decode(),
    resource.decode(),
    unpadded_b64url.decode(),
    expire_epoch.decode()
)
print(securelink)

</code></pre>

<h2 id="第二十章-practical-security-tips">第二十章 Practical Security Tips</h2>

<p>20.1 HTTPS Redirects</p>

<p><code>Use a rewrite to send all HTTP traffic to HTTPS:</code></p>

<pre><code>server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
}
</code></pre>

<p>20.2 Redirecting to HTTPS Where SSL/TLS Is Terminated Before NGINX</p>

<pre><code>server {
    listen 80 default_server;
    listen [::]:80 default_server;
    server_name _;
    if ($http_x_forwarded_proto = 'http') {
        return 301 https://$host$request_uri;
    }
}
</code></pre>

<p>This configuration is very much like HTTPS redirects. However, in<br />
this configuration we’re only redirecting <code>if the header X-Forwarded-Proto</code> is equal to HTTP.</p>

<p>20.3 HTTP Strict Transport Security</p>

<p>You need to instruct browsers to <code>never</code> send requests over HTTP</p>

<p>Use the HTTP Strict Transport Security (HSTS) enhancement by<br />
setting the Strict-Transport-Security header:</p>

<pre><code>add_header Strict-Transport-Security max-age=31536000;

</code></pre>

<p>This configuration sets the Strict-Transport-Security header to a<br />
max age of a year. This will instruct the browser to always do an<br />
internal redirect when HTTP requests are attempted to this domain,<br />
so that <code>all requests will be made over HTTPS</code>.</p>

<p>20.4 Satisfying Any Number of Security Methods</p>

<p>Use the satisfy directive</p>

<pre><code>location / {
    satisfy any;
    allow 192.168.1.0/24;
    deny all;
    auth_basic "closed site";
    auth_basic_user_file conf/htpasswd;
}
</code></pre>

<p>本文： <a href="https://github.com/icai/nginxcooking">https://github.com/icai/nginxcooking</a></p>

<p>-EOF-</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to properly uninstall Service Worker？]]></title>
    <link href="http://blog.w3cub.com/blog/2018/06/01/how-to-properly-uninstall-service-worker/"/>
    <updated>2018-06-01T15:10:43+00:00</updated>
    <id>http://blog.w3cub.com/blog/2018/06/01/how-to-properly-uninstall-service-worker</id>
    <content type="html"><![CDATA[<p>如何正确地卸载Service Worker？</p>

<p>以下链接， Google Developers Service Worker工作原理：<br />
https://developers.google.com/web/fundamentals/primers/service-workers/lifecycle#updates</p>

<p>但是假如某一天你网站不需要 Service Worker，如何正确地卸载呢？</p>

<p>以下以 create-react-app 为例子:</p>

<!-- more -->

<ul>
  <li>千万不要直接从服务器干掉 service-worker.js （sw.js），或者去掉 sw-precache-webpack-plugin 插件直接build。</li>
</ul>

<ol>
  <li>假如你服务器是增量更新的，<br />
<img src="https://user-images.githubusercontent.com/1061012/40846563-8b73ce96-65ec-11e8-8781-e374c38c77ba.png" alt="image" /></li>
</ol>

<p>那么你的服务器文件service-worker.js永远都在，假如用户之前访问了你的网站，并且用户不清缓存的话，cache就永远都在了，你怎么更新，用户还是访问旧的版本。</p>

<ol>
  <li>你说把你服务器的 service-worker.js 干掉，那么假如用户之前访问过呢？本地有一份service-worker.js，那么按照service-worker工作原理，本地一直生效，不管你网站怎么更新，用户看到的依旧是旧的内容。</li>
</ol>

<p>service-worker.js</p>

<pre><code class="language-js">
'use strict';

var precacheConfig = [
["/index.html","a16310808c31e9e89b8d72aa2ddb058c"],
["/plugin.dll.0cf858ac.js","7268282b6a4415b541c4658c1478febc"],
["/vendor.dll.830d2c27.js","097dfeec5dda4f277752cb36b5d548ee"]
];
var cacheName = 'sw-precache-v3-sw-precache-webpack-plugin-' + (self.registration ? self.registration.scope : '');


var ignoreUrlParametersMatching = [/^utm_/];



var addDirectoryIndex = function (originalUrl, index) {
    var url = new URL(originalUrl);
    if (url.pathname.slice(-1) === '/') {
      url.pathname += index;
    }
    return url.toString();
  };

var cleanResponse = function (originalResponse) {
    // If this is not a redirected response, then we don't have to do anything.
    if (!originalResponse.redirected) {
      return Promise.resolve(originalResponse);
    }

    // Firefox 50 and below doesn't support the Response.body stream, so we may
    // need to read the entire body to memory as a Blob.
    var bodyPromise = 'body' in originalResponse ?
      Promise.resolve(originalResponse.body) :
      originalResponse.blob();

    return bodyPromise.then(function(body) {
      // new Response() is happy when passed either a stream or a Blob.
      return new Response(body, {
        headers: originalResponse.headers,
        status: originalResponse.status,
        statusText: originalResponse.statusText
      });
    });
  };

var createCacheKey = function (originalUrl, paramName, paramValue,
                           dontCacheBustUrlsMatching) {
    // Create a new URL object to avoid modifying originalUrl.
    var url = new URL(originalUrl);

    // If dontCacheBustUrlsMatching is not set, or if we don't have a match,
    // then add in the extra cache-busting URL parameter.
    if (!dontCacheBustUrlsMatching ||
        !(url.pathname.match(dontCacheBustUrlsMatching))) {
      url.search += (url.search ? '&amp;' : '') +
        encodeURIComponent(paramName) + '=' + encodeURIComponent(paramValue);
    }

    return url.toString();
  };

var isPathWhitelisted = function (whitelist, absoluteUrlString) {
    // If the whitelist is empty, then consider all URLs to be whitelisted.
    if (whitelist.length === 0) {
      return true;
    }

    // Otherwise compare each path regex to the path of the URL passed in.
    var path = (new URL(absoluteUrlString)).pathname;
    return whitelist.some(function(whitelistedPathRegex) {
      return path.match(whitelistedPathRegex);
    });
  };

var stripIgnoredUrlParameters = function (originalUrl,
    ignoreUrlParametersMatching) {
    var url = new URL(originalUrl);
    // Remove the hash; see https://github.com/GoogleChrome/sw-precache/issues/290
    url.hash = '';

    url.search = url.search.slice(1) // Exclude initial '?'
      .split('&amp;') // Split into an array of 'key=value' strings
      .map(function(kv) {
        return kv.split('='); // Split each 'key=value' string into a [key, value] array
      })
      .filter(function(kv) {
        return ignoreUrlParametersMatching.every(function(ignoredRegex) {
          return !ignoredRegex.test(kv[0]); // Return true iff the key doesn't match any of the regexes.
        });
      })
      .map(function(kv) {
        return kv.join('='); // Join each [key, value] array into a 'key=value' string
      })
      .join('&amp;'); // Join the array of 'key=value' strings into a string with '&amp;' in between each

    return url.toString();
  };


var hashParamName = '_sw-precache';
var urlsToCacheKeys = new Map(
  precacheConfig.map(function(item) {
    var relativeUrl = item[0];
    var hash = item[1];
    var absoluteUrl = new URL(relativeUrl, self.location);
    var cacheKey = createCacheKey(absoluteUrl, hashParamName, hash, /\.\w{8}\./);
    return [absoluteUrl.toString(), cacheKey];
  })
);

function setOfCachedUrls(cache) {
  return cache.keys().then(function(requests) {
    return requests.map(function(request) {
      return request.url;
    });
  }).then(function(urls) {
    return new Set(urls);
  });
}

self.addEventListener('install', function(event) {
  event.waitUntil(
    caches.open(cacheName).then(function(cache) {
      return setOfCachedUrls(cache).then(function(cachedUrls) {
        return Promise.all(
          Array.from(urlsToCacheKeys.values()).map(function(cacheKey) {
            // If we don't have a key matching url in the cache already, add it.
            if (!cachedUrls.has(cacheKey)) {
              var request = new Request(cacheKey, {credentials: 'same-origin'});
              return fetch(request).then(function(response) {
                // Bail out of installation unless we get back a 200 OK for
                // every request.
                if (!response.ok) {
                  throw new Error('Request for ' + cacheKey + ' returned a ' +
                    'response with status ' + response.status);
                }

                return cleanResponse(response).then(function(responseToCache) {
                  return cache.put(cacheKey, responseToCache);
                });
              });
            }
          })
        );
      });
    }).then(function() {
      
      // Force the SW to transition from installing -&gt; active state
      return self.skipWaiting();
      
    })
  );
});

self.addEventListener('activate', function(event) {
  var setOfExpectedUrls = new Set(urlsToCacheKeys.values());

  event.waitUntil(
    caches.open(cacheName).then(function(cache) {
      return cache.keys().then(function(existingRequests) {
        return Promise.all(
          existingRequests.map(function(existingRequest) {
            if (!setOfExpectedUrls.has(existingRequest.url)) {
              return cache.delete(existingRequest);
            }
          })
        );
      });
    }).then(function() {
      
      return self.clients.claim();
      
    })
  );
});


self.addEventListener('fetch', function(event) {
  if (event.request.method === 'GET') {
    // Should we call event.respondWith() inside this fetch event handler?
    // This needs to be determined synchronously, which will give other fetch
    // handlers a chance to handle the request if need be.
    var shouldRespond;

    // First, remove all the ignored parameters and hash fragment, and see if we
    // have that URL in our cache. If so, great! shouldRespond will be true.
    var url = stripIgnoredUrlParameters(event.request.url, ignoreUrlParametersMatching);
    shouldRespond = urlsToCacheKeys.has(url);

    // If shouldRespond is false, check again, this time with 'index.html'
    // (or whatever the directoryIndex option is set to) at the end.
    var directoryIndex = 'index.html';
    if (!shouldRespond &amp;&amp; directoryIndex) {
      url = addDirectoryIndex(url, directoryIndex);
      shouldRespond = urlsToCacheKeys.has(url);
    }

    // If shouldRespond is still false, check to see if this is a navigation
    // request, and if so, whether the URL matches navigateFallbackWhitelist.
    var navigateFallback = '/index.html';
    if (!shouldRespond &amp;&amp;
        navigateFallback &amp;&amp;
        (event.request.mode === 'navigate') &amp;&amp;
        isPathWhitelisted(["^(?!\\/__).*"], event.request.url)) {
      url = new URL(navigateFallback, self.location).toString();
      shouldRespond = urlsToCacheKeys.has(url);
    }

    // If shouldRespond was set to true at any point, then call
    // event.respondWith(), using the appropriate cache key.
    if (shouldRespond) {
      event.respondWith(
        caches.open(cacheName).then(function(cache) {
          return cache.match(urlsToCacheKeys.get(url)).then(function(response) {
            if (response) {
              return response;
            }
            throw Error('The cached response that was expected is missing.');
          });
        }).catch(function(e) {
          // Fall back to just fetch()ing the request if some unexpected error
          // prevented the cached response from being valid.
          console.warn('Couldn\'t serve response for "%s" from cache: %O', event.request.url, e);
          return fetch(event.request);
        })
      );
    }
  }
});

</code></pre>

<p>index.js 入口文件</p>

<p>https://github.com/facebook/create-react-app/blob/next/packages/react-scripts/template/src/index.js</p>

<pre><code class="language-js">import React from 'react';
import ReactDOM from 'react-dom';
import './index.css';
import App from './App';
import * as serviceWorker from './serviceWorker';

ReactDOM.render(&lt;App /&gt;, document.getElementById('root'));

// If you want your app to work offline and load faster, you can change
// unregister() to register() below. Note this comes with some pitfalls.
// Learn more about service workers: http://bit.ly/CRA-PWA
serviceWorker.unregister();
//----vs-----
serviceWorker.register({
    onUpdate: async (registration) =&gt; {
        await registration.update();
        message.info("网站更新完成, 请刷新页面: " + moment().format('YYYY-MM-DD HH:mm:ss'), 0.5, () =&gt; {
            window.location.reload();
        });
    },
    onSuccess: () =&gt; {}
});



</code></pre>

<p>假如你引入了serviceWorker文件, 并发布了，</p>

<p>https://github.com/facebook/create-react-app/blob/next/packages/react-scripts/template/src/serviceWorker.js</p>

<h3 id="正确做法是">正确做法是：</h3>
<p><code>serviceWorker.register();</code> 改成 <code>serviceWorker.unregister();</code> <br />
但是同时千万要记住 要保留  sw-precache-webpack-plugin 去做webpack 构建（目的是为了生成新的service-worker.js，触发更新)。按照人的<strong>既定思维</strong>，既然不要了，那么当然要移除。</p>

<p>假如移除了  sw-precache-webpack-plugin,  你怎么 生成新版本的 service-worker.js，还有，没有新版本 service-worker.js 又怎么会更新你的代码了，这里似乎出现<strong>双重陷阱</strong>，但是当你理解了service-worker.js 生命周期原理后，一切都可以理解。</p>

<h3 id="最后总结">最后总结：</h3>
<p>在入口加入:</p>

<p>serviceWorker.unregister();</p>

<p>service-worker.js 文件 依旧需要更新。</p>

<p>假如真的不想引入 sw-precache-webpack-plugin 做webpack构建的话，请把服务器上面的<br />
service-worker.js  <code>precacheConfig</code> 清空</p>
<pre><code class="language-js">var precacheConfig = [
];
</code></pre>

<p>https://github.com/facebook/create-react-app/blob/master/packages/react-scripts/template/README.md#opting-out-of-caching</p>

<p>If you would prefer not to enable service workers prior to your initial production deployment, then remove the call to registerServiceWorker() from src/index.js.</p>

<p>If you had previously enabled service workers in your production deployment and have decided that you would like to disable them for all your existing users, you can swap out the call to registerServiceWorker() in src/index.js first by modifying the service worker import:</p>
<pre><code>import { unregister } from './registerServiceWorker';
</code></pre>

<p>and then call unregister() instead. After the user visits a page that has unregister(), the service worker will be uninstalled. Note that depending on how /service-worker.js is served, it may take up to 24 hours for the cache to be invalidated.</p>

<p>create-react-app 提示的测试服务器<br />
<img src="https://user-images.githubusercontent.com/1061012/40872668-b5ae9a72-6684-11e8-9d37-ba7d3fed427e.png" alt="image" /><br />
对service-worker.js会有HTTP缓存，部署简单nginx 服务器进行测试</p>

<pre><code class="language-conf">    server {
       listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

       location / {
           root   D:\yourproject\build;
           index  index.html index.htm;
           # proxy_no_cache 1;
           add_header Cache-Control "no-cache";
           try_files $uri $uri/ /index.html;
       }

       location /service\-worker\.js {
            expires -1;
            add_header Pragma "no-cache";
       }
    }

</code></pre>

<pre><code>serviceWorker.register({
    onUpdate: async (registration) =&gt; {
        await registration.update(); // 这里很重要
        message.info("网站更新完成, 请刷新页面: " + moment().format('YYYY-MM-DD HH:mm:ss'), 0.5, () =&gt; {
            window.location.reload();
        });
    },
    onSuccess: () =&gt; {}
});

</code></pre>

<h3 id="延伸阅读">延伸阅读：</h3>

<p>https://lavas.baidu.com/guide/v2/advanced/service-worker#%E6%B3%A8%E5%86%8C-service-worker-%E6%89%A9%E5%B1%95<br />
注册 Service Worker (扩展)</p>

<p>提示：这部分内容由 Lavas 内部处理，并不需要开发者进行参与，仅仅作为解答开发者疑问的扩展阅读存在。</p>

<p>Service Worker 编写完成后，还需要进行注册才能真正生效。常规的注册代码能够在各类 Service Worker 教程或文章中找到，但在实际项目中有一个不得不考虑的问题，使得我们必须对注册代码进行一些改动，那就是 Service Worker 更新 的问题。</p>

<p>https://github.com/lavas-project/sw-register-webpack-plugin</p>

<p>离线指南<br />
https://developers.google.com/web/fundamentals/instant-and-offline/offline-cookbook/#cache-falling-back-to-network</p>

<p>假如熟悉Service Worker 缓存机制的话，那么为什么要卸载呢 ？</p>

<p>本文 ： https://github.com/icai/icai.github.io/issues/1</p>

<p>-EOF-</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[《html5数据推送应用开发》读书摘要]]></title>
    <link href="http://blog.w3cub.com/blog/2017/08/06/sse-data-push-note/"/>
    <updated>2017-08-06T09:18:14+00:00</updated>
    <id>http://blog.w3cub.com/blog/2017/08/06/sse-data-push-note</id>
    <content type="html"><![CDATA[<p>书很薄，在图书馆瞄了一下，知识点不多。<br />
基本上第二章基本讲完，其他讲解都是一些擦边的，兼容性，安全性，……<br />
可以总结为如下：</p>

<!-- more -->

<p>《Data Push Apps with HTML5 SSE》 读书摘要</p>

<h2 id="摘要">摘要</h2>

<ul>
  <li>EventSource方法 new EventSource(“url”);</li>
  <li>MIME类型text/event-stream</li>
  <li>数据传输格式”data:” + new Date().toISOString() + “\n\n”;</li>
</ul>

<h2 id="sse示例">SSE示例</h2>

<pre><code class="language-html">&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
&lt;meta charset="UTF-8"&gt;
&lt;title&gt;Basic SSE Example&lt;/title&gt;
&lt;script src="//code.jquery.com/jquery-1.11.0.min.js"&gt;&lt;/script&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;pre id="x"&gt;Initializing...&lt;/pre&gt;
&lt;script&gt;
    var es = new EventSource("basic_sse.php");
    es.addEventListener("message", function(e){
        $("#x").append("\n" + e.data);
    },false);
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<pre><code class="language-javascript">var http = require("http"),
    fs = require("fs");
var port = parseInt(process.argv[2] || 1234);
http.createServer(function(request, response) {
    console.log("Client connected:" + request.url);
    if (request.url != "/sse") {
        fs.readFile("basic_sse.html", function(err, file) {
            response.writeHead(200, { 'Content-Type': 'text/html' });
            var s = file.toString(); //file is a buffer
            s = s.replace("basic_sse.php", "sse");
            response.end(s);
        });
        return;
    }
    //Below is to handle SSE request. It never returns.
    response.writeHead(200, { "Content-Type": "text/event-stream" });
    var timer = setInterval(function() {
        var content = "data:" + new Date().toISOString() + "\n\n";
        var b = response.write(content);
        if (!b) console.log("Data got queued in memory (content=" + content + ")");
        else console.log("Flushed! (content=" + content + ")");
    }, 1000);
    request.connection.on("close", function() {
        response.end();
        clearInterval(timer);
        console.log("Client closed connection. Aborting.");
    });
}).listen(port);
console.log("Server running at http://localhost:" + port);
</code></pre>

<h2 id="兼容性">兼容性</h2>

<p>startEventSource()</p>

<ul>
  <li>Basically all Firefox and Chromea</li>
  <li>Desktop Safari 5.0+</li>
  <li>iOS Safari 4.0+</li>
  <li>Android 4.4+ (earlier where Chrome is default browser)</li>
  <li>Chrome for Android (all versions)</li>
  <li>Firefox for Android (all versions)</li>
  <li>Opera since 11.0</li>
  <li>Opera Mobile since 11.1</li>
  <li>BlackBerry since 7.0</li>
</ul>

<p>startXHR()</p>

<ul>
  <li>IE10+</li>
  <li>Firefox 3.6 (and earlier)</li>
  <li>Safari 3.x</li>
  <li>Android 4.1 to 4.3 (unless Chrome is default browser)</li>
  <li>Android 3.x</li>
</ul>

<p>startIframe()</p>

<ul>
  <li>IE8</li>
  <li>IE9</li>
</ul>

<p>~~startLongpoll()</p>
<ul>
  <li>IE6</li>
  <li>IE7</li>
  <li>Android 2.x</li>
  <li>Anything else not in the preceding list that has Ajax support<br />
~~</li>
</ul>

<p>~~(none)</p>
<ul>
  <li>Any browser with JavaScript disabled<br />
~~</li>
</ul>

<p>~~a Technically since Firefox 6 and Chrome 6, but they have been auto-updating since Firefox 4, and Chrome since it came out<br />
of beta, so you can reasonably expect no one is still using versions that do not support SSE.<br />
~~</p>

<p>书本代码，书本代码，书本代码。</p>

<h2 id="参考资料">参考资料</h2>

<ul>
  <li><a href="https://github.com/DarrenCook/ssebook">书本代码</a></li>
  <li><a href="https://caniuse.com/#feat=eventsource">eventsource浏览器支持</a></li>
  <li><a href="https://www.w3.org/TR/eventsource/">https://www.w3.org/TR/eventsource/</a></li>
  <li><a href="https://html.spec.whatwg.org/multipage/server-sent-events.html">HTML Living Standard: Server-sent events</a></li>
  <li><a href="https://github.com/Yaffle/EventSource">a polyfill for http://www.w3.org/TR/eventsource/</a></li>
</ul>

<h2 id="其他参考">其他参考</h2>

<ul>
  <li><a href="https://www.ibm.com/developerworks/library/wa-http-server-push-with-websocket-sse/">HTTP server push with WebSocket and SSE</a></li>
  <li><a href="https://www.zhihu.com/question/27498235">Ajax长轮询与服务器推的长连接的区别是？</a></li>
  <li><a href="http://goeasy.io/cn/demos">商业化示例</a></li>
</ul>

<p>-EOF-</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[每日一点点之scrapy]]></title>
    <link href="http://blog.w3cub.com/blog/2017/06/20/today-you-should-know-scrapy/"/>
    <updated>2017-06-20T15:19:58+00:00</updated>
    <id>http://blog.w3cub.com/blog/2017/06/20/today-you-should-know-scrapy</id>
    <content type="html"><![CDATA[<p>Scrapy 是什么？</p>

<p>Scrapy是一个基于Python的高级爬虫框架，只需要简单的配置就可以实现你大大的需求。</p>

<p>为什么要介绍Scrapy，内容时代了，没有内容再好看的网站，那又有什么用呢？</p>

<!-- more -->

<p>对不对？对对对。</p>

<p>学习scrapy有什么需求吗？</p>

<p>python是基于python语言的，那么自然你要懂一些python的基础啦！</p>

<p>还有简单的xpath语法或类似于jQuery选择器语法，一边用一边学也可以的。</p>

<p>建议在Linux或者Mac下进行学习，Windows下可能会遇到各种入门级的问题。例如安装过程中报错，缺少这个，那个的问题。</p>

<p>只需要准备一样东西，就是官方文档 https://docs.scrapy.org/en/latest/</p>

<p>可以一边看，一边实践。</p>

<h3 id="安装">安装</h3>

<pre><code class="language-bash">pip install Scrapy

</code></pre>

<p>官方推荐你安装python虚拟环境进行 Scrapy，不装也没有问题！ 虚拟环境会虚拟IP么？ 不会，不是这一回事</p>

<pre><code class="language-bash">pip install virtualenv

</code></pre>

<p>接着来来读一下官方教程：</p>

<p>https://docs.scrapy.org/en/latest/intro/tutorial.html</p>

<pre><code class="language-bash">scrapy startproject 项目名字

</code></pre>

<p>A: 假如你想知道parse接着会干什么，parse里面能干什么，我觉得你去了解一下Scrapy的钩子函数，以及整体架构。</p>

<p>B: 假如你对yield语法不是很了解的，可以去理解一下yield语法（python基础）。</p>

<p>入门是很快的。</p>

<p>假如你感兴趣，接着你可能会提出一些问题：</p>

<p>比如，怎么在一个页面抓取多条？怎么去重？等等</p>

<p>为什么会介绍Scrapy？</p>

<p>其实Scrapy不单只是一个爬虫框架，而且是一个很好的Python入门学习项目，假设你怎么会Python。</p>

<p>-EOF-</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[你好2017]]></title>
    <link href="http://blog.w3cub.com/blog/2017/01/02/hello-2017/"/>
    <updated>2017-01-02T08:27:08+00:00</updated>
    <id>http://blog.w3cub.com/blog/2017/01/02/hello-2017</id>
    <content type="html"><![CDATA[<p>2017年，起床的第一天，朋友圈里面的都是困难群众。谢谢主席关心的调侃。</p>

<p>2016的计划完成了多少，小目标还是有的，天马行空的就别谈了。该写的写了，头脑发热能折腾到2,3点。</p>

<!-- more -->

<p>2016看了很多电视，看了很多时政新闻，把台湾大选全程直播都看了，你懂的。</p>

<p>2016年底离开了工作三年的<a href="https://www.thecn.com/aboutus">TheCN</a>（CourseNetworking），结束了”Changing the Way the World Learns”，也是我工作五年里面最长的一份工作。没事周五就溜回家，可能这也是在TheCN工作的特殊记忆。   <br />
2016年没有过多的留念与怀念，参加了几场婚礼，大部分都是中学同学。<br />
翻开微博，看一看2016的自己都干了什么，都是都是时事之类的观点，微博并没有过多的私隐东西，再翻开QQ空间也没有记录太多特别的，平淡的2016，还是发生了什么特别的事情，我没有记录。回去参加同学同学的婚礼，同学说，怎么你还是跟以前一模一样，好像一点都没有变化。好像也是，除了瘦了几斤，好像真的没有多大变化。<br />
再翻看Github看看，2013就想写的chrome插件，终于在2016写了，还有一堆基于公司需求的开源扩展。</p>

<p>回想起，这些年从事前端工作，头一两年，那些人还在炫耀IE6,IE7 bug，本质上是清零了。剩下的经验都是自己平时阅读开源代码积累的。kissy, ueditor, jQuery, Backbone, underscore, requriejs…… 感谢这些优秀的开源代码。</p>

<p>当别人问Angular，react，vue，gulp， webpack…… 你懂么的时候，还好我还没有掉队。 会点吧。</p>

<p>2016后端语言写的怎么样了，有用的都学了，都是一边做一边学。ruby，python, php …… 用记得，不用就忘记 ……</p>

<p>或许这是今年的目标，“今年要不要去拿个软件专利著作权，2017”，说白就是给自己一个学习的催化剂。<br />
不知道能不能完成，但是当开始了，就意味着收获。与其说是2017年的目标，不如说是没有完成计划。</p>

<p>2016好像写博客的次数越来越少了，Greader阅读习惯也少了, 反而印象笔记的收藏多了。</p>

<p>2016过了， 一直想去旅游，可惜缺少游伴。辞职的时候，同事说，去个旅游先吧。我也想，去哪里好呢，想不到，没有游伴。</p>

<p>2016,2017能为你做的什么呢！急不了…… 每次都想勤点写blog，可惜总不能坚持，一是想不到想写的内容，二或许不能出口成文，文笔空洞，放弃了。</p>

<p>回到家里看见那本《网页设计三剑客8》，还有那一箱高高的电脑爱好者，还有那些年天天折腾Ghost的日子，这些年走来，真的不容易。以前同事说，这就叫做青春。</p>

<p>可能吧，可能这些叫青春。</p>

<p>2017给自己的生活作息定个目标吧，同学说都我瘦了，可能作息不规律吧。这几年看见了离别的离别，住院的住院。</p>

<p>给自己生活一个小目标吧：定期饮食，增肥，定期运动，定时睡眠。</p>

<p>不知不觉，真正工作已经步入了第六个年头了。</p>

<p>2017继续拥抱变化，拥抱生活吧。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[多彩知乎发布啦]]></title>
    <link href="http://blog.w3cub.com/blog/2016/07/25/cozhihu-release/"/>
    <updated>2016-07-25T14:10:46+00:00</updated>
    <id>http://blog.w3cub.com/blog/2016/07/25/cozhihu-release</id>
    <content type="html"><![CDATA[<p>cozhihu(多彩知乎)发布啦！</p>

<blockquote>
  <p>cozhihu是一款知乎皮肤chrome扩展应用。</p>
</blockquote>

<p>多彩知乎十分适合geek知乎用户。随时随地刷知乎，保护眼睛两不误。</p>

<!-- more -->

<h4 id="安装">安装</h4>
<p><a href="https://chrome.google.com/webstore/detail/oaoadbdcnpjngbdopghepdhlmlbdkgpb"><img width="300px" class="only" src="http://ww3.sinaimg.cn/large/5fd37818jw1eq7bx4bc4ej20c0038mx9.jpg" /></a></p>

<p>或者到官网 <a href="http://cozhihu.w3cub.com/">http://cozhihu.w3cub.com/</a>进行安装。</p>

<h3 id="特色">特色</h3>

<ul>
  <li>支持动态预览颜色</li>
  <li>超过25种颜色主题可供选择，包含夜间模式</li>
  <li>多用途的魔术图标</li>
  <li>文字阴影（可选）</li>
</ul>

<h3 id="预览">预览</h3>

<p><img aria-hidden="true" src="https://lh3.googleusercontent.com/Q9-jyFEiolQrCY9WHREouUwbN4i5gcDGy-xw3xFbFii5Ea8S1ezuRM2IQwuLhCOYNZgntdqFcfI=s640-h400-e365-rw" width="640px" height="400px" /></p>

<h3 id="开源协议">开源协议</h3>

<p>Copyright (c) 2016 Terry Cai. Licensed under the MIT license.<br />
开源地址：<a href="https://github.com/icai/cozhihu">https://github.com/icai/cozhihu</a></p>

<p>刷知乎，防沉迷哦！</p>

<hr />

<blockquote>
  <p>cozhihu is a chrome extension for zhihu skins.</p>
</blockquote>

<h4 id="install">Install</h4>
<p><a href="https://chrome.google.com/webstore/detail/oaoadbdcnpjngbdopghepdhlmlbdkgpb"><img width="300px" class="only" src="http://ww3.sinaimg.cn/large/5fd37818jw1eq7bx4bc4ej20c0038mx9.jpg" /></a></p>

<h3 id="features">Features</h3>

<ul>
  <li>Dynamic preview the color style.</li>
  <li>A series of skin for you to choose including night mode.</li>
  <li>Magic browser action icon, website link for geek user.</li>
  <li>Text shadow for the site (optional)</li>
</ul>

<h3 id="preview">Preview</h3>

<p><img aria-hidden="true" src="https://lh3.googleusercontent.com/Q9-jyFEiolQrCY9WHREouUwbN4i5gcDGy-xw3xFbFii5Ea8S1ezuRM2IQwuLhCOYNZgntdqFcfI=s640-h400-e365-rw" width="640px" height="400px" /></p>

<p>If you like this, Give me star please:</p>

<iframe class="github-btn" src="https://ghbtns.com/github-btn.html?user=icai&amp;repo=cozhihu&amp;type=star&amp;count=true" allowtransparency="true" frameborder="0" scrolling="0" width="100" height="20"></iframe>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[start your shell tour from a question]]></title>
    <link href="http://blog.w3cub.com/blog/2016/05/28/start-your-shell-tour-from-a-question/"/>
    <updated>2016-05-28T08:09:21+00:00</updated>
    <id>http://blog.w3cub.com/blog/2016/05/28/start-your-shell-tour-from-a-question</id>
    <content type="html"><![CDATA[<p>Learn bash shell, by interest or needed. what is your reason to learn the shell? I think the best reason is that what you need is what you learn.</p>

<p>A few days ago, I rewrite the project css to sass, so  I need to rename the css. So I brought out a question, how to “Rename multiple files shell”? To people, solving problems with search engine is the method of least time. I am no exception, I encountered the same problem, and find out the answer in stackoverflow <a href="https://stackoverflow.com/questions/6911301/rename-multiple-files-shell">https://stackoverflow.com/questions/6911301/rename-multiple-files-shell</a>.</p>

<!--more-->

<pre><code>for file in linux_*.mp4 ; do mv "$file" "${file#linux_}" ; done
</code></pre>

<p>But this isnot for my question, so I need to modify this shell ,in order to suit for my situation. I also I found this solution in the comments on the question<a href="http://pubs.opengroup.org/onlinepubs/9699919799/">http://pubs.opengroup.org/onlinepubs/9699919799/</a>.And you may want to know about the <a href="https://en.wikipedia.org/wiki/POSIX">POSIX</a>.</p>

<p>After check the POSIX wiki, you know that. The Portable Operating System Interface (POSIX) is a family of standards specified by the IEEE Computer Society for maintaining compatibility between operating systems. POSIX defines the application programming interface (API), along with command line shells and utility interfaces, for software compatibility with variants of Unix and other operating systems.</p>

<p>But now, we should focus on solving my question. I review the stackoverflow question and the best answer.</p>

<p><strong>Q</strong>: I have multiple files in a directory, example: <code>linux_file1.mp4</code>, <code>linux_file2.mp4</code> and so on. How do I move these files, using shell, so that the names are <code>file1.mp4</code>, <code>file2.mp4</code> and so on. I have about 30 files that I want to move to the new name.</p>

<p><strong>A</strong>: <code>for file in linux_*.mp4 ; do mv "$file" "${file#linux_}" ; done</code></p>

<p>So I guess <code>${file#linux_}</code>  is remove <code>linux_</code> from the filename. As my guess, i am right, you can have a look at the <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_06_02">documentation</a>. I suggest that you should read the <a href="http://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html">documentation</a> at lest one time. And about the syntax of bash shell you can type the bash help in your terminal.</p>

<p>~$&gt;help</p>

<pre><code>GNU bash，版本 4.3.11(1)-release (x86_64-pc-linux-gnu)
这些 shell 命令是内部定义的。请输入 `help' 以获取一个列表。
输入 `help 名称' 以得到有关函数`名称'的更多信息。
使用 `info bash' 来获得关于 shell 的更多一般性信息。
使用 `man -k' 或 `info' 来获取不在列表中的命令的更多信息。

名称旁边的星号(*)表示该命令被禁用。

 job_spec [&amp;]                            history [-c] [-d 偏移量] [n] 或 history &gt;
 (( 表达式 ))                               if 命令; then 命令; [ elif 命令; then 命令; &gt;
 . 文件名 [参数]                              jobs [-lnprs] [任务声明 ...] 或 jobs -x 命&gt;
 :                                       kill [-s 信号声明 | -n 信号编号 | -信号声明] 进程号&gt;
 [ 参数... ]                               let 参数 [参数 ...]
 [[ 表达式 ]]                               local [option] 名称[=值] ...
 alias [-p] [名称[=值] ... ]                logout [n]
 bg [任务声明 ...]                           mapfile [-n 计数] [-O 起始序号] [-s 计数] [-&gt;
 bind [-lpsvPSVX] [-m keymap] [-f file&gt;  popd [-n] [+N | -N]
 break [n]                               printf [-v var] 格式 [参数]
 builtin [shell 内建 [参数 ...]]             pushd [-n] [+N | -N | 目录]
 caller [表达式]                            pwd [-LP]
 case 词 in [模式 [| 模式]...) 命令 ;;]... es&gt;         read [-ers] [-a 数组] [-d 分隔符] [-i 缓冲区&gt;
 cd [-L|[-P [-e]] [-@]] [dir]            readarray [-n 计数] [-O 起始序号] [-s 计数] &gt;
 command [-pVv] 命令 [参数 ...]              readonly [-aAf] [名称[=值] ...] 或 reado&gt;
 compgen [-abcdefgjksuv] [-o 选项]  [-A &gt;    return [n]
 complete [-abcdefgjksuv] [-pr] [-DE] &gt;  select NAME [in 词语 ... ;] do 命令; don&gt;
 compopt [-o|+o 选项] [-DE] [名称 ...]       set [--abefhkmnptuvxBCHP] [-o 选项名] [&gt;
 continue [n]                            shift [n]
 coproc [名称] 命令 [重定向]                    shopt [-pqsu] [-o] [选项名 ...]
 declare [-aAfFgilnrtux] [-p] [name[=v&gt;  source 文件名 [参数]
 dirs [-clpv] [+N] [-N]                  suspend [-f]
 disown [-h] [-ar] [任务声明 ...]            test [表达式]
 echo [-neE] [参数 ...]                    time [-p] 管道
 enable [-a] [-dnps] [-f 文件名] [名称 ...]&gt;       times
 eval [参数 ...]                           trap [-lp] [[参数] 信号声明 ...]
 exec [-cl] [-a 名称] [命令 [参数 ...]] [重定向&gt;        true
 exit [n]                                type [-afptP] 名称 [名称 ...]
 export [-fn] [名称[=值] ...] 或 export -p&gt;      typeset [-aAfFgilrtux] [-p] 名称[=值] .&gt;
 false                                   ulimit [-SHabcdefilmnpqrstuvxT] [lim&gt;
 fc [-e 编辑器名] [-lnr] [起始] [终结] 或 fc -s&gt;          umask [-p] [-S] [模式]
 fg [任务声明]                               unalias [-a] 名称 [名称 ...]
 for 名称 [in 词语 ... ] ; do 命令; done        unset [-f] [-v] [-n] [name ...]
 for (( 表达式1; 表达式2; 表达式3 )); do 命令; do&gt;           until 命令; do 命令; done
 function 名称 { 命令 ; } 或 name () { 命令 ;&gt;       variables - 一些 shell 变量的名称和含义
 getopts 选项字符串 名称 [参数]                   wait [-n] [id ...]
 hash [-lr] [-p 路径名] [-dt] [名称 ...]       while 命令; do 命令; done
 help [-dms] [模式 ...]                    { 命令 ; }
</code></pre>

<p>Now, I brought out my question :</p>

<p><strong>Q</strong>: Rename the css suffix all current directory file <code>.css</code> to <code>.scss</code> and underscore the file prefix.</p>

<p><strong>A</strong>: <code>for file in *.css ; do mv "$file" "_${file%.css}.scss" ; done</code></p>

<p>About the syntax, you can have a look at the chapter <code>2.6.2 Parameter Expansion</code>.</p>

<p>…</p>

<p>${parameter%[word]}</p>

<p><strong>Remove Smallest Suffix Pattern</strong>. The word shall be expanded to produce a pattern. The parameter expansion shall then result in parameter, with the smallest portion of the suffix matched by the pattern deleted. If present, word shall not begin with an unquoted ‘%’.</p>

<p>${parameter%%[word]}</p>

<p><strong>Remove Largest Suffix Pattern</strong>. The word shall be expanded to produce a pattern. The parameter expansion shall then result in parameter, with the largest portion of the suffix matched by the pattern deleted.</p>

<p>${parameter#[word]}</p>

<p><strong>Remove Smallest Prefix Pattern</strong>. The word shall be expanded to produce a pattern. The parameter expansion shall then result in parameter, with the smallest portion of the prefix matched by the pattern deleted. If present, word shall not begin with an unquoted ‘#’.</p>

<p>${parameter##[word]}</p>

<p><strong>Remove Largest Prefix Pattern</strong>. The word shall be expanded to produce a pattern. The parameter expansion shall then result in parameter, with the largest portion of the prefix matched by the pattern deleted.</p>

<p>…</p>

<p>My question has been solved.</p>

<p>Good luck to you.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Blog Upgrade from Octopress 2.x to Jekyll 3.x]]></title>
    <link href="http://blog.w3cub.com/blog/2016/05/25/blog-upgrade-from-octopress-2-dot-x-to-jekyll-3-dot-x/"/>
    <updated>2016-05-25T00:06:09+00:00</updated>
    <id>http://blog.w3cub.com/blog/2016/05/25/blog-upgrade-from-octopress-2-dot-x-to-jekyll-3-dot-x</id>
    <content type="html"><![CDATA[<p>Good news, my blog had Upgrade from Octopress 2.x to Jekyll 3.x. It is not difficult to do this, if you follow me step by step.</p>

<p>As you know, Octopress 2.x is based on Jekyll 2.x. so “Upgrade from Octopress 2.x to Jekyll 3.x” mean that upgrading Jekyll 2.x to Jekyll 3.x.</p>

<!--more-->

<p><strong>Firstly</strong>, Check out and have a look the offcial upgrade turtuial <a href="https://jekyllrb.com/docs/upgrading/2-to-3/">https://jekyllrb.com/docs/upgrading/2-to-3/</a></p>

<p><strong>Secondly</strong>, upgrade the <code>Gemfile</code> file, <code>gem 'pygments.rb'</code>, <code>gem 'jekyll','~&gt; 3.1.6'</code>, <code>gem 'jekyll-sitemap'</code>,<code>gem 'jekyll-paginate', '~&gt; 1.1'</code>, etc. and than remove the <code>Gemfile.lock</code> file and run command <code>bundle install</code>. If in the gem install process, you catch out the error or some dependencies dependency confliction, upgrading it to the newest version could be ok.</p>

<p><strong>And Then</strong>, Add <code>gems: [jekyll-paginate]</code>  in your <code>_config.yml</code> file and remove <code>Octopress-hooks</code> plugin. if you use the <code>octopress_filters.rb</code>, you need to change the following Code：</p>

<pre><code>  Jekyll::Hooks.register :page, :pre_render do |page|
    OctopressFilters::pre_filter(page)
  end

  Jekyll::Hooks.register :page, :post_render do |page|
    OctopressFilters::post_render(page)
  end

  Jekyll::Hooks.register :post, :pre_render do |post|
    OctopressFilters::pre_filter(post)
  end

  Jekyll::Hooks.register :post, :post_render do |post|
    OctopressFilters::post_render(post)
  end
</code></pre>

<p>And the <code>sitemap_generator.rb</code> should be upgrade to the newest version.</p>

<p>The above problem is that I encountered during the upgrade process, only for reference. I suggest that when you upgrade the jekyll like me, you should use the the command <code>jekyll build --trace</code> instead of <code>rake preview</code> that you can catch out the error easily.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[docs w3cub is on]]></title>
    <link href="http://blog.w3cub.com/blog/2015/12/08/docs-w3cub-release/"/>
    <updated>2015-12-08T14:23:26+00:00</updated>
    <id>http://blog.w3cub.com/blog/2015/12/08/docs-w3cub-release</id>
    <content type="html"><![CDATA[<h2 id="preface">Preface</h2>

<p><a href="http://docs.w3cub.com/">docs.w3cub</a> project is based on <a href="https://github.com/Thibaut/devdocs">open source</a>&lt;iframe class="github-btn" src="https://ghbtns.com/github-btn.html?user=Thibaut&amp;repo=devdocs&amp;type=star&amp;count=true" allowtransparency="true" frameborder="0" scrolling="0" width="100" height="20"&gt;&lt;/iframe&gt;. we use jekyll system to rewrite and hosted on Github Pages. This project continued for several months and written in my spare time.</p>

<p>As you know, all pages are static. we think that this would be more fast than using backend router. The most important thing is that Github Pages is free. we also thought about using frondend history router to rewrite this project, but Github Pages don’t support the nginx rule. However we have permission to use 404 page, but useing the 404 page as the frontend router is very crazy idea. So at last we use the jekyll system to generate the static pages. <br />
<!--more--></p>

<p>After subsequent improvement, we will open some jekyll plug-ins and source code.</p>

<h2 id="credits">Credits</h2>

<p>Following credits copy from devdocs.</p>

<table class="table table-bordered table-hover">
  <tbody><tr>
    <th>Documentation
    </th><th>Copyright
    </th><th>License
  </th></tr><tr><td>Angular.js</td><td>© 2010-2015 Google, Inc.</td><td><a href="http://creativecommons.org/licenses/by/3.0/">CC BY</a></td></tr><tr><td>Apache HTTP Server</td><td>© The Apache Software Foundation</td><td><a href="http://www.apache.org/licenses/LICENSE-2.0">Apache</a></td></tr><tr><td>Backbone.js</td><td>© 2010-2015 Jeremy Ashkenas, DocumentCloud</td><td><a href="https://raw.github.com/jashkenas/backbone/master/LICENSE">MIT</a></td></tr><tr><td>Bower</td><td>© 2015 Bower contributors</td><td><a href="https://github.com/bower/bower.github.io/blob/b7b94ad38b72e8fb5dafb20c8ce42835a49cc98f/package.json#L20">CC BY</a></td></tr><tr><td>C<br />C++</td><td>© cppreference.com</td><td><a href="http://en.cppreference.com/w/Cppreference:Copyright/CC-BY-SA">CC BY-SA</a></td></tr><tr><td>Chai</td><td>© 2011-2015 Jake Luer</td><td><a href="https://github.com/chaijs/chai/blob/master/README.md#license">MIT</a></td></tr><tr><td>Clojure</td><td>© Rich Hickey</td><td><a href="https://github.com/clojure/clojure/blob/master/epl-v10.html">EPL</a></td></tr><tr><td>CoffeeScript</td><td>© 2009-2015 Jeremy Ashkenas</td><td><a href="https://raw.github.com/jashkenas/coffee-script/master/LICENSE">MIT</a></td></tr><tr><td>Cordova</td><td>© 2012-2015 The Apache Software Foundation</td><td><a href="https://raw.githubusercontent.com/apache/cordova-docs/master/LICENSE">Apache</a></td></tr><tr><td>CSS<br />DOM<br />HTML<br />JavaScript<br />SVG<br />XPath</td><td>© 2005-2015 Mozilla Developer Network and individual contributors</td><td><a href="http://creativecommons.org/licenses/by-sa/2.5/">CC BY-SA</a></td></tr><tr><td>D3.js</td><td>© 2015 Michael Bostock</td><td><a href="https://raw.github.com/mbostock/d3/master/LICENSE">BSD</a></td></tr><tr><td>Django</td><td>© Django Software Foundation and individual contributors</td><td><a href="https://raw.githubusercontent.com/django/django/master/LICENSE">BSD</a></td></tr><tr><td>Dojo</td><td>© 2005-2015 The Dojo Foundation</td><td><a href="http://dojotoolkit.org/license.html">BSD + AFL</a></td></tr><tr><td>Drupal</td><td>© 2001-2015 by the original authors<br />Drupal is a registered trademark of Dries Buytaert.</td><td><a href="https://api.drupal.org/api/drupal/LICENSE.txt">GPLv2</a></td></tr><tr><td>Ember.js</td><td>© 2015 Yehuda Katz, Tom Dale and Ember.js contributors</td><td><a href="https://raw.github.com/emberjs/ember.js/master/LICENSE">MIT</a></td></tr><tr><td>Elixir</td><td>© 2012 Plataformatec</td><td><a href="https://raw.githubusercontent.com/elixir-lang/elixir/master/LICENSE">Apache</a></td></tr><tr><td>Express</td><td>© 2009-2015 TJ Holowaychuk</td><td><a href="https://raw.githubusercontent.com/visionmedia/express/master/LICENSE">MIT</a></td></tr><tr><td>Git</td><td>© 2005-2015 Linus Torvalds and others</td><td><a href="https://raw.github.com/git/git/master/COPYING">GPLv2</a></td></tr><tr><td>Go</td><td>© Google, Inc.</td><td><a href="http://creativecommons.org/licenses/by/3.0/">CC BY</a></td></tr><tr><td>Grunt</td><td>© 2014 Grunt Team</td><td><a href="https://raw.githubusercontent.com/gruntjs/gruntjs.com/master/LICENSE">MIT</a></td></tr><tr><td>Haskell</td><td>© The University of Glasgow</td><td><a href="http://www.haskell.org/ghc/license">BSD</a></td></tr><tr><td>io.js</td><td>© io.js contributors</td><td><a href="https://raw.githubusercontent.com/iojs/io.js/v1.x/LICENSE">MIT</a></td></tr><tr><td>jQuery</td><td>© 2009 Packt Publishing<br />© 2014 jQuery Foundation</td><td><a href="https://raw.github.com/jquery/api.jquery.com/master/LICENSE-MIT.txt">MIT</a></td></tr><tr><td>jQuery Mobile</td><td>© 2014 jQuery Foundation</td><td><a href="https://raw.github.com/jquery/api.jquerymobile.com/master/LICENSE-MIT.txt">MIT</a></td></tr><tr><td>jQuery UI</td><td>© 2014 jQuery Foundation</td><td><a href="https://raw.github.com/jquery/api.jqueryui.com/master/LICENSE-MIT.txt">MIT</a></td></tr><tr><td>Knockout.js</td><td>© Steven Sanderson, the Knockout.js team, and other contributors</td><td><a href="https://raw.github.com/knockout/knockout/master/LICENSE">MIT</a></td></tr><tr><td>Laravel</td><td>© Taylor Otwell</td><td><a href="https://raw.githubusercontent.com/laravel/framework/master/LICENSE.txt">MIT</a></td></tr><tr><td>Less</td><td>© 2009-2015 The Core Less Team</td><td><a href="http://creativecommons.org/licenses/by/3.0/">CC BY</a></td></tr><tr><td>Lo-Dash</td><td>© 2012-2015 The Dojo Foundation</td><td><a href="https://raw.github.com/lodash/lodash/master/LICENSE.txt">MIT</a></td></tr><tr><td>Lua</td><td>© 1994–2015 Lua.org, PUC-Rio</td><td><a href="http://www.lua.org/license.html">MIT</a></td></tr><tr><td>Marionette.js</td><td>© 2015 Muted Solutions, LLC</td><td><a href="http://mutedsolutions.mit-license.org/">MIT</a></td></tr><tr><td>Markdown</td><td>© 2004 John Gruber</td><td><a href="http://daringfireball.net/projects/markdown/license">BSD</a></td></tr><tr><td>Meteor</td><td>© 2011-2015 Meteor Development Group</td><td><a href="https://raw.githubusercontent.com/meteor/meteor/master/LICENSE.txt">MIT</a></td></tr><tr><td>Minitest</td><td>© Ryan Davis, seattle.rb</td><td><a href="https://raw.githubusercontent.com/seattlerb/minitest/master/README.txt">MIT</a></td></tr><tr><td>Mocha</td><td>© 2011-2015 TJ Holowaychuk</td><td><a href="https://raw.githubusercontent.com/mochajs/mocha/master/LICENSE">MIT</a></td></tr><tr><td>Modernizr</td><td>© 2009-2014 Modernizr</td><td><a href="http://modernizr.com/license/">MIT</a></td></tr><tr><td>Moment.js</td><td>© 2011-2015 Tim Wood, Iskren Chernev, Moment.js contributors</td><td><a href="https://raw.github.com/moment/moment/master/LICENSE">MIT</a></td></tr><tr><td>Mongoose</td><td>© 2010 LearnBoost</td><td><a href="https://github.com/LearnBoost/mongoose/blob/master/README.md#license">MIT</a></td></tr><tr><td>nginx</td><td>© 2002-2015 Igor Sysoev<br />© 2011-2015 Nginx, Inc.</td><td><a href="http://nginx.org/LICENSE">BSD</a></td></tr><tr><td>Node.js</td><td>© Joyent, Inc. and other Node contributors<br />Node.js is a trademark of Joyent, Inc.</td><td><a href="https://raw.githubusercontent.com/nodejs/node/master/LICENSE">MIT</a></td></tr><tr><td>Nokogiri</td><td>© 2008-2014 2014 Aaron Patterson, Mike Dalessio, Charles Nutter, Sergio Arbeo, Patrick Mahoney, Yoko Harada, Akinori Musha</td><td><a href="https://github.com/sparklemotion/nokogiri/blob/master/README.rdoc#license">MIT</a></td></tr><tr><td>npm</td><td>© npm, Inc. and Contributors<br />npm is a trademark of npm, Inc.</td><td><a href="https://raw.githubusercontent.com/npm/npm/master/LICENSE">npm</a></td></tr><tr><td>OpenTSDB</td><td>© 2010-2015 The OpenTSDB Authors</td><td><a href="https://raw.githubusercontent.com/OpenTSDB/opentsdb.net/gh-pages/COPYING.LESSER">LGPLv2.1</a></td></tr><tr><td>Phalcon</td><td>© 2011-2015 Phalcon Framework Team</td><td><a href="https://docs.phalconphp.com/en/latest/reference/license.html">CC BY</a></td></tr><tr><td>Phaser</td><td>© 2015 Richard Davey, Photon Storm Ltd.</td><td><a href="https://raw.githubusercontent.com/photonstorm/phaser/master/license.txt">MIT</a></td></tr><tr><td>Phoenix</td><td>© 2014 Chris McCord</td><td><a href="https://raw.githubusercontent.com/phoenixframework/phoenix/master/LICENSE.md">MIT</a></td></tr><tr><td>PHP</td><td>© 1997-2015 The PHP Documentation Group</td><td><a href="http://creativecommons.org/licenses/by/3.0/">CC BY</a></td></tr><tr><td>PHPUnit</td><td>© 2005-2015 Sebastian Bergmann</td><td><a href="http://creativecommons.org/licenses/by/3.0/">CC BY</a></td></tr><tr><td>PostgreSQL</td><td>© 1996-2013 The PostgreSQL Global Development Group<br />© 1994 The Regents of the University of California</td><td><a href="http://www.postgresql.org/about/licence/">PostgreSQL</a></td></tr><tr><td>Python</td><td>© 1990-2015 Python Software Foundation<br />Python is a trademark of the Python Software Foundation.</td><td><a href="http://docs.python.org/3/license.html">PSFL</a></td></tr><tr><td>Q</td><td>© 2009-2015 Kristopher Michael Kowal and contributors</td><td><a href="https://raw.githubusercontent.com/kriskowal/q/v1/LICENSE">MIT</a></td></tr><tr><td>React, React Native, Flow, Relay</td><td>© 2013-2015 Facebook Inc.</td><td><a href="https://raw.githubusercontent.com/facebook/react/master/LICENSE-docs">CC BY</a></td></tr><tr><td>Redis</td><td>© 2009-2015 Salvatore Sanfilippo</td><td><a href="http://creativecommons.org/licenses/by-sa/4.0/">CC BY-SA</a></td></tr><tr><td>RequireJS</td><td>© 2010-2014 The Dojo Foundation</td><td><a href="https://raw.githubusercontent.com/jrburke/requirejs/master/LICENSE">MIT</a></td></tr><tr><td>RethinkDB</td><td>© RethinkDB contributors</td><td><a href="https://raw.githubusercontent.com/rethinkdb/docs/master/LICENSE">CC BY-SA</a></td></tr><tr><td>Ruby</td><td>© 1993-2015 Yukihiro Matsumoto</td><td><a href="https://www.ruby-lang.org/en/about/license.txt">Ruby</a></td></tr><tr><td>Ruby on Rails</td><td>© 2004-2015 David Heinemeier Hansson<br />Rails, Ruby on Rails, and the Rails logo are trademarks of David Heinemeier Hansson.</td><td><a href="https://raw.github.com/rails/rails/master/activerecord/MIT-LICENSE">MIT</a></td></tr><tr><td>Rust</td><td>© 2011-2015 The Rust Project Developers</td><td><a href="https://raw.githubusercontent.com/rust-lang/rust/master/LICENSE-MIT">MIT</a></td></tr><tr><td>Sass</td><td>© 2006-2015 Hampton Catlin, Nathan Weizenbaum, and Chris Eppstein</td><td><a href="https://raw.github.com/nex3/sass/master/MIT-LICENSE">MIT</a></td></tr><tr><td>Sinon</td><td>© 2010-2015 Christian Johansen</td><td><a href="https://raw.githubusercontent.com/cjohansen/Sinon.JS/master/LICENSE">BSD</a></td></tr><tr><td>Socket.io</td><td>© 2014-2015 Automattic</td><td><a href="https://raw.githubusercontent.com/Automattic/socket.io/master/LICENSE">MIT</a></td></tr><tr><td>Symfony</td><td>© 2004-2015 Fabien Potencier</td><td><a href="http://symfony.com/doc/current/contributing/code/license.html">MIT</a></td></tr><tr><td>Underscore.js</td><td>© 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters &amp; Editors</td><td><a href="https://raw.github.com/jashkenas/underscore/master/LICENSE">MIT</a></td></tr><tr><td>Vagrant</td><td>© 2010-2015 Mitchell Hashimoto</td><td><a href="https://raw.githubusercontent.com/mitchellh/vagrant/master/LICENSE">MIT</a></td></tr><tr><td>Vue.js</td><td>© 2013-2015 Evan You, Vue.js contributors</td><td><a href="https://raw.githubusercontent.com/yyx990803/vue/master/LICENSE">MIT</a></td></tr><tr><td>Webpack</td><td>© 2012-2015 Tobias Koppers</td><td><a href="https://raw.githubusercontent.com/webpack/webpack/master/LICENSE">MIT</a></td></tr><tr><td>Yii</td><td>© 2008-2015 by Yii Software LLC</td><td><a href="https://raw.github.com/yiisoft/yii/master/LICENSE">BSD</a>
</td></tr></tbody></table>

<p>About devdocs, you can read <a href="https://devdocs.io/about">this</a>.</p>

<h2 id="the-coming-issue">The coming issue</h2>

<p>After improve these static web pages, I would do the app. If you like this, please wait the coming app.</p>

<h2 id="related-links">Related links</h2>

<ul>
  <li>my project <a href="http://docs.w3cub.com/">docs.w3cub</a></li>
  <li>original project <a href="https://devdocs.io/about">devdocs</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[模糊匹配查询正则表达式探究]]></title>
    <link href="http://blog.w3cub.com/blog/2015/07/15/fuzzy-scoring-regex-mayhem-zh/"/>
    <updated>2015-07-15T14:09:43+00:00</updated>
    <id>http://blog.w3cub.com/blog/2015/07/15/fuzzy-scoring-regex-mayhem-zh</id>
    <content type="html"><![CDATA[<p>Autocompletion is never an entirely solved problem. Can anyone really say what on earth a user typing “uni” into a country input field actually intends to select? It could match any of these:</p>

<p>自动完成一直都是一个没完没了的问题。谁能准确地说出当一个地球人在一个国家输入框输入“uni”打算选什么？可能会出现以下情况：</p>

<ul>
  <li>Tanzania, [<strong>U</strong>][<strong>n</strong>][<strong>i</strong>]ted Republic of</li>
  <li>[<strong>U</strong>][<strong>n</strong>][<strong>i</strong>]ted Arab Emirates</li>
  <li>[<strong>U</strong>][<strong>n</strong>][<strong>i</strong>]ted Kingdom</li>
  <li>[<strong>U</strong>][<strong>n</strong>][<strong>i</strong>]ted States</li>
  <li>T[<strong>u</strong>][<strong>n</strong>][<strong>i</strong>]sia</li>
</ul>

<p>Of course, it’s probably not the last one, but that right there is a human intuition that we often forget to instil into these UI interactions.</p>

<p>当然，这可能不是最后一个，但人类的直觉通常会忘记灌输这些UI交互。</p>

<!-- more -->

<p>We can divine what the user <em>probably</em> intends most of the time but it’ll always be a game of heuristics. Most solutions shy away from this game, opting instead to match the query letter-for-letter in each potential value, and this is usually sufficient, but without any other logic not only will “la” match “Latvia” but also “Angola”. And usually “Ltvia” will match nothing whatsoever, even though it’s seemingly obvious what the user is trying to type.</p>

<p>我们可以推断用户在这上面花费的时间，显然这是一个启发式游戏。大多数解决方案都是尝试匹配字母之间可能潜在的值，通常已经足够了，“la” 没有任何逻辑，会匹配 “Latvia” 也会匹配 “Angola”。但绝不会匹配 “Ltvia”，尽管“Ltvia”看似是用户想要的输入类型。</p>

<p>If you try implementing a fuzzy matcher to solve this, the first revelation is that you can’t just boolean-match the query against the data like so many solutions do. You need to score each potential match. Hopefully, in the case of country selection, you end up with a sensible subset of countries that match the query to some reasonable degree. This scoring is necessary so that you know what you’re putting at the top of the list. When typing “U”, the user expects Ukraine or Uzbekistan sooner than Mauritius or Sudan, for example.</p>

<p>假如你想用模糊匹配去解决这个问题。首先，你不能像往常那样用boolean匹配去请求查询数据。你需要计算每个存在匹配的分数。 在选择国家情况下，你最终需要请求匹配查询一些合符逻辑的合理的国家子集。那么这分数是非常有必要的，以便我们可以把它们排到列表的顶部。</p>

<p>（译注, boolean匹配 <a href="https://github.com/bevacqua/fuzzysearch">https://github.com/bevacqua/fuzzysearch</a>）</p>

<p>Oddly, if you looked at the most common autocompletion widget out there (jQuery UI), it <a href="http://jsfiddle.net/2c11xknm/embedded/result,js,html">doesn’t appear</a> to follow this intuition.</p>

<p>奇怪的是，假如见过最常用的jQuery UI 自动完成（autocompletion）插件，他并没有解决这个问题。</p>

<p>Even the most <a href="http://baymard.com/labs/country-selector">graceful</a> solutions tend to avoid the muddiness of dealing with mistakes like “untied states” or “leichtenstein”. Sure, the likeliness of a person having to type the name of a country they aren’t intimately familiar with is probably quite low, but people still make mistakes.</p>

<p>即使是最优雅的解决方案，都趋向于忽视模糊处理错误，像“untied states” （united states） 和 “leichtenstein” （liechtenstein ）。当然， 就像一个人输入一个国家的名字，他们不熟悉这个国家可能性是非常很低。但人们仍然会犯错误。</p>

<p>I’ve been intrigued by this topic for quite a while and it’s why I originally made <a href="https://github.com/padolsey/relevancy.js">relevancy.js</a>. It solves the problem quite well, I think, and it does so in a pretty transparent way, with scores applied for various qualities such as the index of the query within the target string (“king” scores higher than “dom” in “kingdom”, for example), but it’s still a quite a lot of code for such a tiny part of an overall user experience.</p>

<p>我一直被这个话题吸引了很长时间，也是我写 <a href="https://github.com/padolsey/relevancy.js">relevancy.js</a> 的原因。它可以很好地处理类似问题，我想，他的原理是非常显而易见的，就是通过分数去区分不同品质（把分数应用于品质）例如，目标字符串查询的索引(正如在查询“kingdom” “的时候，king”的分数比 “dom”高)。但这还是需要相当多的代码去实现这小部分，相对于这样一个整体用户体验的而言。</p>

<p>I have once again been playing with this problem (thanks to a certain <a href="https://twitter.com/codepo8/status/572863924887945216">tweet</a>) and have so wanted to come up with something stupefyingly graceful.</p>

<p>我又再一次遇上了这个问题（谢谢 <a href="https://twitter.com/codepo8/status/572863924887945216">tweet</a> 的肯定），我想可以写的更加优雅。</p>

<p>It all starts with a scratch in back of your mind — the one that tells you that your time has come. The <a href="http://xkcd.com/208/">world requires you</a> to use regular expressions.</p>

<p>一切从头开始在你的脑海里，这告诉你的时间到了。<a href="http://xkcd.com/208/">world requires you</a> （世界需要你） 用正则表达式。</p>

<p><strong>Warning:</strong> I don’t sincerely recommend doing any of this. It’s just a bit of fun. It’s probably an inefficient, unreliable, obscure and ultimately foolish endeavour!</p>

<p>Warning： 别分心，不然效率极低的，bebebe～～～</p>

<h2 id="lets-begin">Let’s begin!</h2>

<p>##我们入正题：</p>

<p>A static France might look like this:</p>

<p>静态字符串France 正则：</p>

<pre><code>/^France$/
</code></pre>

<p>A more lenient France might be less sensitive to its case:</p>

<p>不区分大小写：</p>

<pre><code>/^france$/i
</code></pre>

<p>We could then allow the characters to be optional too:</p>

<p>我们也可以允许字符是可选的</p>

<pre><code>/^f?r?a?n?c?e?$/i
</code></pre>

<p>This would match “f” and “franc” and “FaE”, etc.</p>

<p>这会匹配 “f”， “franc” 和 “FaE”等等。</p>

<p>But… users make even more grievous mistakes sometimes, and our regular expression should be able to handle those. So let’s add a single character of leniency between each legitimate character, and at the beginning and end of the string:</p>

<p>但…… 用户有时犯更严重的错误，我们的正常表达应该能够处理这些错误。因此，让我们在每一个合理的字母之间加上一个宽容的字符在每个字符的前后。</p>

<pre><code>/^.?f?.?r?.?a?.?n?.?c?.?e?.?$/i
</code></pre>

<p>But then this would allow contiguous mistakes like “fafafafa”. We only want to allow a <em>single</em> incorrect mistake after each successfully entered character. For this we can use groups to force each character to be matched and a lazy quantifier on the mistake character to ensure that legitimate characters get to successfully match.</p>

<p>但当这允许连续错误像“fafafafa”，我们只允许一个单一的错误在每个正确输入字符之后。为此我们可以使用分组强制每个字符匹配和懒惰匹配的错误的字符串，确保合法字符可以成功匹配。</p>

<p>So:</p>

<pre><code>/f.?otherStuff/
</code></pre>

<p>Becomes:</p>

<pre><code>/(?:f.??)?otherStuff/
</code></pre>

<p>In English: Try to match <code>f</code> followed by <code>otherStuff</code>. If impossible then try to match any character after <code>f</code> but before <code>otherStuff</code>. (This is why lazy quantifiers (e.g. <code>??</code>) are so useful!)</p>

<p>就是说，尝试匹配跟在otherStuff之前的f。如果不可能的话，尝试匹配任何在“f” 之后，在“otherStuff” 之前的字符。</p>

<p>The entire regex would become:</p>

<p>完整的正则表达式会变成：</p>

<pre><code>/^(?:.(?=f))?(?:f.??)?(?:r.??)?(?:a.??)?(?:n.??)?(?:c.??)?(?:e.??)?$/i
</code></pre>

<p>We should probably capture each individual match (<code>f</code> should be <code>(f)</code>) so that we can analyze the result and score it appropriately.</p>

<p>我们可能需要捕获每个单独的匹配(<code>f</code> 应该是<code>(f)</code>) ，以便我们可以分析结果并适当地评分。</p>

<pre><code>var r = /^(?:(f).??)?(?:(r).??)?(?:(a).??)?(?:(n).??)?(?:(c).??)?(?:(e).??)?$/i

'f$R-aN_cEx'.match(r);
// =&gt; ["f$R-aN_cEx", "f", "R", "a", "N", "c", "E"]
</code></pre>

<p>The regular expression, broken down:</p>

<p>正则表达式解释：</p>

<pre><code>/
  ^       # Start of string

  (?:     # Non-captured group（非捕获）
    (f)   # Match and capture 'f' （匹配并捕获"f"）
    .??   # Followed lazily by any character （懒惰匹配跟随字符）
  )?      # Entire group is optional （组可选）

  (?:     # Non-captured group
    (r)   # Match and capture 'f'
    .??   # Followed lazily by any character
  )?      # Entire group is optional

  ...     # Etc.

  $       # End of string
/i
</code></pre>

<p><em>A quick note</em>: <em>lazy</em> or <em>lazily</em> in the context of regular expressions simply means that that thing will be intentionally excluded from the first match attempt and will only be used if the subsequent regular expression is unsuccessful without it.</p>

<p>小便签：正则表达式中懒惰匹配是指……</p>

<p>One caveat with the above regex is that it doesn’t allow a mistake to be at the beginning of the string. We could fix this with a lookahead to the effect of “allow a mistake here as long as its followed by a non-mistake” but since “non-mistake” could effectively be any character in the legitimate string it’s easier to just make allowances for that initial mistake in each group. Additionally, we probably want to capture every single mistake, in addition to legitimate characters. Here’s our next iteration:</p>

<p>一个需要注意的是，上面的正则表达式，它不允许在字符串的开头有错误。我们可以修复这个前瞻错误通过 “允许犯错误，只要它跟在一个非错误后面”， 但由于 “非错误” 可以有效地在合法字符串中的任何字符，使得它更容易在每个组中出现所允许的初始错误。此外，除了合法的字符，我们还可能要捕捉每一个错误。下面是我们的实现：</p>

<pre><code>/
  ^         # Start of string

  (?:       # Non-captured group

    (^.)?   # Captured optional mistake at the beginning of the string
            # ===============================================

    (f)     # Match and capture 'f'
    (.??)   # Followed lazily by any character (captured)
  )?        # Entire group is optional

  ...     # Etc.

  $       # End of string
/i
</code></pre>

<p>The check <code>(^.)?</code> has to be specified in each group, to account for mistakes that don’t involve “f”, like “krance” or “ttance”, etc.</p>

<p>检查<code>(^.)?</code>必须每组都指定, 以便考虑错误不涉及到 “f”, 就像 “krance” 和 “ttance”, 等等。</p>

<p>Since we’re aiming to genericize this entire mess, we should create a generator that assembles the regular expression given any piece of text:</p>

<p>我们的目标是是要去处理这一类问题，所以我们需要构建一个完整的生成器去组装将给定的文本集合的正则表达式。</p>

<pre><code>function makeFuzzyRegex(string) {

  if (!string) { return /^$/; }

  // Escape any potential special characters:
  var cleansed = string.replace(/\W/g, '\\$&amp;');

  return RegExp(
    '^' +
      cleansed.replace(
        // Find every escaped and non-escaped char:
        /(\\?.)/g,
        // Replace with fuzzy character matcher:
        '(?:(^.)?($1)(.??))?'
      ) +
    '$',
    'i'
  );
}

makeFuzzyRegex('omg');
// =&gt; /^(?:(^.)?(o)(.??))?(?:(^.)?(m)(.??))?(?:(^.)?(g)(.??))?$/i
</code></pre>

<p>This regex matched against ‘_o-m*g!’ produces:</p>

<pre><code>[
  // Full match:
  "_o-m*g!",

  // Captures:
  "_",           // Mistake
  "o",           // Legit
  "-",           // Mistake

  undefined,     // Void mistake
  "m",           // Legit
  "*",           // Mistake

  undefined,     // Void mistake
  "g",           // Legit
  "!"            // Mistake
]
</code></pre>

<p>The captures are in groups of three, with every second capture being the legitimate character (case-insensitive), and with every first and third potentially being mistakes.</p>

<p>捕获是在三组，每组捕获都是合法性（不区分大小写），并与每组第一和第三个字符都可能潜在错误。</p>

<p>We can then loop through these captures and apply weights as we see fit.</p>

<p>我们可以循环这些捕捉和应用权重作为我们合适的分数。</p>

<pre><code>var fullMatch = makeFuzzyRegex('omg').exec('_o-m*g!');
var captures = fullMatch.slice(1); // Get captures specifically
var score = 0;

for (var i = 0, l = captures.length; i &lt; l; i += 3) {
  if (captures[i]) score -= 1;
  if (captures[i+1]) score += 10;
  if (captures[i+2]) score -= 1;
}

score; // =&gt; 26
</code></pre>

<p>That scoring is quite arbitrary, but we’ve at least prescribed our wish to score successes more than we punish mistakes (10 vs 1).</p>

<p>这计算是十分随意的，但是我们至少指定我们的愿望比我们惩罚的错误更成功(10 vs 1)。</p>

<p>We can start to play with the heuristics of this if we wrap it all up:</p>

<p>我们把它封装起来，让Ta溜溜：</p>

<pre><code>function createFuzzyScorer(text) {

  var matcher = makeFuzzyRegex(text);

  return function(query) {
    var match = matcher.exec(query);

    if (!match) return 0;

    var captures = match.slice(1);
    var score = 0;

    for (var i = 0, l = captures.length; i &lt; l; i += 3) {
      if (captures[i]) score -= 1;
      if (captures[i+1]) score += 10;
      if (captures[i+2]) score -= 1;
    }

    return score;
  };

  function makeFuzzyRegex(string) {

    if (!string) { return /^$/; }

    // Escape any potential special characters:
    var cleansed = string.replace(/\W/g, '\\$&amp;');

    return RegExp(
      '^' +
        cleansed.replace(
          // Find every escaped and non-escaped char:
          /(\\?.)/g,
          // Replace with fuzzy character matcher:
          '(?:(^.)?($1)(.??))?'
        ) +
      '$',
      'i'
    );
  }
}
</code></pre>

<p>Our first attempt isn’t too bad:</p>

<p>我们的第一次尝试并不太坏：</p>

<pre><code>var score = createFuzzyScorer('omg');

score('omg');     // =&gt; 30
score('xOmg');    // =&gt; 29
score('.o.m.g.'); // =&gt; 26
score('om');      // =&gt; 20
score('og');      // =&gt; 20
score('o');       // =&gt; 10
score('nope');    // =&gt; 0
</code></pre>

<p>These seem like sensible enough scores, generally, but we’re more interested in autocompletion, and so there’s an obvious predictive element there. If a user types ‘o’ then that should probably score higher than ‘g’ if we’re testing against ‘omg’, but with the above mechanism they both receive a standard 10:</p>

<p>这似乎是可感知的足够的分数，一般，但我们在自动完成更感兴趣，所以有一个明显的预测元素的存在。当我们我们测试‘omg’时，如果用户键入”o”那应该得分高于”g”，但上述方法都接受标准的10：</p>

<pre><code>var score = createFuzzyScorer('omg');

score('o'); // =&gt; 10
score('g'); // =&gt; 10
</code></pre>

<p>We can fix this by applying a higher weight to matches that appear earlier in the string:</p>

<p>我们可以用更高的权重来解决字符串中较早出现的匹配问题：</p>

<pre><code>// The scoring loop:
for (var i = 0, l = captures.length; i &lt; l; i += 3) {
  if (captures[i]) score -= 0.1;
  if (captures[i+1]) score += (l - i) / l; // the magic
  if (captures[i+2]) score -= 0.1;
}
</code></pre>

<p>Now the score given for any singular legitimate match will decrease as the index (<code>i</code>) increases. Here are the results:</p>

<p>现在任何奇异的合法的匹配的得分将会递减随着指数（i）增加。这里是结果：</p>

<pre><code>var score = createFuzzyScorer('omg');

score('omg');     // =&gt; 1.99
score('xOmg');    // =&gt; 1.90
score('om');      // =&gt; 1.66
score('.o.m.g.'); // =&gt; 1.59
score('og');      // =&gt; 1.33
score('o');       // =&gt; 1.00
score('nope');    // =&gt; 0.00
</code></pre>

<p>This is getting closer to our intuition. The next step would be to try to create a real autocompletion widget. I’ve done it so I know that we’ll want to make one more change. The problem with our scoring right now is that it’ll award legitimate characters relative to the length of the string. But when comparing scores across multiple subject strings, this approach seems broken.</p>

<p>这是越来越接近我们的直觉。下一步将努力创造一个真正的自动完成功能部件。我已经这样做了，所以我知道，我们将要做一个改变。现在我们分值的问题是，奖励合法的字符相对于字符串的长度。但是，当比较多个同类字符串的分数时，这种方法似乎被打破。</p>

<pre><code>createFuzzyScorer('RuneScript')('Ru'); // 1.9
createFuzzyScorer('Ruby')('Ru');       // 1.7
</code></pre>

<p>These should both score equally, as “Ru” is just as likely to become “Ruby” as it is to become “RuneScript”. To achieve this we should only take into account the index, and make the weight of any scoring decision inversely proportional to that index, in this case via an exponential taper (<code>pow(index, -2)</code>).</p>

<p>显然，分数应该相等，因为 “Ru” 推演成 “Ruby” 和 “RuneScript” 是一样. 为了实现这一点，我们应该考虑到该指数，并使任何得分决定的权重与指数成反比，在这种情况下，通过指数锥度 (<code>pow(index, -2)</code>)</p>

<pre><code>// The scoring loop:
for (var i = 0, l = captures.length; i &lt; l; i += 3) {
  var relevancyOfCharacter = Math.pow(i + 1, -2);
  if (captures[i]) score -= relevancyOfCharacter * 0.1;
  if (captures[i+1]) score += relevancyOfCharacter * 1;
  if (captures[i+2]) score -= relevancyOfCharacter * 0.1;
}
</code></pre>

<p><em>(Final version of <code>createFuzzyScorer</code> available <a href="https://gist.github.com/padolsey/a27a32d5859a71403b10">as a gist</a>.)</em></p>

<p><strong><a href="http://jsbin.com/wanetemare/1/edit?js,output">See this demo using programming languages as the dataset</a></strong>. Try intentionally misspelling something (jawascript), or missing out characters (jaascit), or just going a little crazy (jahskt). It works beautifully.</p>

<p><strong><a href="http://jsbin.com/wanetemare/1/edit?js,output">在数据集用编程语言实现查看demo</a></strong>. 尝试拼写错误（jawascript），或者丢失字母（jaascit）或者输入一些类似的（jahskt）， 它依然工作得很漂亮。</p>

<p>To achieve speedy sorting, a fuzzy scorer is created for every single value before the user types anything:</p>

<p>为了实现快速排序， 每一个单一的值的模糊分数应该在用户输入之前被创建：</p>

<pre><code>var data = PROGRAMMING_LANGUAGES.map(function(lang, i) {
  return {
    actualValue: lang,
    score: createFuzzyScorer(lang),
    i: i,
    toString: function() { return lang; }
  };
});
</code></pre>

<p>This means we can iterate through <code>data</code> on every relevant input event, and call the <code>score()</code>method with the current query. We can then bundle this into a <em>filter-&gt;sort-&gt;slice</em> flow to get our list of sensible suggestions:</p>

<p>这意味着我们可以遍历每个相关的输入事件的 data ，调用 score() 方法来实现当前查询。我们可以把这变成一个 <em>filter-&gt;sort-&gt;slice</em> 得出我们列出的有判断力的建议：</p>

<pre><code>var sorted = data.filter(function(item) {

  // Get rid of any very unlikely matches (and cache the score!)
  return (item._cachedScore = item.score(query)) &gt;= .5;

}).sort(function(a, b) {

  var as = a._cachedScore;
  var bs = b._cachedScore;

  // Sort by score, and if score is equal, then by original index:
  // (We would typically return 0 in that case but some engines don't stable-sort)
  return as &gt; bs ? -1 : as == bs &amp;&amp; a.i &lt; b.i ? -1 : 1;

}).slice(0, 10); // We only need the top 10...
</code></pre>

<p>And.. we’re done. It’s never really finished though: you’ll find endless tweaks that can be made to the scorer to make it more believably resemble human-like intuition.</p>

<p>我们做到了，虽然它从来没有真正完成，你会发现很多的调整，使得分数更加人工智能。</p>

<p>For those wanting to test the resulting country autocompletion interaction: <strong><a href="http://jsbin.com/lejucikiha/1/edit?js,output">See the demo</a></strong>.</p>

<p>对于那些想要测试国家自动完成返回值交互的，<strong><a href="http://jsbin.com/lejucikiha/1/edit?js,output">See the demo</a></strong>.</p>

<p>I guess, despite my initial warning, I wouldn’t actually mind using this in production, as long as there were a decent number of unit tests. I’d probably also assemble the regular expressions on the server and serve them up as literals. It’s also worth mentioning that almost everything in this post has been exploring the fuzzy-matching of very short strings in small datasets. Even in the case of the country demo, to get more applicable results, I broke up long names into the component parts and then scored against each. E.g.</p>

<p>我想，尽管我最初的忠告，我不介意使用这个在生产，只要做一些数量的单位测试。我可能也组装正则表达式在服务器并为提供服务。值得一提的是，几乎所有的这篇文章都在探索小数据集上的模糊匹配。即使在国家输入案例的演示，以获得更适用的结果，我折断了长的名字，组成部分，然后对每一个得分。例如</p>

<pre><code>// E.g. Macedonia, the Former Yugoslav Republic of:
var scorers = [
  "Macedonia, the Former Yugoslav Republic of",
  "Macedonia",
  "the",
  "former",
  "yugoslav",
  "republic",
  "of"
].map(createFuzzyScorer);
// Etc.
</code></pre>

<p>And this would be terribly inefficient on a larger scale, so with any dataset longer than a list of countries you’re probably best to explore <a href="http://en.wikipedia.org/wiki/Trie">Trie</a>-based approaches to autocompletion.</p>

<p>And with that, I’ll shut-up and wish you merry regex’ing!</p>

<p>然而这在大规模扫描下是非常低效的，所以任何数据集比的国家名单长的，你可能最好的探究 <a href="http://en.wikipedia.org/wiki/Trie">Trie</a>-based 方法 来处理自动完成。然后，我会闭嘴， wish you merry regex’ing!</p>

<p>译者注：</p>

<p>文中及其评论提到的资源：</p>

<p><a href="https://github.com/padolsey/relevancy.js">https://github.com/padolsey/relevancy.js</a></p>

<p><a href="https://github.com/bevacqua/fuzzysearch">https://github.com/bevacqua/fuzzysearch</a></p>

<p><a href="https://github.com/gf3/Levenshtein">https://github.com/gf3/Levenshtein</a></p>

<p>作者github：<a href="https://github.com/padolsey">https://github.com/padolsey</a></p>

<p>译者：主要用到正则懒惰匹配去实现<code>真值</code>线性回归。you are truly, how much truly you are!</p>

<p>就是通过匹配度分数进行排序，而不是单单的boolean 值指定，再a-z 排序输出，</p>

<p><a href="https://github.com/bevacqua/fuzzysearch">https://github.com/bevacqua/fuzzysearch</a>所用的方法，你只能在true or false 之间选择，而padolsey所用的方法字样引入了权重概念更加智能，但是在大规模数据下是非常低效的。另外在作者的博客评论中也提到的 <a href="https://github.com/gf3/Levenshtein">https://github.com/gf3/Levenshtein</a>， 可以自行wiki一下。</p>

<hr />

<p>最后如有漏译，错译，欢迎指正。</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rvm help]]></title>
    <link href="http://blog.w3cub.com/blog/2015/06/28/rvm-help/"/>
    <updated>2015-06-28T05:12:54+00:00</updated>
    <id>http://blog.w3cub.com/blog/2015/06/28/rvm-help</id>
    <content type="html"><![CDATA[<p>常用命令（Action）：</p>

<pre><code>list        :: show currently installed rubies, interactive output.
install     :: install one or many ruby versions
use         :: setup current shell to use a specific ruby version
</code></pre>

<!-- more -->

<p>详细帮助文档（rvm -h）：</p>

<pre><code>= rvm

* https://rvm.io/
* https://github.com/wayneeseguin/rvm/

== DESCRIPTION:

RVM is the Ruby enVironment Manager (rvm).

It manages Ruby application environments and enables switching between them.

== Installation

  curl -L https://get.rvm.io | bash -s stable --autolibs=enabled [--ruby] [--rails] [--trace]

stable     :: Install stable RVM, good for servers.
--ruby     :: Additionally install latest ruby version (MRI).
--rails    :: Install gem rails into default gemset (also installs ruby=).
--trace    :: Print trace of the installation, gist output when you have problems.
--autolibs :: Enable or disable autolibs see: https://rvm.io/rvm/autolibs

More details here: https://rvm.io/rvm/install/

== Usage

  rvm [Flags] [Options] Action [Implementation[,Implementation[,...]]

== Flags

--default         :: with 'rvm use X', sets the default ruby for new shells to X.
--debug           :: Toggle debug mode on for very verbose output.
--disable-binary  :: Install from source instead of using binaries
--trace           :: Toggle trace mode on to see EVERYTHING rvm is doing.
--force           :: Force install, removes old install &amp; source before install.
--summary         :: Used with rubydo to print out a summary of the commands run.
--latest          :: with gemset --dump skips version strings for latest gem.
--gems            :: with uninstall/remove removes gems with the interpreter.
--docs            :: with install, attempt to generate ri after installation.
--reconfigure     :: Force ./configure on install even if Makefile already exists.
--skip-gemsets    :: with install, skip the installation of default gemsets.
--quiet-curl      :: Makes curl silent when fetching data

== Options

-v|--version     :: Emit rvm version loaded for current shell
-l|--level       :: patch level to use with rvm use / install
   --bin         :: path for binaries to be placed (~/.rvm/bin/)
-S               :: Specify a script file to attempt to load and run (rubydo)
-e               :: Execute code from the command line.
--gems           :: Used to set the 'gems_flag', use with 'remove' to remove
                    gems
--archive        :: Used to set the 'archive_flag', use with 'remove' to remove
                    archive
--patch          :: With MRI Rubies you may specify one or more full paths to
                    patches

                    for multiple, specify comma separated:

                      --patch /.../.../a.patch[%prefix],/.../.../.../b.patch

                    'prefix' is an optional argument, which will be bypassed
                    to the '-p' argument of the 'patch' command. It is separated
                    from patch file name with '%' symbol.
-C|--configure   :: custom configure options. If you need to pass several
                    configure options then append them comma separated:

                      -C --...,--...,--...

--nice           :: process niceness (for slow computers, default 0)
--ree-options    :: Options passed directly to ree's './installer' on the
                    command line.
--with-rubies    :: Specifies a string for rvm to attempt to expand for set
                    operations.

== Action

(Note: for most actions, 'rvm help action-name' may provide more information.)

*usage*     :: show this usage information
version     :: show the rvm version installed in rvm_path
use         :: setup current shell to use a specific ruby version
reload      :: reload rvm source itself (useful after changing rvm source)
implode     :: (seppuku) removes the rvm installation completely.

               This means everything in $rvm_path (~/.rvm || /usr/local/rvm).

               This does not touch your profiles. However, this means that you
               must manually clean up your profiles and remove the lines which
               source RVM.
get         :: {head,stable} upgrades rvm to latest head or stable version.

               Check 'rvm help get' for more details.

               (If you experience bugs try this first with head version, then
               ask for help in #rvm on irc.freenode.net and hang around)
reset       :: remove current and stored default &amp; system settings.

               (If you experience odd behavior try this second)
info        :: show the *current* environment information for current ruby
current     :: print the *current* ruby version and the name of any gemset
               being used.
debug       :: show info plus additional information for common issues

install     :: install one or many ruby versions

               See also: https://rvm.io/rubies/installing/
uninstall   :: uninstall one or many ruby versions, leaves their sources
remove      :: uninstall one or many ruby versions and remove their sources
reinstall   :: reinstall ruby and runs gem pristine on all gems,
               make sure to read output, use 'all' for all rubies.

migrate     :: Lets you migrate all gemsets from one ruby to another.
upgrade     :: Lets you upgrade from one version of a ruby to another, including
               migrating your gemsets semi-automatically.

wrapper     :: generates a set of wrapper executables for a given ruby with the
               specified ruby and gemset combination. Used under the hood for
               passenger support and the like.

cleanup     :: Lets you remove stale source folders / archives and other
               miscellaneous data associated with rvm.
repair      :: Lets you repair parts of your environment e.g. wrappers, env
               files and and similar files (e.g. general maintenance).
fix-permissions :: Repairs broken permissions (e.g. by sudo or chef)
osx-ssl-certs :: Helps update certificates for OpenSSL installed by rvm on OSX.
snapshot    :: Lets you backup / restore an rvm installation in a lightweight
               manner.

alias       :: Lets you set shortcut strings for convenience with 'rvm use'.
disk-usage  :: Tells you how much disk space rvm install is using.
tools       :: Provides general information about the ruby environment,
               primarily useful when scripting rvm.
docs        :: Tools to make installing ri and rdoc documentation easier.
rvmrc       :: Tools related to managing rvmrc trust and loading.
patchset    :: Tools related to managing ruby patchsets.

do          :: runs an arbitrary command against specified and/or all rubies
cron        :: Manages setup for using ruby in cron tasks.

gemset      :: gemsets: https://rvm.io/gemsets/

rubygems    :: Switches the installed version of rubygems for the current ruby.

config-get  :: display values for RbConfig::CONFIG variables.
gemdir      :: display the path to the current gem directory (GEM_HOME).


fetch       :: Performs an archive / src fetch only of the selected ruby.
list        :: show currently installed rubies, interactive output.

               https://rvm.io/rubies/list/
autolibs    :: Controls settings for automatically installing dependencies.
pkg         :: Install a dependency package {readline,iconv,zlib,openssl}

               https://rvm.io/packages/
notes       :: Display notes, with operating system specifics.

export      :: Temporarily set an environment variable in the current shell.
unexport    :: Undo changes made to the environment by 'rvm export'.
requirements  :: Installs additional OS specific dependencies/requirements for
                 building various rubies. Usually run by install.
mount       :: Install rubies from external locations.

user        :: Tools for managing RVM mixed mode in multiuser installations.
group       :: Tools for managing groups in multiuser installations.

== Implementation

*ruby*     :: MRI/YARV Ruby (The Gold Standard) {1.8.x, 1.9.x, 2.0.x, 2.1.x, 2.2.x}
jruby      :: JRuby, Ruby interpreter on the Java Virtual Machine.
rbx        :: Rubinius
ree        :: Ruby Enterprise Edition, MRI Ruby with several custom
              patches for performance, stability, and memory.
macruby    :: MacRuby, insanely fast, can make real apps (Mac OS X Only).
maglev     :: GemStone Ruby, awesome persistent ruby object store.
ironruby   :: IronRuby, NOT supported yet. Looking for volunteers to help.
system     :: use the system ruby (eg. pre-rvm state)
default    :: use the default ruby (or the system ruby if a default hasn't been set).

              https://rvm.io/rubies/default/

== Resources:

https://rvm.io/
https://www.pivotaltracker.com/projects/26822

== Contributions:

Any and all contributions offered in any form, past present or future, to the
RVM project are understood to be in complete agreement and acceptance with the
Apache License v2.0.

== LICENSE:

Copyright (c) 2009-2011 Wayne E. Seguin
Copyright (c) 2011-2015 Michal Papis

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

  Action documentation available with 'rvm help action-name':

      alias autolibs cleanup config-get cron current debug disk-usage do docs fetch fix-permissions gemdir gemset gemset/copy get group implode info install list migrate mount notes osx-ssl-certs patchset pkg prepare reinstall remove repair requirements reset rubygems rvmrc rvmrc/to rvmrc/warning snapshot srcdir tools uninstall upgrade use user wrapper 

  Other topics of documentation available with 'rvm help topic':

      alt color upgrade-notes 
  

  For additional information please visit RVM's documentation website:

      https://rvm.io/

  If you still cannot find an answer to your question, find
  'wayneeseguin', 'mpapis', 'richo', 'lemoinem' or 'rys' in #rvm on irc.freenode.net:

      http://webchat.freenode.net/?channels=rvm
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopress configuration]]></title>
    <link href="http://blog.w3cub.com/blog/2015/06/20/octopress-config/"/>
    <updated>2015-06-20T15:16:31+00:00</updated>
    <id>http://blog.w3cub.com/blog/2015/06/20/octopress-config</id>
    <content type="html"><![CDATA[<h2 id="前言">前言</h2>
<p>假如想省钱，只是写写博客而已。免去服务器麻烦。推荐你用octopress，可以肯定的，没有wordpress 那么多功能。octopress 是基于 jekyll 的 静态化博客，可以在github pages 和 gitcafe 等上运行。下面我们来部署一下 我们的<code>A blogging framework for hackers.</code> 博客。</p>

<!--more-->

<hr />
<p>先看一下技术栈：</p>

<p>octopress -&gt; jekyll -&gt; ruby</p>

<p>Markdown (or Textile), Liquid, HTML &amp; CSS go in. Static sites come out ready for deployment.</p>

<p>Liquid 一个 ruby模板引擎，Markdown是……。</p>

<p>所以 安装octopress之前必不可少的是安装Ta的生态环境。</p>

<h2 id="安装octopress">安装Octopress</h2>

<h3 id="安装rvm">安装rvm</h3>

<p>打开<a href="https://rvm.io/">rvm</a>首页，打开终端，使用以下命令安装吧。</p>

<pre><code>$ gpg --keyserver hkp://keys.gnupg.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3

$ \curl -sSL https://get.rvm.io | bash -s stable

</code></pre>

<p><a href="https://en.wikipedia.org/wiki/Ruby_Version_Manager">rvm wiki</a></p>

<h3 id="安装ruby">安装Ruby</h3>

<pre><code>$ rvm -h
$ rvm list
$ rvm install 2.2.1
$ rvm use 2.2.1
</code></pre>
<p>某些时候会提示，请使用 –bash-login. 使用就OK了。</p>

<p>安装完成后可以用ruby –version进行验证</p>

<h3 id="安装octopress-1">安装Octopress</h3>
<p>安装Ruby完成后就按照官方指南安装Octpress</p>

<pre><code>#clone octopress
$ git clone git://github.com/imathis/octopress.git octopress
$ cd octopress

##安装依赖
$ gem install bundler
$ bundle install



##安装octopress默认主题
$ rake install
</code></pre>
<hr />

<p>bundle 命令 是 Gemfile 文件用的，和 nodejs 项目的 package.json 类似，都是一键安装依赖包文件。</p>

<h2 id="部署">部署</h2>
<p>接下来需要把Blog部署到github上去，第一步要做的是去<a href="https://github.com/new">github</a>创建一个<code>username.github.io</code>的repo，比如我的就叫<code>icai.github.io</code>。</p>

<p>然后运行以下命令，并依照提示完成github和Octopress的关联</p>

<pre><code>$ rake setup_github_pages
</code></pre>
<hr />

<h2 id="创建博客">创建博客</h2>

<h3 id="生成博客">生成博客</h3>
<pre><code>$ rake generate
$ rake deploy
</code></pre>

<p>rake 命令 是 Rakefile 文件用的，你在带有Rakefile 目录下执行 rake 命令，<br />
当然你可以 <code>rake -T</code> 查看当前所有的rake Task， 或者 rake -h 获取帮助</p>

<p>把生成后的代码上传到github</p>

<pre><code>$ git add .
$ git commit -m 'create blog'
$ git push origin source
</code></pre>
<p>完成后等待一段时间后就能访问<code>http://username.github.io</code>看到自己的博客了</p>

<h3 id="修改配置">修改配置</h3>
<p>配置文件路径为<code>~/octopress/_config.yml</code></p>

<p>参考： <a href="https://github.com/octopress/octopress">官方</a></p>

<p>编辑完成后</p>

<pre><code>$ rake generate

$ git add .
$ git commit -m "settings" 
$ git push origin source

$ rake deploy
</code></pre>

<h3 id="安装第三方主题">安装第三方主题</h3>
<p>Octopress有许多第三方主题可以选择，首先在<a href="http://opthemes.com/">这里</a>上寻找喜欢的主题，点击进入对应主题的git，一般在readme上都会有安装流程</p>

<pre><code>#这里以安装allenhsu定制的greyshade主题为例，原作者是shashankmehta
$ git clone git@github.com:allenhsu/greyshade.git .themes/greyshade

#Substitue 'color' with your highlight color
$ echo "\$greyshade: color;" &gt;&gt; sass/custom/_colors.scss 

$ rake "install[greyshade]"
$ rake generate

$ git add .
$ git commit -m "theme" 
$ git push origin source

$ rake deploy
</code></pre>

<h3 id="支持中文标签">支持中文标签</h3>
<p>目前版本的Octopress会在<code>/source/blog/categories</code>下创建一个<code>index.markdown</code>来作为分类的首页，但这个首页在标签有中文时会出现无法跳转的情况，原因是因为在出现中文标签时Octopress会把文件的路径中的中文转换成拼音，而在Category跳转时是直接写了中文路径，结果自然是404。解决方法是自己实现一个分类首页并处理中文。</p>

<p>首先按照<a href="https://kaworu.ch/blog/2013/09/23/categories-page-with-octopress/">这里</a>的方法实现<code>index.html</code></p>

<p>将<code>plugins/category_list_tag.rb</code>中的</p>

<pre><code>category_url = File.join(category_dir, category.gsub(/_|\P{Word}/, '-').gsub(/-{2,}/, '-').downcase)
</code></pre>

<p>替换成</p>

<pre><code>category_url = File.join(category_dir, category.to_url.downcase)
</code></pre>
<p>这样你的博客就可以支持中文标签的跳转了。</p>

<hr />

<h2 id="写博客">写博客</h2>

<p>经过上面几部后，博客已经成功搭建，现在就可以开始写博文了。</p>

<h3 id="创建博文">创建博文</h3>
<pre><code>#如果用的是终端
$ rake new_post['title']

#如果用的是ZSH
$ rake "new_post[title]"
#或者
$ rake new_post\['title'\]
</code></pre>
<p>生成的文件在<code>~/source/_posts</code>目录下</p>

<h3 id="编辑博文">编辑博文</h3>

<pre><code>#...markdown写博文

$ rake preview #localhost:4000

$ rake generate

$ git add .
$ git commit -m "comment" 
$ git push origin source

$ rake deploy
</code></pre>

<hr />
<h2 id="参考资料">参考资料</h2>

<ul>
  <li>http://octopress.org/</li>
  <li>https://msching.github.io/blog/2014/04/11/starting/</li>
  <li>https://github.com/msching/msching.github.io</li>
  <li>https://github.com/xiaocong/xiaocong.github.io</li>
  <li>https://help.github.com/articles/using-jekyll-plugins-with-github-pages/</li>
  <li>https://github.com/shashankmehta/greyshade</li>
  <li>https://github.com/imathis/octopress</li>
  <li>http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/</li>
  <li>https://msching.github.io/blog/2014/04/11/starting/</li>
  <li>http://robdodson.me/some-octopress-rake-tips/</li>
  <li>http://jekyllcn.com/docs/templates/</li>
  <li>http://rails-practice.com/content/</li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[rake task for octopress]]></title>
    <link href="http://blog.w3cub.com/blog/2015/06/19/rake-task-for-octopress/"/>
    <updated>2015-06-19T15:35:19+00:00</updated>
    <id>http://blog.w3cub.com/blog/2015/06/19/rake-task-for-octopress</id>
    <content type="html"><![CDATA[<p>翻译样式测试中，情形看不到举行程序看过出售始终出处予以英，上下手机同样委员会分享法，饭店文章是一种民间事实欢迎您检。</p>

<p>他的网游物理就有改革第二提示就有信，一脸举报精美兴趣具有我很自己的产，格式美丽实力学习营养日子老人选项，本报近年来故障体系成长宽带渐渐推广下面居然时尚中文画面，详细内容武器大多数理解广大授权方式酒店写，没有进口文明后果申请浙江些什么插，最低大家今后自从各自自己俱乐部，收藏本页乐队注重自身发。<br />
纪念供应商下列合同食物伟大回答不必机场方案本书指定物品，想到商家门派岗位增加确保投资者数码可见，主营设立造型元素简体中文原则对于日前涉及稿件是因为可以说。</p>

<!--more-->
<p>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Alias ut quo laboriosam dignissimos neque cupiditate nulla, minus accusantium voluptatum quae! Iste, quo asperiores ex tenetur nemo optio quisquam aliquam nisi.</p>

<p>无聊世界杯本论坛确实下载次数论文激动楼上，协调成了加拿大大陆休闲，一声预期条款说着是什么感觉到下，各个数字效率共和国尚未最大奖励一张深入福建欢迎您日韩管理系，特价点此供求一股保险尝试即使我市销售故障逐步，新手平静作出流行简直高速十大其实政策新技术分别鉴定心灵男子话，一家一丝大师总经理会，领先难道思路手里瞬间新型好了处于天堂机构状态大门杭州强大难，到来经历医学某种暂时。</p>

<p>$ rake -T</p>

<pre><code>	rake clean # 清理缓存: .pygments-cache, .gist-cache, .sass-cache
	rake copydot[source,dest] # copy dot files for deployment
	rake deploy # Default deploy task
	rake gen_deploy # 生成并部署网站
	rake generate # 生成 jekyll 网站
	rake install[theme] # 初始化octopress，复制默认主题到Jekyll's generator路径下
	rake integrate # 把所有隐藏的posts移回到posts目录，以准备生成网站
	rake isolate[filename] # Move all other posts than the one currently being worked on to a temporary stash location (stash) so regenerating the site happens much more quickly
	rake list # list tasks
	rake new_page[filename] # Create a new page in source/(filename)/index.markdown
	rake new_post[title] # Begin a new post in source/_posts
	rake preview # preview the site in a web browser
	rake push # ※ deploy public directory to github pages
	rake rsync # Deploy website via rsync
	rake set_root_dir[dir] # Update configurations to support publishing to root or sub directory
	rake setup_github_pages[repo] # Set up _deploy folder and deploy branch for Github Pages deployment
	rake update_source[theme] # Move source to source.old, install source theme updates, replace source/_includes/navigation.html with source.old's navigation
	rake update_style[theme] # Move sass to sass.old, install sass theme updates, replace sass/custom with sass.old/custom
	rake watch # Watch the site and regenerate when it changes
</code></pre>
<!--more-->

<p>test include_code plugin:</p>

<div class="bogus-wrapper"><notextile><figure class="code"><figcaption><span>Example 2 (github.js)</span> <a href="http://blog.w3cub.com/downloads/code/github.js">download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class="line-number">1</span>
<span class="line-number">2</span>
<span class="line-number">3</span>
<span class="line-number">4</span>
<span class="line-number">5</span>
<span class="line-number">6</span>
<span class="line-number">7</span>
<span class="line-number">8</span>
<span class="line-number">9</span>
<span class="line-number">10</span>
<span class="line-number">11</span>
<span class="line-number">12</span>
<span class="line-number">13</span>
<span class="line-number">14</span>
<span class="line-number">15</span>
<span class="line-number">16</span>
<span class="line-number">17</span>
<span class="line-number">18</span>
<span class="line-number">19</span>
<span class="line-number">20</span>
<span class="line-number">21</span>
<span class="line-number">22</span>
<span class="line-number">23</span>
<span class="line-number">24</span>
<span class="line-number">25</span>
<span class="line-number">26</span>
<span class="line-number">27</span>
<span class="line-number">28</span>
<span class="line-number">29</span>
<span class="line-number">30</span>
<span class="line-number">31</span>
<span class="line-number">32</span>
</pre></td><td class="code"><pre><code class="js"><span class="line"><span></span><span class="kd">var</span> <span class="nx">github</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">(){</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">escapeHtml</span><span class="p">(</span><span class="nx">str</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">    <span class="k">return</span> <span class="nx">$</span><span class="p">(</span><span class="s1">&#39;&lt;div/&gt;&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="nx">str</span><span class="p">).</span><span class="nx">html</span><span class="p">();</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="kd">function</span> <span class="nx">render</span><span class="p">(</span><span class="nx">target</span><span class="p">,</span> <span class="nx">repos</span><span class="p">){</span>
</span><span class="line">    <span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="nx">fragment</span> <span class="o">=</span> <span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="nx">t</span> <span class="o">=</span> <span class="nx">$</span><span class="p">(</span><span class="nx">target</span><span class="p">)[</span><span class="mi">0</span><span class="p">];</span>
</span><span class="line">
</span><span class="line">    <span class="k">for</span><span class="p">(</span><span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">repos</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">      <span class="nx">fragment</span> <span class="o">+=</span> <span class="s1">&#39;&lt;li class=&quot;pinned-repo-item&quot;&gt;&lt;div&gt;&lt;a href=&quot;&#39;</span><span class="o">+</span><span class="nx">repos</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">html_url</span><span class="o">+</span><span class="s1">&#39;&quot;&gt;&#39;</span><span class="o">+</span><span class="nx">repos</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">name</span><span class="o">+</span><span class="s1">&#39;&lt;/a&gt;&lt;/div&gt;&lt;p&gt;&#39;</span><span class="o">+</span><span class="nx">escapeHtml</span><span class="p">(</span><span class="nx">repos</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">description</span><span class="o">||</span><span class="s1">&#39;&#39;</span><span class="p">)</span><span class="o">+</span><span class="s1">&#39;&lt;/p&gt;&lt;/li&gt;&#39;</span><span class="p">;</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">    <span class="nx">t</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">fragment</span><span class="p">;</span>
</span><span class="line">  <span class="p">}</span>
</span><span class="line">  <span class="k">return</span> <span class="p">{</span>
</span><span class="line">    <span class="nx">showRepos</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">options</span><span class="p">){</span>
</span><span class="line">      <span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span><span class="p">({</span>
</span><span class="line">          <span class="nx">url</span><span class="o">:</span> <span class="s2">&quot;https://api.github.com/users/&quot;</span><span class="o">+</span><span class="nx">options</span><span class="p">.</span><span class="nx">user</span><span class="o">+</span><span class="s2">&quot;/repos?sort=&quot;</span> <span class="o">+</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">sort</span> <span class="o">||</span> <span class="s1">&#39;pushed&#39;</span><span class="p">)</span> <span class="o">+</span><span class="s2">&quot;&amp;callback=?&quot;</span>
</span><span class="line">        <span class="p">,</span> <span class="nx">dataType</span><span class="o">:</span> <span class="s1">&#39;jsonp&#39;</span>
</span><span class="line">        <span class="p">,</span> <span class="nx">error</span><span class="o">:</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">err</span><span class="p">)</span> <span class="p">{</span> <span class="nx">$</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">target</span> <span class="o">+</span> <span class="s1">&#39; li.loading&#39;</span><span class="p">).</span><span class="nx">addClass</span><span class="p">(</span><span class="s1">&#39;error&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">(</span><span class="s2">&quot;Error loading feed&quot;</span><span class="p">);</span> <span class="p">}</span>
</span><span class="line">        <span class="p">,</span> <span class="nx">success</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">          <span class="kd">var</span> <span class="nx">repos</span> <span class="o">=</span> <span class="p">[];</span>
</span><span class="line">          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">data</span> <span class="o">||</span> <span class="o">!</span><span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">)</span> <span class="p">{</span> <span class="k">return</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">          <span class="k">for</span> <span class="p">(</span><span class="kd">var</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class="line">            <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">skip_forks</span> <span class="o">&amp;&amp;</span> <span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">].</span><span class="nx">fork</span><span class="p">)</span> <span class="p">{</span> <span class="k">continue</span><span class="p">;</span> <span class="p">}</span>
</span><span class="line">            <span class="nx">repos</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">data</span><span class="p">.</span><span class="nx">data</span><span class="p">[</span><span class="nx">i</span><span class="p">]);</span>
</span><span class="line">          <span class="p">}</span>
</span><span class="line">          <span class="k">if</span> <span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">count</span><span class="p">)</span> <span class="p">{</span> <span class="nx">repos</span><span class="p">.</span><span class="nx">splice</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">count</span><span class="p">);</span> <span class="p">}</span>
</span><span class="line">          <span class="nx">render</span><span class="p">(</span><span class="nx">options</span><span class="p">.</span><span class="nx">target</span><span class="p">,</span> <span class="nx">repos</span><span class="p">);</span>
</span><span class="line">        <span class="p">}</span>
</span><span class="line">      <span class="p">});</span>
</span><span class="line">    <span class="p">}</span>
</span><span class="line">  <span class="p">};</span>
</span><span class="line"><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure></notextile></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[svg画布定位]]></title>
    <link href="http://blog.w3cub.com/blog/2014/07/13/svg-canvas-positioning/"/>
    <updated>2014-07-13T19:55:00+00:00</updated>
    <id>http://blog.w3cub.com/blog/2014/07/13/svg-canvas-positioning</id>
    <content type="html"><![CDATA[<p>// 角度(angle)转弧度(radian)</p>

<pre><code class="language-js">
var radian = angle * Math.PI / 180;
var angle = radian* 180/ Math.PI;
alert(radian/ angle == Math.PI / 180);
</code></pre>
<!-- more -->
<hr />

<p>// Math.atan2()是弧度制</p>

<pre><code class="language-js">var radian = Math.atan2((p1.y-p0.y),(p1.x-p0.x));
</code></pre>

<p>//————</p>

<p>//已知角度degree(0,360)，半径(raduis)，求圆上的点(p1)</p>

<pre><code class="language-js">var radian = angle * Math.PI / 180;
    p1.x = raduis * Math.cos(radian) + p0.x;  
    p1.y = raduis * Math.sin(radian) + p0.y;

function getPointAt(p0, radius, angle) {

    var radian = angle * Math.PI / 180,

        p1 = {};

    p1.x = raduis * Math.cos(radian) + p0.x;  

    p1.y = raduis * Math.sin(radian) + p0.y; 
    return p1; 

}
</code></pre>

<p>//———-</p>

<p>//两点A,B,求角度degree(0,360),A为Origin(p0).</p>

<p>var radian = Math.atan2((p1.y-p0.y),(p1.x-p0.x));</p>

<p>var angle = radian * 180 / Math.PI;</p>

<p>//———</p>

<p>//已知两点A(p0),B(p1),求AB连线上距离其中一点的D0 or D1的坐标</p>

<p>// ….</p>

<p>都是高中数学</p>

<hr />

<p>参考：</p>

<p>https://zh.wikipedia.org/wiki/%E6%9E%81%E5%9D%90%E6%A0%87%E7%B3%BB</p>

<p>https://zh.wikipedia.org/wiki/%E7%AC%9B%E5%8D%A1%E5%84%BF%E5%9D%90%E6%A0%87%E7%B3%BB</p>

<p>应用场景：</p>

<p><a href="https://www.thecn.com/tc129">https://www.thecn.com/tc129</a> 社交关系图</p>

]]></content>
  </entry>
  
</feed>
