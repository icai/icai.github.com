<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: getter | 泛前端开发]]></title>
  <link href="http://blog.w3cub.com/blog/tags/getter/atom.xml" rel="self"/>
  <link href="http://blog.w3cub.com/"/>
  <updated>2015-12-21T23:57:50+08:00</updated>
  <id>http://blog.w3cub.com/</id>
  <author>
    <name><![CDATA[Terry Cai]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[javascript类库中和编程语言中getter和setter]]></title>
    <link href="http://blog.w3cub.com/blog/2013/08/17/javascript-lib-and-other-programming-language-s-getter-and-setter/"/>
    <updated>2013-08-17T23:16:31+08:00</updated>
    <id>http://blog.w3cub.com/blog/2013/08/17/javascript-lib-and-other-programming-language-s-getter-and-setter</id>
    <content type="html"><![CDATA[<p>1.backbonejs中的getter和setter</p>




<p>所说的backbonejs中的getter和setter就是内部自定义get和set方法，set方法嵌入了<code>Pub/Sub模型</code>,
例如 <code>book.on("change:title change:author", ...);</code>当<code>book.set('title':'othertitle');</code>触发<code>change</code>对用的<code>function</code>,
解开二重锁 （不等于自身和并且非正在执行change function)。</p>




<!--more-->




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>set: function(key, val, options) {
</span><span class='line'>  var attr, attrs, unset, changes, silent, changing, prev, current;
</span><span class='line'>  if (key == null) return this;
</span><span class='line'>
</span><span class='line'>  // Handle both `"key", value` and `{key: value}` -style arguments.
</span><span class='line'>  if (typeof key === 'object') {
</span><span class='line'>    attrs = key;
</span><span class='line'>    options = val;
</span><span class='line'>  } else {
</span><span class='line'>    (attrs = {})[key] = val;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  options || (options = {});
</span><span class='line'>
</span><span class='line'>  // Run validation.
</span><span class='line'>  if (!this._validate(attrs, options)) return false;
</span><span class='line'>
</span><span class='line'>  // Extract attributes and options.
</span><span class='line'>  unset           = options.unset;
</span><span class='line'>  silent          = options.silent;
</span><span class='line'>  changes         = [];
</span><span class='line'>  changing        = this._changing;
</span><span class='line'>  this._changing  = true;
</span><span class='line'>
</span><span class='line'>  if (!changing) {
</span><span class='line'>    this._previousAttributes = _.clone(this.attributes);
</span><span class='line'>    this.changed = {};
</span><span class='line'>  }
</span><span class='line'>  current = this.attributes, prev = this._previousAttributes;
</span><span class='line'>
</span><span class='line'>  // Check for changes of `id`.
</span><span class='line'>  if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];
</span><span class='line'>
</span><span class='line'>  // For each `set` attribute, update or delete the current value.
</span><span class='line'>  for (attr in attrs) {
</span><span class='line'>    val = attrs[attr];
</span><span class='line'>    if (!_.isEqual(current[attr], val)) changes.push(attr);
</span><span class='line'>    if (!_.isEqual(prev[attr], val)) {
</span><span class='line'>      this.changed[attr] = val;
</span><span class='line'>    } else {
</span><span class='line'>      delete this.changed[attr];
</span><span class='line'>    }
</span><span class='line'>    unset ? delete current[attr] : current[attr] = val;
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  // Trigger all relevant attribute changes.
</span><span class='line'>  if (!silent) {
</span><span class='line'>    if (changes.length) this._pending = true;
</span><span class='line'>    for (var i = 0, l = changes.length; i &lt; l; i++) {
</span><span class='line'>      this.trigger('change:' + changes[i], this, current[changes[i]], options);
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>  // You might be wondering why there's a `while` loop here. Changes can
</span><span class='line'>  // be recursively nested within `"change"` events.
</span><span class='line'>  if (changing) return this;
</span><span class='line'>  if (!silent) {
</span><span class='line'>    while (this._pending) {
</span><span class='line'>      this._pending = false;
</span><span class='line'>      this.trigger('change', this, options);
</span><span class='line'>    }
</span><span class='line'>  }
</span><span class='line'>  this._pending = false;
</span><span class='line'>  this._changing = false;
</span><span class='line'>  return this;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<p>2.YUI中的getter和setter</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>get : function(name) {
</span><span class='line'>    return this._getAttr(name);
</span><span class='line'>},
</span><span class='line'>
</span><span class='line'>set : function(name, val, opts) {
</span><span class='line'>    return this._setAttr(name, val, opts);
</span><span class='line'>},
</span><span class='line'>//……</span></code></pre></td></tr></table></div></figure>




<p>get: <code>http://yuilibrary.com/yui/docs/api/files/attribute_js_AttributeCore.js.html#l343</code></p>




<p>Y.augment : <code>http://yuilibrary.com/yui/docs/api/files/oop_js_oop.js.html#l67</code></p>




<p>3.javascript中的getter和setter</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>// 对象构造实现，javascript类库中最常用的方法
</span><span class='line'>
</span><span class='line'>function Field(val){
</span><span class='line'>    var value = val;
</span><span class='line'>       
</span><span class='line'>    this.getValue = function(){
</span><span class='line'>      return value;
</span><span class='line'>    };
</span><span class='line'>       
</span><span class='line'>    this.setValue = function(val){
</span><span class='line'>      value = val;
</span><span class='line'>    };
</span><span class='line'>} 
</span><span class='line'>
</span><span class='line'>// 模拟“hidden value property” 
</span><span class='line'>
</span><span class='line'>function Field(val){
</span><span class='line'>  var value = val;
</span><span class='line'>   
</span><span class='line'>    this.__defineGetter__("value", function(){
</span><span class='line'>      return value;
</span><span class='line'>    });
</span><span class='line'>       
</span><span class='line'>    this.__defineSetter__("value", function(val){
</span><span class='line'>      value = val;
</span><span class='line'>    });
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>// es6 是实现
</span><span class='line'>function Field(val){
</span><span class='line'>  this.value = val;
</span><span class='line'>}
</span><span class='line'> 
</span><span class='line'>Field.prototype = {
</span><span class='line'>    get value(){
</span><span class='line'>      return this._value;
</span><span class='line'>    },
</span><span class='line'>    set value(val){
</span><span class='line'>      this._value = val;
</span><span class='line'>    }
</span><span class='line'>};</span></code></pre></td></tr></table></div></figure>




<p>4.java中的getter和setter</p>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>public class TestGetterSetter { //TestGetterSetter.class
</span><span class='line'>  
</span><span class='line'>  private String name ;
</span><span class='line'>
</span><span class='line'>  public void setName(String name){
</span><span class='line'>      if(this.name != name){
</span><span class='line'>          System.out.println("name is changeing!");
</span><span class='line'>          this.name = name ;
</span><span class='line'>          // trigger change  event
</span><span class='line'>      }
</span><span class='line'>
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>public String getName(String name){
</span><span class='line'>    if (this.name == null ){
</span><span class='line'>    setName("Guest");
</span><span class='line'>    }
</span><span class='line'>    return this.name ;
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>  public String getName() {
</span><span class='line'>      return name;
</span><span class='line'>  }
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>public class TestMain { //TestMain.class
</span><span class='line'>  TestGetterSetter tb ;
</span><span class='line'>
</span><span class='line'>  public static void main(String[] args) {
</span><span class='line'>      
</span><span class='line'>      new TestMain().todo();
</span><span class='line'>      // TODO Auto-generated method stub
</span><span class='line'>
</span><span class='line'>  }
</span><span class='line'>  public TestMain(){ // init
</span><span class='line'>      
</span><span class='line'>       super();
</span><span class='line'>       System.out.println("init TestMain !!");
</span><span class='line'>  }
</span><span class='line'>  public void todo(){
</span><span class='line'>       tb  =  new TestGetterSetter();
</span><span class='line'>       tb.setName("caicai");
</span><span class='line'>       System.out.println(tb.getName());
</span><span class='line'>  }
</span><span class='line'>
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<p>总结：</p>




<p>用function封装存储规则，在set，get中嵌入pub/sub模式实现 事件触发。</p>




<p>参考文献：</p>




<p>1.<a href="http://ejohn.org/blog/javascript-getters-and-setters/">http://ejohn.org/blog/javascript-getters-and-setters/</a></p>




<p>2.javascript权威指南 6.6 属性getter和setter</p>




<p>-EOF-</p>

]]></content>
  </entry>
  
</feed>